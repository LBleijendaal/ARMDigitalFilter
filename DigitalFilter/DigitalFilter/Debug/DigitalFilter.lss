
DigitalFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ec  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  004007ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000048  20400434  00400c20  00020434  2**2
                  ALLOC
  3 .heap         00000204  2040047c  00400c68  00020434  2**0
                  ALLOC
  4 .stack        00000400  20400680  00400e6c  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00005833  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a46  00000000  00000000  00025cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d8  00000000  00000000  00026730  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000f8  00000000  00000000  00026908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00026a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002d54  00000000  00000000  00026a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003931  00000000  00000000  000297ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00131509  00000000  00000000  0002d11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000324  00000000  00000000  0015e628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 0a 40 20 49 04 40 00 45 04 40 00 45 04 40 00     ..@ I.@.E.@.E.@.
  400010:	45 04 40 00 45 04 40 00 45 04 40 00 00 00 00 00     E.@.E.@.E.@.....
	...
  40002c:	45 04 40 00 45 04 40 00 00 00 00 00 45 04 40 00     E.@.E.@.....E.@.
  40003c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40004c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40005c:	45 04 40 00 45 04 40 00 00 00 00 00 45 04 40 00     E.@.E.@.....E.@.
  40006c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40007c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40008c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40009c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000ac:	45 04 40 00 45 04 40 00 01 05 40 00 45 05 40 00     E.@.E.@...@.E.@.
  4000bc:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000cc:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000dc:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000ec:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  4000fc:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40010c:	45 04 40 00 45 04 40 00 00 00 00 00 00 00 00 00     E.@.E.@.........
  40011c:	00 00 00 00 45 04 40 00 45 04 40 00 45 04 40 00     ....E.@.E.@.E.@.
  40012c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40013c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40014c:	45 04 40 00 45 04 40 00 45 04 40 00 45 04 40 00     E.@.E.@.E.@.E.@.
  40015c:	45 04 40 00 45 04 40 00 45 04 40 00                 E.@.E.@.E.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400434 	.word	0x20400434
  400184:	00000000 	.word	0x00000000
  400188:	004007ec 	.word	0x004007ec

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004007ec 	.word	0x004007ec
  4001c8:	20400438 	.word	0x20400438
  4001cc:	004007ec 	.word	0x004007ec
  4001d0:	00000000 	.word	0x00000000

004001d4 <ioport_init>:


void ioport_init()
{
	/* Initialize IOPORTs */
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOA);
  4001d4:	4b3e      	ldr	r3, [pc, #248]	; (4002d0 <ioport_init+0xfc>)
  4001d6:	220a      	movs	r2, #10
  4001d8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4001dc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4001e0:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4001e4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOB);
  4001e8:	220b      	movs	r2, #11
  4001ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4001ee:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4001f2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4001f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOC);
  4001fa:	220c      	movs	r2, #12
  4001fc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400200:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400204:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400208:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOD);
  40020c:	2210      	movs	r2, #16
  40020e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400212:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400216:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40021a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOE);
  40021e:	2211      	movs	r2, #17
  400220:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400224:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400228:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40022c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	PIOC->PIO_OER |= PIO_PC8;
  400230:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  400234:	691a      	ldr	r2, [r3, #16]
  400236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40023a:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC8;
  40023c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  400240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  400244:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC8;
  400248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  40024a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  40024e:	635a      	str	r2, [r3, #52]	; 0x34

	

	
	/* Configure Push Button pins */
	PIOA->PIO_ODR |= PIO_PA11;
  400250:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400254:	695a      	ldr	r2, [r3, #20]
  400256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40025a:	615a      	str	r2, [r3, #20]
	PIOA->PIO_OWER |= PIO_PA11;
  40025c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  400260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400264:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOA->PIO_PUER |= PIO_PA11;
  400268:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  40026a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40026e:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PPDDR |= PIO_PA11;
  400270:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  400274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400278:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	PIOA->PIO_MDDR |= PIO_PA11;
  40027c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  40027e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400282:	655a      	str	r2, [r3, #84]	; 0x54
	PIOA->PIO_IFER |= PIO_PA11;
  400284:	6a1a      	ldr	r2, [r3, #32]
  400286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40028a:	621a      	str	r2, [r3, #32]
	PIOA->PIO_IFSCER |= PIO_PA11;
  40028c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  400290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	PIOA->PIO_ABCDSR[0] &= ~(PIO_PA11);
  400298:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40029a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40029e:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABCDSR[1] &= ~(PIO_PA11);
  4002a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  4002a6:	675a      	str	r2, [r3, #116]	; 0x74
	PIOA->PIO_ESR |= PIO_PA11;
  4002a8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  4002ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_REHLSR |= PIO_PA11;
  4002b4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  4002b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002bc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	PIOA->PIO_AIMER |= PIO_PA11;
  4002c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  4002c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	400e0600 	.word	0x400e0600

004002d4 <board_init>:
}

void board_init()
{
  4002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Disable Watchdog */
	WDT->WDT_MR |= WDT_MR_WDDIS;
  4002d6:	4a32      	ldr	r2, [pc, #200]	; (4003a0 <board_init+0xcc>)
  4002d8:	6853      	ldr	r3, [r2, #4]
  4002da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4002de:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002e4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e8:	4b2e      	ldr	r3, [pc, #184]	; (4003a4 <board_init+0xd0>)
  4002ea:	2100      	movs	r1, #0
  4002ec:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002f4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f8:	695a      	ldr	r2, [r3, #20]
  4002fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400304:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400308:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40030c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400310:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400314:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400318:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  40031c:	016e      	lsls	r6, r5, #5
  40031e:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400322:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400326:	461c      	mov	r4, r3
  400328:	ea06 000e 	and.w	r0, r6, lr
  40032c:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  40032e:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400330:	ea42 0100 	orr.w	r1, r2, r0
  400334:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400338:	3b01      	subs	r3, #1
  40033a:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  40033e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400342:	d1f5      	bne.n	400330 <board_init+0x5c>
    } while(sets-- != 0U);
  400344:	3d01      	subs	r5, #1
  400346:	3e20      	subs	r6, #32
  400348:	f1b5 3fff 	cmp.w	r5, #4294967295
  40034c:	d1ec      	bne.n	400328 <board_init+0x54>
  40034e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  400352:	4b14      	ldr	r3, [pc, #80]	; (4003a4 <board_init+0xd0>)
  400354:	695a      	ldr	r2, [r3, #20]
  400356:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40035a:	615a      	str	r2, [r3, #20]
  40035c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400360:	f3bf 8f6f 	isb	sy
	/* Enabling the Cache */
	SCB_EnableICache();
	SCB_EnableDCache();
	
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  400364:	4a10      	ldr	r2, [pc, #64]	; (4003a8 <board_init+0xd4>)
  400366:	4911      	ldr	r1, [pc, #68]	; (4003ac <board_init+0xd8>)
  400368:	6051      	str	r1, [r2, #4]
	| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  40036a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40036e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  400370:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400374:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400378:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40037c:	f022 0201 	bic.w	r2, r2, #1
  400380:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400384:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400388:	f022 0201 	bic.w	r2, r2, #1
  40038c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400390:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400394:	f3bf 8f6f 	isb	sy
	| EEFC_FCR_FARG(7));
	
	tcm_disable();
	
	ioport_init();
  400398:	4b05      	ldr	r3, [pc, #20]	; (4003b0 <board_init+0xdc>)
  40039a:	4798      	blx	r3
  40039c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40039e:	bf00      	nop
  4003a0:	400e1850 	.word	0x400e1850
  4003a4:	e000ed00 	.word	0xe000ed00
  4003a8:	400e0c00 	.word	0x400e0c00
  4003ac:	5a00080c 	.word	0x5a00080c
  4003b0:	004001d5 	.word	0x004001d5

004003b4 <dac0ch0init>:
	
	DACC -> DACC_CDR[0] = 0x0000;
}
*/
void dac0ch0init(void) 
{
  4003b4:	b410      	push	{r4}
	/* Enable DACC peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_DACC);
  4003b6:	4b1f      	ldr	r3, [pc, #124]	; (400434 <dac0ch0init+0x80>)
  4003b8:	221e      	movs	r2, #30
  4003ba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4003be:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4003c2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4003c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the DACC module */
	DACC->DACC_CR = DACC_CR_SWRST;
  4003ca:	4b1b      	ldr	r3, [pc, #108]	; (400438 <dac0ch0init+0x84>)
  4003cc:	2101      	movs	r1, #1
  4003ce:	6019      	str	r1, [r3, #0]
	
	DACC->DACC_WPMR |= DACC_WPMR_WPKEY_PASSWD;
  4003d0:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
  4003d4:	4a19      	ldr	r2, [pc, #100]	; (40043c <dac0ch0init+0x88>)
  4003d6:	4302      	orrs	r2, r0
  4003d8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC->DACC_WPMR |= (0x00 << 0);
  4003dc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  4003e0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	DACC->DACC_MR |= DACC_MR_PRESCALER(0x9)
  4003e4:	685a      	ldr	r2, [r3, #4]
  4003e6:	f042 6210 	orr.w	r2, r2, #150994944	; 0x9000000
  4003ea:	605a      	str	r2, [r3, #4]
	//DACC->DACC_TRIGR |= DACC_TRIGR_OSR1(0x0);
	
	//DACC->DACC_TRIGR |= DACC_TRIGR_TRGSEL0_TRGSEL0;
	//DACC->DACC_TRIGR |= DACC_TRIGR_TRGSEL1_TRGSEL0;
	
	DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN0_DIS;
  4003ec:	689a      	ldr	r2, [r3, #8]
  4003ee:	609a      	str	r2, [r3, #8]
	//DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN1_DIS;
	DACC->DACC_ACR |= DACC_ACR_IBCTLCH0(3);
  4003f0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  4003f4:	f042 0203 	orr.w	r2, r2, #3
  4003f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4003fc:	4a10      	ldr	r2, [pc, #64]	; (400440 <dac0ch0init+0x8c>)
  4003fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400402:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400406:	2420      	movs	r4, #32
  400408:	f882 431e 	strb.w	r4, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40040c:	6010      	str	r0, [r2, #0]
	NVIC_SetPriority(DACC_IRQn, 1);
	NVIC_EnableIRQ(DACC_IRQn);
	
	
	
	uint32_t daccStatus = DACC->DACC_CHSR;
  40040e:	699a      	ldr	r2, [r3, #24]
	
	DACC->DACC_CHER = DACC_CHER_CH0_Msk;
  400410:	6119      	str	r1, [r3, #16]
	
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  400412:	f412 7f80 	tst.w	r2, #256	; 0x100
  400416:	d104      	bne.n	400422 <dac0ch0init+0x6e>
		daccStatus = DACC->DACC_CHSR;
  400418:	461a      	mov	r2, r3
  40041a:	6993      	ldr	r3, [r2, #24]
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  40041c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400420:	d0fb      	beq.n	40041a <dac0ch0init+0x66>
	}
	
	DACC->DACC_CDR[0] = (0x0011 << 0x00);        
  400422:	4b05      	ldr	r3, [pc, #20]	; (400438 <dac0ch0init+0x84>)
  400424:	2211      	movs	r2, #17
  400426:	61da      	str	r2, [r3, #28]
	
	DACC->DACC_IER |= DACC_IER_TXRDY0_Msk | DACC_IER_EOC0_Msk; 	
  400428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  40042a:	f042 0211 	orr.w	r2, r2, #17
  40042e:	625a      	str	r2, [r3, #36]	; 0x24
	
	
  400430:	bc10      	pop	{r4}
  400432:	4770      	bx	lr
  400434:	400e0600 	.word	0x400e0600
  400438:	40040000 	.word	0x40040000
  40043c:	44414300 	.word	0x44414300
  400440:	e000e100 	.word	0xe000e100

00400444 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400444:	e7fe      	b.n	400444 <Dummy_Handler>
	...

00400448 <Reset_Handler>:
{
  400448:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  40044a:	4b17      	ldr	r3, [pc, #92]	; (4004a8 <Reset_Handler+0x60>)
  40044c:	4a17      	ldr	r2, [pc, #92]	; (4004ac <Reset_Handler+0x64>)
  40044e:	429a      	cmp	r2, r3
  400450:	d010      	beq.n	400474 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  400452:	4b17      	ldr	r3, [pc, #92]	; (4004b0 <Reset_Handler+0x68>)
  400454:	4a14      	ldr	r2, [pc, #80]	; (4004a8 <Reset_Handler+0x60>)
  400456:	429a      	cmp	r2, r3
  400458:	d20c      	bcs.n	400474 <Reset_Handler+0x2c>
  40045a:	3b01      	subs	r3, #1
  40045c:	1a9b      	subs	r3, r3, r2
  40045e:	f023 0303 	bic.w	r3, r3, #3
  400462:	3304      	adds	r3, #4
  400464:	4413      	add	r3, r2
  400466:	4911      	ldr	r1, [pc, #68]	; (4004ac <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  400468:	f851 0b04 	ldr.w	r0, [r1], #4
  40046c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400470:	429a      	cmp	r2, r3
  400472:	d1f9      	bne.n	400468 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  400474:	4b0f      	ldr	r3, [pc, #60]	; (4004b4 <Reset_Handler+0x6c>)
  400476:	4a10      	ldr	r2, [pc, #64]	; (4004b8 <Reset_Handler+0x70>)
  400478:	429a      	cmp	r2, r3
  40047a:	d20a      	bcs.n	400492 <Reset_Handler+0x4a>
  40047c:	3b01      	subs	r3, #1
  40047e:	1a9b      	subs	r3, r3, r2
  400480:	f023 0303 	bic.w	r3, r3, #3
  400484:	3304      	adds	r3, #4
  400486:	4413      	add	r3, r2
                *pDest++ = 0;
  400488:	2100      	movs	r1, #0
  40048a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40048e:	4293      	cmp	r3, r2
  400490:	d1fb      	bne.n	40048a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400492:	4a0a      	ldr	r2, [pc, #40]	; (4004bc <Reset_Handler+0x74>)
  400494:	4b0a      	ldr	r3, [pc, #40]	; (4004c0 <Reset_Handler+0x78>)
  400496:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40049a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40049c:	4b09      	ldr	r3, [pc, #36]	; (4004c4 <Reset_Handler+0x7c>)
  40049e:	4798      	blx	r3
        main();
  4004a0:	4b09      	ldr	r3, [pc, #36]	; (4004c8 <Reset_Handler+0x80>)
  4004a2:	4798      	blx	r3
  4004a4:	e7fe      	b.n	4004a4 <Reset_Handler+0x5c>
  4004a6:	bf00      	nop
  4004a8:	20400000 	.word	0x20400000
  4004ac:	004007ec 	.word	0x004007ec
  4004b0:	20400434 	.word	0x20400434
  4004b4:	2040047c 	.word	0x2040047c
  4004b8:	20400434 	.word	0x20400434
  4004bc:	e000ed00 	.word	0xe000ed00
  4004c0:	00400000 	.word	0x00400000
  4004c4:	00400655 	.word	0x00400655
  4004c8:	004004dd 	.word	0x004004dd

004004cc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
  4004cc:	4a01      	ldr	r2, [pc, #4]	; (4004d4 <SystemInit+0x8>)
  4004ce:	4b02      	ldr	r3, [pc, #8]	; (4004d8 <SystemInit+0xc>)
  4004d0:	601a      	str	r2, [r3, #0]
  4004d2:	4770      	bx	lr
  4004d4:	00b71b00 	.word	0x00b71b00
  4004d8:	20400000 	.word	0x20400000

004004dc <main>:

uint32_t tmp;
uint32_t boolean = 0;

int main(void)
{
  4004dc:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
  4004de:	4b04      	ldr	r3, [pc, #16]	; (4004f0 <main+0x14>)
  4004e0:	4798      	blx	r3
	sysclk_init();
  4004e2:	4b04      	ldr	r3, [pc, #16]	; (4004f4 <main+0x18>)
  4004e4:	4798      	blx	r3
	board_init();
  4004e6:	4b04      	ldr	r3, [pc, #16]	; (4004f8 <main+0x1c>)
  4004e8:	4798      	blx	r3
	//afec0ch0_init(0xFF);
	dac0ch0init();
  4004ea:	4b04      	ldr	r3, [pc, #16]	; (4004fc <main+0x20>)
  4004ec:	4798      	blx	r3
  4004ee:	e7fe      	b.n	4004ee <main+0x12>
  4004f0:	004004cd 	.word	0x004004cd
  4004f4:	004005e5 	.word	0x004005e5
  4004f8:	004002d5 	.word	0x004002d5
  4004fc:	004003b5 	.word	0x004003b5

00400500 <AFEC0_Handler>:
    }
}

void AFEC0_Handler(void)
{
	PIOC->PIO_SODR |= PIO_PC8;
  400500:	4a0c      	ldr	r2, [pc, #48]	; (400534 <AFEC0_Handler+0x34>)
  400502:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400508:	6313      	str	r3, [r2, #48]	; 0x30
	uint32_t status = AFEC0->AFEC_ISR;
  40050a:	4b0b      	ldr	r3, [pc, #44]	; (400538 <AFEC0_Handler+0x38>)
  40050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if((status & AFEC_IMR_EOC0) == 1) {
  40050e:	f013 0f01 	tst.w	r3, #1
  400512:	d00a      	beq.n	40052a <AFEC0_Handler+0x2a>
		PIOC->PIO_CODR |= PIO_PC8;
  400514:	6b53      	ldr	r3, [r2, #52]	; 0x34
  400516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40051a:	6353      	str	r3, [r2, #52]	; 0x34
		tmp = AFEC0->AFEC_CDR;
  40051c:	4b06      	ldr	r3, [pc, #24]	; (400538 <AFEC0_Handler+0x38>)
  40051e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  400520:	4b06      	ldr	r3, [pc, #24]	; (40053c <AFEC0_Handler+0x3c>)
  400522:	601a      	str	r2, [r3, #0]
		boolean = 1;
  400524:	2201      	movs	r2, #1
  400526:	4b06      	ldr	r3, [pc, #24]	; (400540 <AFEC0_Handler+0x40>)
  400528:	601a      	str	r2, [r3, #0]
	}
	AFEC0->AFEC_CR = AFEC_CR_START;
  40052a:	2202      	movs	r2, #2
  40052c:	4b02      	ldr	r3, [pc, #8]	; (400538 <AFEC0_Handler+0x38>)
  40052e:	601a      	str	r2, [r3, #0]
  400530:	4770      	bx	lr
  400532:	bf00      	nop
  400534:	400e1200 	.word	0x400e1200
  400538:	4003c000 	.word	0x4003c000
  40053c:	20400454 	.word	0x20400454
  400540:	20400450 	.word	0x20400450

00400544 <DACC_Handler>:
}

void DACC_Handler(void) {
	
	
	uint32_t status = DACC->DACC_ISR;
  400544:	4b07      	ldr	r3, [pc, #28]	; (400564 <DACC_Handler+0x20>)
  400546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	//uint32_t status2 = DACC->DACC_CHSR;
	if(((status & DACC_ISR_TXRDY0_Msk) == 1) && ((DACC -> DACC_CHSR) & (0x1u << 8)) == 256) {
  400548:	f013 0f01 	tst.w	r3, #1
  40054c:	d008      	beq.n	400560 <DACC_Handler+0x1c>
  40054e:	4b05      	ldr	r3, [pc, #20]	; (400564 <DACC_Handler+0x20>)
  400550:	699b      	ldr	r3, [r3, #24]
  400552:	f413 7f80 	tst.w	r3, #256	; 0x100
  400556:	d003      	beq.n	400560 <DACC_Handler+0x1c>
		DACC->DACC_CDR[0] = DACC_CDR_DATA0(1000);  
  400558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  40055c:	4b01      	ldr	r3, [pc, #4]	; (400564 <DACC_Handler+0x20>)
  40055e:	61da      	str	r2, [r3, #28]
  400560:	4770      	bx	lr
  400562:	bf00      	nop
  400564:	40040000 	.word	0x40040000

00400568 <mainclk_init>:
uint32_t mainclk_init()
{
	uint16_t tmp = 0;
	
	/* Enable Main XOSC */
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  400568:	4910      	ldr	r1, [pc, #64]	; (4005ac <mainclk_init+0x44>)
  40056a:	6a0b      	ldr	r3, [r1, #32]
	| CKGR_MOR_KEY_PASSWD
	| CKGR_MOR_MOSCXTEN
	| CKGR_MOR_MOSCXTST(XOSC12M_STARTUP_TIME);
  40056c:	4a10      	ldr	r2, [pc, #64]	; (4005b0 <mainclk_init+0x48>)
  40056e:	401a      	ands	r2, r3
  400570:	4b10      	ldr	r3, [pc, #64]	; (4005b4 <mainclk_init+0x4c>)
  400572:	4313      	orrs	r3, r2
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  400574:	620b      	str	r3, [r1, #32]
	
	/* wait for XOSC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400576:	460a      	mov	r2, r1
  400578:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40057a:	f013 0f01 	tst.w	r3, #1
  40057e:	d0fb      	beq.n	400578 <mainclk_init+0x10>
	
	/* Select XOSC as Main Clock */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD
  400580:	4a0a      	ldr	r2, [pc, #40]	; (4005ac <mainclk_init+0x44>)
  400582:	6a11      	ldr	r1, [r2, #32]
  400584:	4b0c      	ldr	r3, [pc, #48]	; (4005b8 <mainclk_init+0x50>)
  400586:	430b      	orrs	r3, r1
  400588:	6213      	str	r3, [r2, #32]
	| CKGR_MOR_MOSCSEL;
	
	/* wait for Main Clock to be ready */
	while(!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40058a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40058c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400590:	d0fb      	beq.n	40058a <mainclk_init+0x22>

	/* Check if Main Clock frequency is correct */
	while(!(PMC->CKGR_MCFR & CKGR_MCFR_MAINFRDY));
  400592:	4a06      	ldr	r2, [pc, #24]	; (4005ac <mainclk_init+0x44>)
  400594:	6a53      	ldr	r3, [r2, #36]	; 0x24
  400596:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40059a:	d0fb      	beq.n	400594 <mainclk_init+0x2c>
	tmp = (PMC->CKGR_MCFR & CKGR_MCFR_MAINF_Msk);
  40059c:	4b03      	ldr	r3, [pc, #12]	; (4005ac <mainclk_init+0x44>)
  40059e:	6a58      	ldr	r0, [r3, #36]	; 0x24
	
	if(tmp == 0) return EXIT_FAILURE;
  4005a0:	b280      	uxth	r0, r0
	
	return EXIT_SUCCESS;
	
}
  4005a2:	fab0 f080 	clz	r0, r0
  4005a6:	0940      	lsrs	r0, r0, #5
  4005a8:	4770      	bx	lr
  4005aa:	bf00      	nop
  4005ac:	400e0600 	.word	0x400e0600
  4005b0:	ffc8c1fc 	.word	0xffc8c1fc
  4005b4:	00373e01 	.word	0x00373e01
  4005b8:	01370000 	.word	0x01370000

004005bc <pll_init>:

/* Enable the PLL (300 MHz) */
uint32_t pll_init()
{
	/* Stop PLL first */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  4005bc:	4b08      	ldr	r3, [pc, #32]	; (4005e0 <pll_init+0x24>)
  4005be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4005c2:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_MULA(0);
	
	/* Configure and enable PLL */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  4005c4:	f502 12c1 	add.w	r2, r2, #1581056	; 0x182000
  4005c8:	f502 52f8 	add.w	r2, r2, #7936	; 0x1f00
  4005cc:	3201      	adds	r2, #1
  4005ce:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_DIVA_BYPASS
	| CKGR_PLLAR_MULA(((F_CPU / F_XOSC) - 1))
	| CKGR_PLLAR_PLLACOUNT(PLL_STARTUP_TIME);
	
	/* Wait for PLL lock */
	while(!(PMC->PMC_SR & PMC_SR_LOCKA));
  4005d0:	461a      	mov	r2, r3
  4005d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005d4:	f013 0f02 	tst.w	r3, #2
  4005d8:	d0fb      	beq.n	4005d2 <pll_init+0x16>
	
	return EXIT_SUCCESS;
}
  4005da:	2000      	movs	r0, #0
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	400e0600 	.word	0x400e0600

004005e4 <sysclk_init>:

uint32_t sysclk_init()
{
  4005e4:	b508      	push	{r3, lr}
 * \brief Enable FPU
 */
static inline void fpu_enable(void)
{
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4005e6:	4a15      	ldr	r2, [pc, #84]	; (40063c <sysclk_init+0x58>)
  4005e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4005f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4005f8:	f3bf 8f6f 	isb	sy
	fpu_enable();
	
	/* Set flash wait state */
	EFC->EEFC_FMR = EEFC_FMR_FWS(EFC_WAIT_STATE) 
  4005fc:	4a10      	ldr	r2, [pc, #64]	; (400640 <sysclk_init+0x5c>)
  4005fe:	4b11      	ldr	r3, [pc, #68]	; (400644 <sysclk_init+0x60>)
  400600:	601a      	str	r2, [r3, #0]
	| EEFC_FMR_CLOE;
			

	mainclk_init();
  400602:	4b11      	ldr	r3, [pc, #68]	; (400648 <sysclk_init+0x64>)
  400604:	4798      	blx	r3
	pll_init();
  400606:	4b11      	ldr	r3, [pc, #68]	; (40064c <sysclk_init+0x68>)
  400608:	4798      	blx	r3

	
	/* Select Master Clock Div */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  40060a:	4a11      	ldr	r2, [pc, #68]	; (400650 <sysclk_init+0x6c>)
  40060c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40060e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	| PMC_MCKR_MDIV_PCK_DIV2;
  400612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  400616:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400618:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40061a:	f013 0f08 	tst.w	r3, #8
  40061e:	d0fb      	beq.n	400618 <sysclk_init+0x34>
	
	/* Select PLL as Master Clock Source */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  400620:	4a0b      	ldr	r2, [pc, #44]	; (400650 <sysclk_init+0x6c>)
  400622:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400624:	f023 0303 	bic.w	r3, r3, #3
	| PMC_MCKR_CSS_PLLA_CLK;
  400628:	f043 0302 	orr.w	r3, r3, #2
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  40062c:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40062e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400630:	f013 0f08 	tst.w	r3, #8
  400634:	d0fb      	beq.n	40062e <sysclk_init+0x4a>
	
	return EXIT_SUCCESS;
  400636:	2000      	movs	r0, #0
  400638:	bd08      	pop	{r3, pc}
  40063a:	bf00      	nop
  40063c:	e000ed00 	.word	0xe000ed00
  400640:	04000600 	.word	0x04000600
  400644:	400e0c00 	.word	0x400e0c00
  400648:	00400569 	.word	0x00400569
  40064c:	004005bd 	.word	0x004005bd
  400650:	400e0600 	.word	0x400e0600

00400654 <__libc_init_array>:
  400654:	b570      	push	{r4, r5, r6, lr}
  400656:	4e0f      	ldr	r6, [pc, #60]	; (400694 <__libc_init_array+0x40>)
  400658:	4d0f      	ldr	r5, [pc, #60]	; (400698 <__libc_init_array+0x44>)
  40065a:	1b76      	subs	r6, r6, r5
  40065c:	10b6      	asrs	r6, r6, #2
  40065e:	bf18      	it	ne
  400660:	2400      	movne	r4, #0
  400662:	d005      	beq.n	400670 <__libc_init_array+0x1c>
  400664:	3401      	adds	r4, #1
  400666:	f855 3b04 	ldr.w	r3, [r5], #4
  40066a:	4798      	blx	r3
  40066c:	42a6      	cmp	r6, r4
  40066e:	d1f9      	bne.n	400664 <__libc_init_array+0x10>
  400670:	4e0a      	ldr	r6, [pc, #40]	; (40069c <__libc_init_array+0x48>)
  400672:	4d0b      	ldr	r5, [pc, #44]	; (4006a0 <__libc_init_array+0x4c>)
  400674:	1b76      	subs	r6, r6, r5
  400676:	f000 f8a7 	bl	4007c8 <_init>
  40067a:	10b6      	asrs	r6, r6, #2
  40067c:	bf18      	it	ne
  40067e:	2400      	movne	r4, #0
  400680:	d006      	beq.n	400690 <__libc_init_array+0x3c>
  400682:	3401      	adds	r4, #1
  400684:	f855 3b04 	ldr.w	r3, [r5], #4
  400688:	4798      	blx	r3
  40068a:	42a6      	cmp	r6, r4
  40068c:	d1f9      	bne.n	400682 <__libc_init_array+0x2e>
  40068e:	bd70      	pop	{r4, r5, r6, pc}
  400690:	bd70      	pop	{r4, r5, r6, pc}
  400692:	bf00      	nop
  400694:	004007d4 	.word	0x004007d4
  400698:	004007d4 	.word	0x004007d4
  40069c:	004007dc 	.word	0x004007dc
  4006a0:	004007d4 	.word	0x004007d4

004006a4 <register_fini>:
  4006a4:	4b02      	ldr	r3, [pc, #8]	; (4006b0 <register_fini+0xc>)
  4006a6:	b113      	cbz	r3, 4006ae <register_fini+0xa>
  4006a8:	4802      	ldr	r0, [pc, #8]	; (4006b4 <register_fini+0x10>)
  4006aa:	f000 b805 	b.w	4006b8 <atexit>
  4006ae:	4770      	bx	lr
  4006b0:	00000000 	.word	0x00000000
  4006b4:	004006c5 	.word	0x004006c5

004006b8 <atexit>:
  4006b8:	2300      	movs	r3, #0
  4006ba:	4601      	mov	r1, r0
  4006bc:	461a      	mov	r2, r3
  4006be:	4618      	mov	r0, r3
  4006c0:	f000 b81e 	b.w	400700 <__register_exitproc>

004006c4 <__libc_fini_array>:
  4006c4:	b538      	push	{r3, r4, r5, lr}
  4006c6:	4c0a      	ldr	r4, [pc, #40]	; (4006f0 <__libc_fini_array+0x2c>)
  4006c8:	4d0a      	ldr	r5, [pc, #40]	; (4006f4 <__libc_fini_array+0x30>)
  4006ca:	1b64      	subs	r4, r4, r5
  4006cc:	10a4      	asrs	r4, r4, #2
  4006ce:	d00a      	beq.n	4006e6 <__libc_fini_array+0x22>
  4006d0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4006d4:	3b01      	subs	r3, #1
  4006d6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4006da:	3c01      	subs	r4, #1
  4006dc:	f855 3904 	ldr.w	r3, [r5], #-4
  4006e0:	4798      	blx	r3
  4006e2:	2c00      	cmp	r4, #0
  4006e4:	d1f9      	bne.n	4006da <__libc_fini_array+0x16>
  4006e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4006ea:	f000 b877 	b.w	4007dc <_fini>
  4006ee:	bf00      	nop
  4006f0:	004007ec 	.word	0x004007ec
  4006f4:	004007e8 	.word	0x004007e8

004006f8 <__retarget_lock_acquire_recursive>:
  4006f8:	4770      	bx	lr
  4006fa:	bf00      	nop

004006fc <__retarget_lock_release_recursive>:
  4006fc:	4770      	bx	lr
  4006fe:	bf00      	nop

00400700 <__register_exitproc>:
  400700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400704:	4d2c      	ldr	r5, [pc, #176]	; (4007b8 <__register_exitproc+0xb8>)
  400706:	4606      	mov	r6, r0
  400708:	6828      	ldr	r0, [r5, #0]
  40070a:	4698      	mov	r8, r3
  40070c:	460f      	mov	r7, r1
  40070e:	4691      	mov	r9, r2
  400710:	f7ff fff2 	bl	4006f8 <__retarget_lock_acquire_recursive>
  400714:	4b29      	ldr	r3, [pc, #164]	; (4007bc <__register_exitproc+0xbc>)
  400716:	681c      	ldr	r4, [r3, #0]
  400718:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40071c:	2b00      	cmp	r3, #0
  40071e:	d03e      	beq.n	40079e <__register_exitproc+0x9e>
  400720:	685a      	ldr	r2, [r3, #4]
  400722:	2a1f      	cmp	r2, #31
  400724:	dc1c      	bgt.n	400760 <__register_exitproc+0x60>
  400726:	f102 0e01 	add.w	lr, r2, #1
  40072a:	b176      	cbz	r6, 40074a <__register_exitproc+0x4a>
  40072c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400730:	2401      	movs	r4, #1
  400732:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400736:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40073a:	4094      	lsls	r4, r2
  40073c:	4320      	orrs	r0, r4
  40073e:	2e02      	cmp	r6, #2
  400740:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400744:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400748:	d023      	beq.n	400792 <__register_exitproc+0x92>
  40074a:	3202      	adds	r2, #2
  40074c:	f8c3 e004 	str.w	lr, [r3, #4]
  400750:	6828      	ldr	r0, [r5, #0]
  400752:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400756:	f7ff ffd1 	bl	4006fc <__retarget_lock_release_recursive>
  40075a:	2000      	movs	r0, #0
  40075c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400760:	4b17      	ldr	r3, [pc, #92]	; (4007c0 <__register_exitproc+0xc0>)
  400762:	b30b      	cbz	r3, 4007a8 <__register_exitproc+0xa8>
  400764:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400768:	f3af 8000 	nop.w
  40076c:	4603      	mov	r3, r0
  40076e:	b1d8      	cbz	r0, 4007a8 <__register_exitproc+0xa8>
  400770:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400774:	6002      	str	r2, [r0, #0]
  400776:	2100      	movs	r1, #0
  400778:	6041      	str	r1, [r0, #4]
  40077a:	460a      	mov	r2, r1
  40077c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400780:	f04f 0e01 	mov.w	lr, #1
  400784:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400788:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40078c:	2e00      	cmp	r6, #0
  40078e:	d0dc      	beq.n	40074a <__register_exitproc+0x4a>
  400790:	e7cc      	b.n	40072c <__register_exitproc+0x2c>
  400792:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400796:	430c      	orrs	r4, r1
  400798:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40079c:	e7d5      	b.n	40074a <__register_exitproc+0x4a>
  40079e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4007a2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4007a6:	e7bb      	b.n	400720 <__register_exitproc+0x20>
  4007a8:	6828      	ldr	r0, [r5, #0]
  4007aa:	f7ff ffa7 	bl	4006fc <__retarget_lock_release_recursive>
  4007ae:	f04f 30ff 	mov.w	r0, #4294967295
  4007b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007b6:	bf00      	nop
  4007b8:	20400430 	.word	0x20400430
  4007bc:	004007c4 	.word	0x004007c4
  4007c0:	00000000 	.word	0x00000000

004007c4 <_global_impure_ptr>:
  4007c4:	20400008                                ..@ 

004007c8 <_init>:
  4007c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007ca:	bf00      	nop
  4007cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4007ce:	bc08      	pop	{r3}
  4007d0:	469e      	mov	lr, r3
  4007d2:	4770      	bx	lr

004007d4 <__init_array_start>:
  4007d4:	004006a5 	.word	0x004006a5

004007d8 <__frame_dummy_init_array_entry>:
  4007d8:	0040018d                                ..@.

004007dc <_fini>:
  4007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007de:	bf00      	nop
  4007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4007e2:	bc08      	pop	{r3}
  4007e4:	469e      	mov	lr, r3
  4007e6:	4770      	bx	lr

004007e8 <__fini_array_start>:
  4007e8:	00400169 	.word	0x00400169
