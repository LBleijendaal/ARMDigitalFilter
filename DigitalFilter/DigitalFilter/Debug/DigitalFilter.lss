
DigitalFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  00400ac8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000044  20400434  00400efc  00020434  2**2
                  ALLOC
  3 .heap         00000200  20400478  00400f40  00020434  2**0
                  ALLOC
  4 .stack        00000400  20400678  00401140  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  7 .debug_info   000067f5  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c8d  00000000  00000000  00026cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000206  00000000  00000000  00027939  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000118  00000000  00000000  00027b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00027c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036b13  00000000  00000000  00027cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004375  00000000  00000000  0005e812  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001319a5  00000000  00000000  00062b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000003bc  00000000  00000000  0019452c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 0a 40 20 ad 04 40 00 a9 04 40 00 a9 04 40 00     x.@ ..@...@...@.
  400010:	a9 04 40 00 a9 04 40 00 a9 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a9 04 40 00 a9 04 40 00 00 00 00 00 a9 04 40 00     ..@...@.......@.
  40003c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40004c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40005c:	a9 04 40 00 a9 04 40 00 00 00 00 00 a9 04 40 00     ..@...@.......@.
  40006c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40007c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40008c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40009c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000ac:	a9 04 40 00 a9 04 40 00 8d 05 40 00 e5 05 40 00     ..@...@...@...@.
  4000bc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000cc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000dc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000ec:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000fc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40010c:	a9 04 40 00 a9 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ......@...@...@.
  40012c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40013c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40014c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40015c:	a9 04 40 00 a9 04 40 00 a9 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400434 	.word	0x20400434
  400184:	00000000 	.word	0x00000000
  400188:	00400ac8 	.word	0x00400ac8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00400ac8 	.word	0x00400ac8
  4001c8:	20400438 	.word	0x20400438
  4001cc:	00400ac8 	.word	0x00400ac8
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec0ch0_init>:
#include "afec.h"
#include <stdlib.h>


void afec0ch0_init(uint32_t prescaler)
{
  4001d4:	b410      	push	{r4}
	/* Enable AFEC0 peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_AFEC0);
  4001d6:	4b17      	ldr	r3, [pc, #92]	; (400234 <afec0ch0_init+0x60>)
  4001d8:	221d      	movs	r2, #29
  4001da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4001de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4001e2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4001e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the AFEC module */
	AFEC0->AFEC_CR = AFEC_CR_SWRST;
  4001ea:	4b13      	ldr	r3, [pc, #76]	; (400238 <afec0ch0_init+0x64>)
  4001ec:	2201      	movs	r2, #1
  4001ee:	601a      	str	r2, [r3, #0]
	
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f0:	0200      	lsls	r0, r0, #8
  4001f2:	b280      	uxth	r0, r0
	| AFEC_MR_ONE 
	| AFEC_MR_TRANSFER(0x02) 											// Set to 2 to optimize transfer time.
	| AFEC_MR_STARTUP_SUT64												// Start Up Time is 64 periods AFEC clock.
	| AFEC_MR_TRACKTIM(0xF);											// Inherent tracking time is always 15 AFE clock cycles. Do not modify this field.
  4001f4:	4911      	ldr	r1, [pc, #68]	; (40023c <afec0ch0_init+0x68>)
  4001f6:	4301      	orrs	r1, r0
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f8:	6059      	str	r1, [r3, #4]
	
	AFEC0->AFEC_EMR = AFEC_EMR_RES_NO_AVERAGE									// 12-bit resolution, AFE sample rate is maximum (no averaging).	
  4001fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4001fe:	6099      	str	r1, [r3, #8]
	| AFEC_EMR_STM														// Only a single trigger is required to get an averaged value.
	| AFEC_EMR_SIGNMODE_SE_UNSG_DF_SIGN;								// Single-Ended channels: unsigned conversions. Differential channels: signed conversions.
	
	AFEC0->AFEC_ACR = AFEC_ACR_IBCTL(0x03) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400200:	f44f 7143 	mov.w	r1, #780	; 0x30c
  400204:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	
	AFEC0->AFEC_MR |= AFEC_MR_FREERUN_ON;								
  400208:	6859      	ldr	r1, [r3, #4]
  40020a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40020e:	6059      	str	r1, [r3, #4]
	//AFEC0->AFEC_MR |= AFEC_MR_TRGEN;									// Enable Hardware Trigger
	/*
	 * The field AOFF must be configured to 512 (mid scale of the DAC) when there is no offset error to
	 * compensate.
	 */
	AFEC0->AFEC_CSELR = AFEC_CSELR_CSEL(AFEC0_CH0);
  400210:	2100      	movs	r1, #0
  400212:	6659      	str	r1, [r3, #100]	; 0x64
	AFEC0->AFEC_COCR = AFEC_COCR_AOFF(0x200);
  400214:	f44f 7100 	mov.w	r1, #512	; 0x200
  400218:	66d9      	str	r1, [r3, #108]	; 0x6c
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40021a:	4909      	ldr	r1, [pc, #36]	; (400240 <afec0ch0_init+0x6c>)
  40021c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  400220:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400224:	2420      	movs	r4, #32
  400226:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40022a:	6008      	str	r0, [r1, #0]
	/* Enable end of conversion interrupt for channel 0 */
	
	NVIC_ClearPendingIRQ(AFEC0_IRQn);
	NVIC_SetPriority(AFEC0_IRQn, 1);
	NVIC_EnableIRQ(AFEC0_IRQn);
	AFEC0->AFEC_IER = AFEC_IER_EOC0;
  40022c:	625a      	str	r2, [r3, #36]	; 0x24
	
	
	/* Enable Channel 0 for AFEC0 */
	AFEC0->AFEC_CHER = AFEC_CHER_CH0;
  40022e:	615a      	str	r2, [r3, #20]
}
  400230:	bc10      	pop	{r4}
  400232:	4770      	bx	lr
  400234:	400e0600 	.word	0x400e0600
  400238:	4003c000 	.word	0x4003c000
  40023c:	2f840000 	.word	0x2f840000
  400240:	e000e100 	.word	0xe000e100

00400244 <ioport_init>:


void ioport_init()
{
	/* Initialize IOPORTs */
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOA);
  400244:	4b45      	ldr	r3, [pc, #276]	; (40035c <ioport_init+0x118>)
  400246:	220a      	movs	r2, #10
  400248:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40024c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400250:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400254:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOB);
  400258:	220b      	movs	r2, #11
  40025a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40025e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400262:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400266:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOC);
  40026a:	220c      	movs	r2, #12
  40026c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400270:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400274:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400278:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOD);
  40027c:	2210      	movs	r2, #16
  40027e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400282:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400286:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40028a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOE);
  40028e:	2211      	movs	r2, #17
  400290:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400294:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400298:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40029c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	PIOC->PIO_OER |= PIO_PC8;
  4002a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  4002a4:	691a      	ldr	r2, [r3, #16]
  4002a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002aa:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC8;
  4002ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC8;
  4002b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002be:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_OER |= PIO_PC10;
  4002c0:	691a      	ldr	r2, [r3, #16]
  4002c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002c6:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC10;
  4002c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC10;
  4002d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002da:	635a      	str	r2, [r3, #52]	; 0x34

	

	
	/* Configure Push Button pins */
	PIOA->PIO_ODR |= PIO_PA11;
  4002dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4002e0:	695a      	ldr	r2, [r3, #20]
  4002e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002e6:	615a      	str	r2, [r3, #20]
	PIOA->PIO_OWER |= PIO_PA11;
  4002e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOA->PIO_PUER |= PIO_PA11;
  4002f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  4002f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002fa:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PPDDR |= PIO_PA11;
  4002fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  400300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	PIOA->PIO_MDDR |= PIO_PA11;
  400308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  40030a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40030e:	655a      	str	r2, [r3, #84]	; 0x54
	PIOA->PIO_IFER |= PIO_PA11;
  400310:	6a1a      	ldr	r2, [r3, #32]
  400312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400316:	621a      	str	r2, [r3, #32]
	PIOA->PIO_IFSCER |= PIO_PA11;
  400318:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  40031c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	PIOA->PIO_ABCDSR[0] &= ~(PIO_PA11);
  400324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40032a:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABCDSR[1] &= ~(PIO_PA11);
  40032c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40032e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400332:	675a      	str	r2, [r3, #116]	; 0x74
	PIOA->PIO_ESR |= PIO_PA11;
  400334:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  400338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40033c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_REHLSR |= PIO_PA11;
  400340:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  400344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400348:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	PIOA->PIO_AIMER |= PIO_PA11;
  40034c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  400350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400354:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400358:	4770      	bx	lr
  40035a:	bf00      	nop
  40035c:	400e0600 	.word	0x400e0600

00400360 <board_init>:
}

void board_init()
{
  400360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Disable Watchdog */
	WDT->WDT_MR |= WDT_MR_WDDIS;
  400362:	4a32      	ldr	r2, [pc, #200]	; (40042c <board_init+0xcc>)
  400364:	6853      	ldr	r3, [r2, #4]
  400366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40036a:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40036c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400370:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400374:	4b2e      	ldr	r3, [pc, #184]	; (400430 <board_init+0xd0>)
  400376:	2100      	movs	r1, #0
  400378:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  40037c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400380:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  400384:	695a      	ldr	r2, [r3, #20]
  400386:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40038a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  40038c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400390:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400394:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400398:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40039c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4003a0:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4003a4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  4003a8:	016e      	lsls	r6, r5, #5
  4003aa:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4003ae:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  4003b2:	461c      	mov	r4, r3
  4003b4:	ea06 000e 	and.w	r0, r6, lr
  4003b8:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4003ba:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4003bc:	ea42 0100 	orr.w	r1, r2, r0
  4003c0:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4003c4:	3b01      	subs	r3, #1
  4003c6:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4003ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4003ce:	d1f5      	bne.n	4003bc <board_init+0x5c>
    } while(sets-- != 0U);
  4003d0:	3d01      	subs	r5, #1
  4003d2:	3e20      	subs	r6, #32
  4003d4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4003d8:	d1ec      	bne.n	4003b4 <board_init+0x54>
  4003da:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4003de:	4b14      	ldr	r3, [pc, #80]	; (400430 <board_init+0xd0>)
  4003e0:	695a      	ldr	r2, [r3, #20]
  4003e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4003e6:	615a      	str	r2, [r3, #20]
  4003e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003ec:	f3bf 8f6f 	isb	sy
	/* Enabling the Cache */
	SCB_EnableICache();
	SCB_EnableDCache();
	
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003f0:	4a10      	ldr	r2, [pc, #64]	; (400434 <board_init+0xd4>)
  4003f2:	4911      	ldr	r1, [pc, #68]	; (400438 <board_init+0xd8>)
  4003f4:	6051      	str	r1, [r2, #4]
	| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003f6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4003fa:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  4003fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400400:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400404:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400408:	f022 0201 	bic.w	r2, r2, #1
  40040c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400410:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400414:	f022 0201 	bic.w	r2, r2, #1
  400418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40041c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400420:	f3bf 8f6f 	isb	sy
	| EEFC_FCR_FARG(7));
	
	tcm_disable();
	
	ioport_init();
  400424:	4b05      	ldr	r3, [pc, #20]	; (40043c <board_init+0xdc>)
  400426:	4798      	blx	r3
  400428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40042a:	bf00      	nop
  40042c:	400e1850 	.word	0x400e1850
  400430:	e000ed00 	.word	0xe000ed00
  400434:	400e0c00 	.word	0x400e0c00
  400438:	5a00080c 	.word	0x5a00080c
  40043c:	00400245 	.word	0x00400245

00400440 <dac0ch0init>:
#include "sam.h"

void dac0ch0init(void) 
{
	/* Enable DACC peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_DACC);
  400440:	4b16      	ldr	r3, [pc, #88]	; (40049c <dac0ch0init+0x5c>)
  400442:	221e      	movs	r2, #30
  400444:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400448:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40044c:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400450:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the DACC module */
	DACC->DACC_CR = DACC_CR_SWRST;
  400454:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <dac0ch0init+0x60>)
  400456:	2101      	movs	r1, #1
  400458:	6019      	str	r1, [r3, #0]
	
	DACC->DACC_WPMR |= DACC_WPMR_WPKEY_PASSWD;
  40045a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
  40045e:	4a11      	ldr	r2, [pc, #68]	; (4004a4 <dac0ch0init+0x64>)
  400460:	4302      	orrs	r2, r0
  400462:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC->DACC_WPMR |= (0x00 << 0);
  400466:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  40046a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	DACC->DACC_MR |= DACC_MR_PRESCALER(0xF)
  40046e:	685a      	ldr	r2, [r3, #4]
  400470:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
  400474:	605a      	str	r2, [r3, #4]
	| DACC_MR_WORD_DISABLED
	| DACC_MR_MAXS0_TRIG_EVENT 
	| DACC_MR_MAXS1_TRIG_EVENT;
	
	
	DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN0_DIS;
  400476:	689a      	ldr	r2, [r3, #8]
  400478:	609a      	str	r2, [r3, #8]
	
	DACC->DACC_ACR |= DACC_ACR_IBCTLCH0(3);
  40047a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  40047e:	f042 0203 	orr.w	r2, r2, #3
  400482:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	//NVIC_ClearPendingIRQ(DACC_IRQn);
	//NVIC_SetPriority(DACC_IRQn, 1);
	//NVIC_EnableIRQ(DACC_IRQn);
	
	uint32_t daccStatus = DACC->DACC_CHSR;
  400486:	699a      	ldr	r2, [r3, #24]
	
	DACC->DACC_CHER = DACC_CHER_CH0_Msk;
  400488:	6119      	str	r1, [r3, #16]
	
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  40048a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40048e:	d104      	bne.n	40049a <dac0ch0init+0x5a>
		daccStatus = DACC->DACC_CHSR;
  400490:	461a      	mov	r2, r3
  400492:	6993      	ldr	r3, [r2, #24]
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  400494:	f413 7f80 	tst.w	r3, #256	; 0x100
  400498:	d0fb      	beq.n	400492 <dac0ch0init+0x52>
  40049a:	4770      	bx	lr
  40049c:	400e0600 	.word	0x400e0600
  4004a0:	40040000 	.word	0x40040000
  4004a4:	44414300 	.word	0x44414300

004004a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004a8:	e7fe      	b.n	4004a8 <Dummy_Handler>
	...

004004ac <Reset_Handler>:
{
  4004ac:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4004ae:	4b17      	ldr	r3, [pc, #92]	; (40050c <Reset_Handler+0x60>)
  4004b0:	4a17      	ldr	r2, [pc, #92]	; (400510 <Reset_Handler+0x64>)
  4004b2:	429a      	cmp	r2, r3
  4004b4:	d010      	beq.n	4004d8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4004b6:	4b17      	ldr	r3, [pc, #92]	; (400514 <Reset_Handler+0x68>)
  4004b8:	4a14      	ldr	r2, [pc, #80]	; (40050c <Reset_Handler+0x60>)
  4004ba:	429a      	cmp	r2, r3
  4004bc:	d20c      	bcs.n	4004d8 <Reset_Handler+0x2c>
  4004be:	3b01      	subs	r3, #1
  4004c0:	1a9b      	subs	r3, r3, r2
  4004c2:	f023 0303 	bic.w	r3, r3, #3
  4004c6:	3304      	adds	r3, #4
  4004c8:	4413      	add	r3, r2
  4004ca:	4911      	ldr	r1, [pc, #68]	; (400510 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4004cc:	f851 0b04 	ldr.w	r0, [r1], #4
  4004d0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4004d4:	429a      	cmp	r2, r3
  4004d6:	d1f9      	bne.n	4004cc <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4004d8:	4b0f      	ldr	r3, [pc, #60]	; (400518 <Reset_Handler+0x6c>)
  4004da:	4a10      	ldr	r2, [pc, #64]	; (40051c <Reset_Handler+0x70>)
  4004dc:	429a      	cmp	r2, r3
  4004de:	d20a      	bcs.n	4004f6 <Reset_Handler+0x4a>
  4004e0:	3b01      	subs	r3, #1
  4004e2:	1a9b      	subs	r3, r3, r2
  4004e4:	f023 0303 	bic.w	r3, r3, #3
  4004e8:	3304      	adds	r3, #4
  4004ea:	4413      	add	r3, r2
                *pDest++ = 0;
  4004ec:	2100      	movs	r1, #0
  4004ee:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4004f2:	4293      	cmp	r3, r2
  4004f4:	d1fb      	bne.n	4004ee <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004f6:	4a0a      	ldr	r2, [pc, #40]	; (400520 <Reset_Handler+0x74>)
  4004f8:	4b0a      	ldr	r3, [pc, #40]	; (400524 <Reset_Handler+0x78>)
  4004fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004fe:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400500:	4b09      	ldr	r3, [pc, #36]	; (400528 <Reset_Handler+0x7c>)
  400502:	4798      	blx	r3
        main();
  400504:	4b09      	ldr	r3, [pc, #36]	; (40052c <Reset_Handler+0x80>)
  400506:	4798      	blx	r3
  400508:	e7fe      	b.n	400508 <Reset_Handler+0x5c>
  40050a:	bf00      	nop
  40050c:	20400000 	.word	0x20400000
  400510:	00400ac8 	.word	0x00400ac8
  400514:	20400434 	.word	0x20400434
  400518:	20400478 	.word	0x20400478
  40051c:	20400434 	.word	0x20400434
  400520:	e000ed00 	.word	0xe000ed00
  400524:	00400000 	.word	0x00400000
  400528:	00400931 	.word	0x00400931
  40052c:	00400541 	.word	0x00400541

00400530 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
  400530:	4a01      	ldr	r2, [pc, #4]	; (400538 <SystemInit+0x8>)
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <SystemInit+0xc>)
  400534:	601a      	str	r2, [r3, #0]
  400536:	4770      	bx	lr
  400538:	00b71b00 	.word	0x00b71b00
  40053c:	20400000 	.word	0x20400000

00400540 <main>:
static volatile uint32_t updated;

void fillFIFO(void);

int main(void)
{
  400540:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
  400542:	4b0c      	ldr	r3, [pc, #48]	; (400574 <main+0x34>)
  400544:	4798      	blx	r3
	sysclk_init();
  400546:	4b0c      	ldr	r3, [pc, #48]	; (400578 <main+0x38>)
  400548:	4798      	blx	r3
	board_init();
  40054a:	4b0c      	ldr	r3, [pc, #48]	; (40057c <main+0x3c>)
  40054c:	4798      	blx	r3
	afec0ch0_init(0x3);
  40054e:	2003      	movs	r0, #3
  400550:	4b0b      	ldr	r3, [pc, #44]	; (400580 <main+0x40>)
  400552:	4798      	blx	r3
	dac0ch0init();
  400554:	4b0b      	ldr	r3, [pc, #44]	; (400584 <main+0x44>)
  400556:	4798      	blx	r3
 * \brief Enable FPU
 */
static inline void fpu_enable(void)
{
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400558:	4a0b      	ldr	r2, [pc, #44]	; (400588 <main+0x48>)
  40055a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  40055e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400566:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40056a:	f3bf 8f6f 	isb	sy
	fpu_enable();
	
    /* Replace with your application code */
    while (1) 
    {
		asm volatile ("nop");
  40056e:	bf00      	nop
  400570:	e7fd      	b.n	40056e <main+0x2e>
  400572:	bf00      	nop
  400574:	00400531 	.word	0x00400531
  400578:	00400665 	.word	0x00400665
  40057c:	00400361 	.word	0x00400361
  400580:	004001d5 	.word	0x004001d5
  400584:	00400441 	.word	0x00400441
  400588:	e000ed00 	.word	0xe000ed00

0040058c <AFEC0_Handler>:
	}	
}
void AFEC0_Handler(void)
{
  40058c:	b508      	push	{r3, lr}
	uint32_t status = AFEC0->AFEC_ISR;
  40058e:	4b10      	ldr	r3, [pc, #64]	; (4005d0 <AFEC0_Handler+0x44>)
  400590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	
	if((status & AFEC_IMR_EOC0) == 1) {
  400592:	f013 0f01 	tst.w	r3, #1
  400596:	d016      	beq.n	4005c6 <AFEC0_Handler+0x3a>
	
		tmp = AFEC0->AFEC_CDR;
  400598:	4b0d      	ldr	r3, [pc, #52]	; (4005d0 <AFEC0_Handler+0x44>)
  40059a:	6e98      	ldr	r0, [r3, #104]	; 0x68
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <AFEC0_Handler+0x48>)
  40059e:	4798      	blx	r3
  4005a0:	4b0d      	ldr	r3, [pc, #52]	; (4005d8 <AFEC0_Handler+0x4c>)
  4005a2:	6018      	str	r0, [r3, #0]
		
		//tmp = firFilter((float)AFEC0->AFEC_CDR);
	
		if( ((((DACC->DACC_ISR) & DACC_ISR_TXRDY0_Msk)) == 1) && ((DACC -> DACC_CHSR) & (0x1u << 8)) == 256 ) 
  4005a4:	4b0d      	ldr	r3, [pc, #52]	; (4005dc <AFEC0_Handler+0x50>)
  4005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005a8:	f013 0f01 	tst.w	r3, #1
  4005ac:	d009      	beq.n	4005c2 <AFEC0_Handler+0x36>
  4005ae:	4b0b      	ldr	r3, [pc, #44]	; (4005dc <AFEC0_Handler+0x50>)
  4005b0:	699b      	ldr	r3, [r3, #24]
  4005b2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4005b6:	d004      	beq.n	4005c2 <AFEC0_Handler+0x36>
		{
			DACC->DACC_CDR[0] = DACC_CDR_DATA0((uint32_t)tmp);
  4005b8:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <AFEC0_Handler+0x54>)
  4005ba:	4798      	blx	r3
  4005bc:	b280      	uxth	r0, r0
  4005be:	4b07      	ldr	r3, [pc, #28]	; (4005dc <AFEC0_Handler+0x50>)
  4005c0:	61d8      	str	r0, [r3, #28]
			
		}
		
		if(((DACC->DACC_ISR) & (0x01)) == 0) 
  4005c2:	4b06      	ldr	r3, [pc, #24]	; (4005dc <AFEC0_Handler+0x50>)
  4005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		{
			
		}
		
	}
	AFEC0->AFEC_CR = AFEC_CR_START;
  4005c6:	2202      	movs	r2, #2
  4005c8:	4b01      	ldr	r3, [pc, #4]	; (4005d0 <AFEC0_Handler+0x44>)
  4005ca:	601a      	str	r2, [r3, #0]
  4005cc:	bd08      	pop	{r3, pc}
  4005ce:	bf00      	nop
  4005d0:	4003c000 	.word	0x4003c000
  4005d4:	00400841 	.word	0x00400841
  4005d8:	20400450 	.word	0x20400450
  4005dc:	40040000 	.word	0x40040000
  4005e0:	004008f1 	.word	0x004008f1

004005e4 <DACC_Handler>:
}

void DACC_Handler(void) {
  4005e4:	4770      	bx	lr
	...

004005e8 <mainclk_init>:
uint32_t mainclk_init()
{
	uint16_t tmp = 0;
	
	/* Enable Main XOSC */
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  4005e8:	4910      	ldr	r1, [pc, #64]	; (40062c <mainclk_init+0x44>)
  4005ea:	6a0b      	ldr	r3, [r1, #32]
	| CKGR_MOR_KEY_PASSWD
	| CKGR_MOR_MOSCXTEN
	| CKGR_MOR_MOSCXTST(XOSC12M_STARTUP_TIME);
  4005ec:	4a10      	ldr	r2, [pc, #64]	; (400630 <mainclk_init+0x48>)
  4005ee:	401a      	ands	r2, r3
  4005f0:	4b10      	ldr	r3, [pc, #64]	; (400634 <mainclk_init+0x4c>)
  4005f2:	4313      	orrs	r3, r2
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  4005f4:	620b      	str	r3, [r1, #32]
	
	/* wait for XOSC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005f6:	460a      	mov	r2, r1
  4005f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005fa:	f013 0f01 	tst.w	r3, #1
  4005fe:	d0fb      	beq.n	4005f8 <mainclk_init+0x10>
	
	/* Select XOSC as Main Clock */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD
  400600:	4a0a      	ldr	r2, [pc, #40]	; (40062c <mainclk_init+0x44>)
  400602:	6a11      	ldr	r1, [r2, #32]
  400604:	4b0c      	ldr	r3, [pc, #48]	; (400638 <mainclk_init+0x50>)
  400606:	430b      	orrs	r3, r1
  400608:	6213      	str	r3, [r2, #32]
	| CKGR_MOR_MOSCSEL;
	
	/* wait for Main Clock to be ready */
	while(!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40060a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40060c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400610:	d0fb      	beq.n	40060a <mainclk_init+0x22>

	/* Check if Main Clock frequency is correct */
	while(!(PMC->CKGR_MCFR & CKGR_MCFR_MAINFRDY));
  400612:	4a06      	ldr	r2, [pc, #24]	; (40062c <mainclk_init+0x44>)
  400614:	6a53      	ldr	r3, [r2, #36]	; 0x24
  400616:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40061a:	d0fb      	beq.n	400614 <mainclk_init+0x2c>
	tmp = (PMC->CKGR_MCFR & CKGR_MCFR_MAINF_Msk);
  40061c:	4b03      	ldr	r3, [pc, #12]	; (40062c <mainclk_init+0x44>)
  40061e:	6a58      	ldr	r0, [r3, #36]	; 0x24
	
	if(tmp == 0) return EXIT_FAILURE;
  400620:	b280      	uxth	r0, r0
	
	return EXIT_SUCCESS;
	
}
  400622:	fab0 f080 	clz	r0, r0
  400626:	0940      	lsrs	r0, r0, #5
  400628:	4770      	bx	lr
  40062a:	bf00      	nop
  40062c:	400e0600 	.word	0x400e0600
  400630:	ffc8c1fc 	.word	0xffc8c1fc
  400634:	00373e01 	.word	0x00373e01
  400638:	01370000 	.word	0x01370000

0040063c <pll_init>:

/* Enable the PLL (300 MHz) */
uint32_t pll_init()
{
	/* Stop PLL first */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  40063c:	4b08      	ldr	r3, [pc, #32]	; (400660 <pll_init+0x24>)
  40063e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400642:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_MULA(0);
	
	/* Configure and enable PLL */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  400644:	f502 12c1 	add.w	r2, r2, #1581056	; 0x182000
  400648:	f502 52f8 	add.w	r2, r2, #7936	; 0x1f00
  40064c:	3201      	adds	r2, #1
  40064e:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_DIVA_BYPASS
	| CKGR_PLLAR_MULA(((F_CPU / F_XOSC) - 1))
	| CKGR_PLLAR_PLLACOUNT(PLL_STARTUP_TIME);
	
	/* Wait for PLL lock */
	while(!(PMC->PMC_SR & PMC_SR_LOCKA));
  400650:	461a      	mov	r2, r3
  400652:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400654:	f013 0f02 	tst.w	r3, #2
  400658:	d0fb      	beq.n	400652 <pll_init+0x16>
	
	return EXIT_SUCCESS;
}
  40065a:	2000      	movs	r0, #0
  40065c:	4770      	bx	lr
  40065e:	bf00      	nop
  400660:	400e0600 	.word	0x400e0600

00400664 <sysclk_init>:

uint32_t sysclk_init()
{
  400664:	b508      	push	{r3, lr}
  400666:	4a15      	ldr	r2, [pc, #84]	; (4006bc <sysclk_init+0x58>)
  400668:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  40066c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400674:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400678:	f3bf 8f6f 	isb	sy
	fpu_enable();
	
	/* Set flash wait state */
	EFC->EEFC_FMR = EEFC_FMR_FWS(EFC_WAIT_STATE) 
  40067c:	4a10      	ldr	r2, [pc, #64]	; (4006c0 <sysclk_init+0x5c>)
  40067e:	4b11      	ldr	r3, [pc, #68]	; (4006c4 <sysclk_init+0x60>)
  400680:	601a      	str	r2, [r3, #0]
	| EEFC_FMR_CLOE;
			

	mainclk_init();
  400682:	4b11      	ldr	r3, [pc, #68]	; (4006c8 <sysclk_init+0x64>)
  400684:	4798      	blx	r3
	pll_init();
  400686:	4b11      	ldr	r3, [pc, #68]	; (4006cc <sysclk_init+0x68>)
  400688:	4798      	blx	r3

	
	/* Select Master Clock Div */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  40068a:	4a11      	ldr	r2, [pc, #68]	; (4006d0 <sysclk_init+0x6c>)
  40068c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40068e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	| PMC_MCKR_MDIV_PCK_DIV2;
  400692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  400696:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400698:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40069a:	f013 0f08 	tst.w	r3, #8
  40069e:	d0fb      	beq.n	400698 <sysclk_init+0x34>
	
	/* Select PLL as Master Clock Source */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  4006a0:	4a0b      	ldr	r2, [pc, #44]	; (4006d0 <sysclk_init+0x6c>)
  4006a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006a4:	f023 0303 	bic.w	r3, r3, #3
	| PMC_MCKR_CSS_PLLA_CLK;
  4006a8:	f043 0302 	orr.w	r3, r3, #2
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  4006ac:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4006ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006b0:	f013 0f08 	tst.w	r3, #8
  4006b4:	d0fb      	beq.n	4006ae <sysclk_init+0x4a>
	
	return EXIT_SUCCESS;
  4006b6:	2000      	movs	r0, #0
  4006b8:	bd08      	pop	{r3, pc}
  4006ba:	bf00      	nop
  4006bc:	e000ed00 	.word	0xe000ed00
  4006c0:	04000600 	.word	0x04000600
  4006c4:	400e0c00 	.word	0x400e0c00
  4006c8:	004005e9 	.word	0x004005e9
  4006cc:	0040063d 	.word	0x0040063d
  4006d0:	400e0600 	.word	0x400e0600

004006d4 <__aeabi_frsub>:
  4006d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4006d8:	e002      	b.n	4006e0 <__addsf3>
  4006da:	bf00      	nop

004006dc <__aeabi_fsub>:
  4006dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004006e0 <__addsf3>:
  4006e0:	0042      	lsls	r2, r0, #1
  4006e2:	bf1f      	itttt	ne
  4006e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4006e8:	ea92 0f03 	teqne	r2, r3
  4006ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4006f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4006f4:	d06a      	beq.n	4007cc <__addsf3+0xec>
  4006f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4006fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4006fe:	bfc1      	itttt	gt
  400700:	18d2      	addgt	r2, r2, r3
  400702:	4041      	eorgt	r1, r0
  400704:	4048      	eorgt	r0, r1
  400706:	4041      	eorgt	r1, r0
  400708:	bfb8      	it	lt
  40070a:	425b      	neglt	r3, r3
  40070c:	2b19      	cmp	r3, #25
  40070e:	bf88      	it	hi
  400710:	4770      	bxhi	lr
  400712:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  400716:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40071a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40071e:	bf18      	it	ne
  400720:	4240      	negne	r0, r0
  400722:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  400726:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40072a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40072e:	bf18      	it	ne
  400730:	4249      	negne	r1, r1
  400732:	ea92 0f03 	teq	r2, r3
  400736:	d03f      	beq.n	4007b8 <__addsf3+0xd8>
  400738:	f1a2 0201 	sub.w	r2, r2, #1
  40073c:	fa41 fc03 	asr.w	ip, r1, r3
  400740:	eb10 000c 	adds.w	r0, r0, ip
  400744:	f1c3 0320 	rsb	r3, r3, #32
  400748:	fa01 f103 	lsl.w	r1, r1, r3
  40074c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  400750:	d502      	bpl.n	400758 <__addsf3+0x78>
  400752:	4249      	negs	r1, r1
  400754:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  400758:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40075c:	d313      	bcc.n	400786 <__addsf3+0xa6>
  40075e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  400762:	d306      	bcc.n	400772 <__addsf3+0x92>
  400764:	0840      	lsrs	r0, r0, #1
  400766:	ea4f 0131 	mov.w	r1, r1, rrx
  40076a:	f102 0201 	add.w	r2, r2, #1
  40076e:	2afe      	cmp	r2, #254	; 0xfe
  400770:	d251      	bcs.n	400816 <__addsf3+0x136>
  400772:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  400776:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40077a:	bf08      	it	eq
  40077c:	f020 0001 	biceq.w	r0, r0, #1
  400780:	ea40 0003 	orr.w	r0, r0, r3
  400784:	4770      	bx	lr
  400786:	0049      	lsls	r1, r1, #1
  400788:	eb40 0000 	adc.w	r0, r0, r0
  40078c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  400790:	f1a2 0201 	sub.w	r2, r2, #1
  400794:	d1ed      	bne.n	400772 <__addsf3+0x92>
  400796:	fab0 fc80 	clz	ip, r0
  40079a:	f1ac 0c08 	sub.w	ip, ip, #8
  40079e:	ebb2 020c 	subs.w	r2, r2, ip
  4007a2:	fa00 f00c 	lsl.w	r0, r0, ip
  4007a6:	bfaa      	itet	ge
  4007a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4007ac:	4252      	neglt	r2, r2
  4007ae:	4318      	orrge	r0, r3
  4007b0:	bfbc      	itt	lt
  4007b2:	40d0      	lsrlt	r0, r2
  4007b4:	4318      	orrlt	r0, r3
  4007b6:	4770      	bx	lr
  4007b8:	f092 0f00 	teq	r2, #0
  4007bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4007c0:	bf06      	itte	eq
  4007c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4007c6:	3201      	addeq	r2, #1
  4007c8:	3b01      	subne	r3, #1
  4007ca:	e7b5      	b.n	400738 <__addsf3+0x58>
  4007cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4007d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4007d4:	bf18      	it	ne
  4007d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4007da:	d021      	beq.n	400820 <__addsf3+0x140>
  4007dc:	ea92 0f03 	teq	r2, r3
  4007e0:	d004      	beq.n	4007ec <__addsf3+0x10c>
  4007e2:	f092 0f00 	teq	r2, #0
  4007e6:	bf08      	it	eq
  4007e8:	4608      	moveq	r0, r1
  4007ea:	4770      	bx	lr
  4007ec:	ea90 0f01 	teq	r0, r1
  4007f0:	bf1c      	itt	ne
  4007f2:	2000      	movne	r0, #0
  4007f4:	4770      	bxne	lr
  4007f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4007fa:	d104      	bne.n	400806 <__addsf3+0x126>
  4007fc:	0040      	lsls	r0, r0, #1
  4007fe:	bf28      	it	cs
  400800:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  400804:	4770      	bx	lr
  400806:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40080a:	bf3c      	itt	cc
  40080c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  400810:	4770      	bxcc	lr
  400812:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  400816:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40081a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40081e:	4770      	bx	lr
  400820:	ea7f 6222 	mvns.w	r2, r2, asr #24
  400824:	bf16      	itet	ne
  400826:	4608      	movne	r0, r1
  400828:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40082c:	4601      	movne	r1, r0
  40082e:	0242      	lsls	r2, r0, #9
  400830:	bf06      	itte	eq
  400832:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  400836:	ea90 0f01 	teqeq	r0, r1
  40083a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40083e:	4770      	bx	lr

00400840 <__aeabi_ui2f>:
  400840:	f04f 0300 	mov.w	r3, #0
  400844:	e004      	b.n	400850 <__aeabi_i2f+0x8>
  400846:	bf00      	nop

00400848 <__aeabi_i2f>:
  400848:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40084c:	bf48      	it	mi
  40084e:	4240      	negmi	r0, r0
  400850:	ea5f 0c00 	movs.w	ip, r0
  400854:	bf08      	it	eq
  400856:	4770      	bxeq	lr
  400858:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40085c:	4601      	mov	r1, r0
  40085e:	f04f 0000 	mov.w	r0, #0
  400862:	e01c      	b.n	40089e <__aeabi_l2f+0x2a>

00400864 <__aeabi_ul2f>:
  400864:	ea50 0201 	orrs.w	r2, r0, r1
  400868:	bf08      	it	eq
  40086a:	4770      	bxeq	lr
  40086c:	f04f 0300 	mov.w	r3, #0
  400870:	e00a      	b.n	400888 <__aeabi_l2f+0x14>
  400872:	bf00      	nop

00400874 <__aeabi_l2f>:
  400874:	ea50 0201 	orrs.w	r2, r0, r1
  400878:	bf08      	it	eq
  40087a:	4770      	bxeq	lr
  40087c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  400880:	d502      	bpl.n	400888 <__aeabi_l2f+0x14>
  400882:	4240      	negs	r0, r0
  400884:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  400888:	ea5f 0c01 	movs.w	ip, r1
  40088c:	bf02      	ittt	eq
  40088e:	4684      	moveq	ip, r0
  400890:	4601      	moveq	r1, r0
  400892:	2000      	moveq	r0, #0
  400894:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  400898:	bf08      	it	eq
  40089a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40089e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4008a2:	fabc f28c 	clz	r2, ip
  4008a6:	3a08      	subs	r2, #8
  4008a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4008ac:	db10      	blt.n	4008d0 <__aeabi_l2f+0x5c>
  4008ae:	fa01 fc02 	lsl.w	ip, r1, r2
  4008b2:	4463      	add	r3, ip
  4008b4:	fa00 fc02 	lsl.w	ip, r0, r2
  4008b8:	f1c2 0220 	rsb	r2, r2, #32
  4008bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4008c0:	fa20 f202 	lsr.w	r2, r0, r2
  4008c4:	eb43 0002 	adc.w	r0, r3, r2
  4008c8:	bf08      	it	eq
  4008ca:	f020 0001 	biceq.w	r0, r0, #1
  4008ce:	4770      	bx	lr
  4008d0:	f102 0220 	add.w	r2, r2, #32
  4008d4:	fa01 fc02 	lsl.w	ip, r1, r2
  4008d8:	f1c2 0220 	rsb	r2, r2, #32
  4008dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4008e0:	fa21 f202 	lsr.w	r2, r1, r2
  4008e4:	eb43 0002 	adc.w	r0, r3, r2
  4008e8:	bf08      	it	eq
  4008ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4008ee:	4770      	bx	lr

004008f0 <__aeabi_f2uiz>:
  4008f0:	0042      	lsls	r2, r0, #1
  4008f2:	d20e      	bcs.n	400912 <__aeabi_f2uiz+0x22>
  4008f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  4008f8:	d30b      	bcc.n	400912 <__aeabi_f2uiz+0x22>
  4008fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
  4008fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  400902:	d409      	bmi.n	400918 <__aeabi_f2uiz+0x28>
  400904:	ea4f 2300 	mov.w	r3, r0, lsl #8
  400908:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40090c:	fa23 f002 	lsr.w	r0, r3, r2
  400910:	4770      	bx	lr
  400912:	f04f 0000 	mov.w	r0, #0
  400916:	4770      	bx	lr
  400918:	f112 0f61 	cmn.w	r2, #97	; 0x61
  40091c:	d101      	bne.n	400922 <__aeabi_f2uiz+0x32>
  40091e:	0242      	lsls	r2, r0, #9
  400920:	d102      	bne.n	400928 <__aeabi_f2uiz+0x38>
  400922:	f04f 30ff 	mov.w	r0, #4294967295
  400926:	4770      	bx	lr
  400928:	f04f 0000 	mov.w	r0, #0
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop

00400930 <__libc_init_array>:
  400930:	b570      	push	{r4, r5, r6, lr}
  400932:	4e0f      	ldr	r6, [pc, #60]	; (400970 <__libc_init_array+0x40>)
  400934:	4d0f      	ldr	r5, [pc, #60]	; (400974 <__libc_init_array+0x44>)
  400936:	1b76      	subs	r6, r6, r5
  400938:	10b6      	asrs	r6, r6, #2
  40093a:	bf18      	it	ne
  40093c:	2400      	movne	r4, #0
  40093e:	d005      	beq.n	40094c <__libc_init_array+0x1c>
  400940:	3401      	adds	r4, #1
  400942:	f855 3b04 	ldr.w	r3, [r5], #4
  400946:	4798      	blx	r3
  400948:	42a6      	cmp	r6, r4
  40094a:	d1f9      	bne.n	400940 <__libc_init_array+0x10>
  40094c:	4e0a      	ldr	r6, [pc, #40]	; (400978 <__libc_init_array+0x48>)
  40094e:	4d0b      	ldr	r5, [pc, #44]	; (40097c <__libc_init_array+0x4c>)
  400950:	1b76      	subs	r6, r6, r5
  400952:	f000 f8a7 	bl	400aa4 <_init>
  400956:	10b6      	asrs	r6, r6, #2
  400958:	bf18      	it	ne
  40095a:	2400      	movne	r4, #0
  40095c:	d006      	beq.n	40096c <__libc_init_array+0x3c>
  40095e:	3401      	adds	r4, #1
  400960:	f855 3b04 	ldr.w	r3, [r5], #4
  400964:	4798      	blx	r3
  400966:	42a6      	cmp	r6, r4
  400968:	d1f9      	bne.n	40095e <__libc_init_array+0x2e>
  40096a:	bd70      	pop	{r4, r5, r6, pc}
  40096c:	bd70      	pop	{r4, r5, r6, pc}
  40096e:	bf00      	nop
  400970:	00400ab0 	.word	0x00400ab0
  400974:	00400ab0 	.word	0x00400ab0
  400978:	00400ab8 	.word	0x00400ab8
  40097c:	00400ab0 	.word	0x00400ab0

00400980 <register_fini>:
  400980:	4b02      	ldr	r3, [pc, #8]	; (40098c <register_fini+0xc>)
  400982:	b113      	cbz	r3, 40098a <register_fini+0xa>
  400984:	4802      	ldr	r0, [pc, #8]	; (400990 <register_fini+0x10>)
  400986:	f000 b805 	b.w	400994 <atexit>
  40098a:	4770      	bx	lr
  40098c:	00000000 	.word	0x00000000
  400990:	004009a1 	.word	0x004009a1

00400994 <atexit>:
  400994:	2300      	movs	r3, #0
  400996:	4601      	mov	r1, r0
  400998:	461a      	mov	r2, r3
  40099a:	4618      	mov	r0, r3
  40099c:	f000 b81e 	b.w	4009dc <__register_exitproc>

004009a0 <__libc_fini_array>:
  4009a0:	b538      	push	{r3, r4, r5, lr}
  4009a2:	4c0a      	ldr	r4, [pc, #40]	; (4009cc <__libc_fini_array+0x2c>)
  4009a4:	4d0a      	ldr	r5, [pc, #40]	; (4009d0 <__libc_fini_array+0x30>)
  4009a6:	1b64      	subs	r4, r4, r5
  4009a8:	10a4      	asrs	r4, r4, #2
  4009aa:	d00a      	beq.n	4009c2 <__libc_fini_array+0x22>
  4009ac:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4009b0:	3b01      	subs	r3, #1
  4009b2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4009b6:	3c01      	subs	r4, #1
  4009b8:	f855 3904 	ldr.w	r3, [r5], #-4
  4009bc:	4798      	blx	r3
  4009be:	2c00      	cmp	r4, #0
  4009c0:	d1f9      	bne.n	4009b6 <__libc_fini_array+0x16>
  4009c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4009c6:	f000 b877 	b.w	400ab8 <_fini>
  4009ca:	bf00      	nop
  4009cc:	00400ac8 	.word	0x00400ac8
  4009d0:	00400ac4 	.word	0x00400ac4

004009d4 <__retarget_lock_acquire_recursive>:
  4009d4:	4770      	bx	lr
  4009d6:	bf00      	nop

004009d8 <__retarget_lock_release_recursive>:
  4009d8:	4770      	bx	lr
  4009da:	bf00      	nop

004009dc <__register_exitproc>:
  4009dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4009e0:	4d2c      	ldr	r5, [pc, #176]	; (400a94 <__register_exitproc+0xb8>)
  4009e2:	4606      	mov	r6, r0
  4009e4:	6828      	ldr	r0, [r5, #0]
  4009e6:	4698      	mov	r8, r3
  4009e8:	460f      	mov	r7, r1
  4009ea:	4691      	mov	r9, r2
  4009ec:	f7ff fff2 	bl	4009d4 <__retarget_lock_acquire_recursive>
  4009f0:	4b29      	ldr	r3, [pc, #164]	; (400a98 <__register_exitproc+0xbc>)
  4009f2:	681c      	ldr	r4, [r3, #0]
  4009f4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4009f8:	2b00      	cmp	r3, #0
  4009fa:	d03e      	beq.n	400a7a <__register_exitproc+0x9e>
  4009fc:	685a      	ldr	r2, [r3, #4]
  4009fe:	2a1f      	cmp	r2, #31
  400a00:	dc1c      	bgt.n	400a3c <__register_exitproc+0x60>
  400a02:	f102 0e01 	add.w	lr, r2, #1
  400a06:	b176      	cbz	r6, 400a26 <__register_exitproc+0x4a>
  400a08:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400a0c:	2401      	movs	r4, #1
  400a0e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400a12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400a16:	4094      	lsls	r4, r2
  400a18:	4320      	orrs	r0, r4
  400a1a:	2e02      	cmp	r6, #2
  400a1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400a20:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400a24:	d023      	beq.n	400a6e <__register_exitproc+0x92>
  400a26:	3202      	adds	r2, #2
  400a28:	f8c3 e004 	str.w	lr, [r3, #4]
  400a2c:	6828      	ldr	r0, [r5, #0]
  400a2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400a32:	f7ff ffd1 	bl	4009d8 <__retarget_lock_release_recursive>
  400a36:	2000      	movs	r0, #0
  400a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a3c:	4b17      	ldr	r3, [pc, #92]	; (400a9c <__register_exitproc+0xc0>)
  400a3e:	b30b      	cbz	r3, 400a84 <__register_exitproc+0xa8>
  400a40:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400a44:	f3af 8000 	nop.w
  400a48:	4603      	mov	r3, r0
  400a4a:	b1d8      	cbz	r0, 400a84 <__register_exitproc+0xa8>
  400a4c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400a50:	6002      	str	r2, [r0, #0]
  400a52:	2100      	movs	r1, #0
  400a54:	6041      	str	r1, [r0, #4]
  400a56:	460a      	mov	r2, r1
  400a58:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400a5c:	f04f 0e01 	mov.w	lr, #1
  400a60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400a64:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400a68:	2e00      	cmp	r6, #0
  400a6a:	d0dc      	beq.n	400a26 <__register_exitproc+0x4a>
  400a6c:	e7cc      	b.n	400a08 <__register_exitproc+0x2c>
  400a6e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400a72:	430c      	orrs	r4, r1
  400a74:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400a78:	e7d5      	b.n	400a26 <__register_exitproc+0x4a>
  400a7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400a7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400a82:	e7bb      	b.n	4009fc <__register_exitproc+0x20>
  400a84:	6828      	ldr	r0, [r5, #0]
  400a86:	f7ff ffa7 	bl	4009d8 <__retarget_lock_release_recursive>
  400a8a:	f04f 30ff 	mov.w	r0, #4294967295
  400a8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400a92:	bf00      	nop
  400a94:	20400430 	.word	0x20400430
  400a98:	00400aa0 	.word	0x00400aa0
  400a9c:	00000000 	.word	0x00000000

00400aa0 <_global_impure_ptr>:
  400aa0:	20400008                                ..@ 

00400aa4 <_init>:
  400aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aa6:	bf00      	nop
  400aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400aaa:	bc08      	pop	{r3}
  400aac:	469e      	mov	lr, r3
  400aae:	4770      	bx	lr

00400ab0 <__init_array_start>:
  400ab0:	00400981 	.word	0x00400981

00400ab4 <__frame_dummy_init_array_entry>:
  400ab4:	0040018d                                ..@.

00400ab8 <_fini>:
  400ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aba:	bf00      	nop
  400abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400abe:	bc08      	pop	{r3}
  400ac0:	469e      	mov	lr, r3
  400ac2:	4770      	bx	lr

00400ac4 <__fini_array_start>:
  400ac4:	00400169 	.word	0x00400169
