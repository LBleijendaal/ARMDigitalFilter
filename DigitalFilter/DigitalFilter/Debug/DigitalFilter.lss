
DigitalFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000868  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  00400868  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  20400434  00400c9c  00020434  2**2
                  ALLOC
  3 .heap         00000200  20400480  00400ce8  00020434  2**0
                  ALLOC
  4 .stack        00000400  20400680  00400ee8  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00007023  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cd7  00000000  00000000  000274da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000262  00000000  00000000  000281b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000118  00000000  00000000  00028413  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0002852b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036af3  00000000  00000000  000285d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004354  00000000  00000000  0005f0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00131535  00000000  00000000  0006341a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000350  00000000  00000000  00194950  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	80 0a 40 20 bd 04 40 00 b9 04 40 00 b9 04 40 00     ..@ ..@...@...@.
  400010:	b9 04 40 00 b9 04 40 00 b9 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 04 40 00 b9 04 40 00 00 00 00 00 b9 04 40 00     ..@...@.......@.
  40003c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40004c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40005c:	b9 04 40 00 b9 04 40 00 00 00 00 00 b9 04 40 00     ..@...@.......@.
  40006c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40007c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40008c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40009c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000ac:	b9 04 40 00 b9 04 40 00 81 05 40 00 e1 05 40 00     ..@...@...@...@.
  4000bc:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000cc:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000dc:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000ec:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  4000fc:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40010c:	b9 04 40 00 b9 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ......@...@...@.
  40012c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40013c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40014c:	b9 04 40 00 b9 04 40 00 b9 04 40 00 b9 04 40 00     ..@...@...@...@.
  40015c:	b9 04 40 00 b9 04 40 00 b9 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400434 	.word	0x20400434
  400184:	00000000 	.word	0x00000000
  400188:	00400868 	.word	0x00400868

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00400868 	.word	0x00400868
  4001c8:	20400438 	.word	0x20400438
  4001cc:	00400868 	.word	0x00400868
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec0ch0_init>:
#include "afec.h"
#include <stdlib.h>


void afec0ch0_init(uint32_t prescaler)
{
  4001d4:	b410      	push	{r4}
	/* Enable AFEC0 peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_AFEC0);
  4001d6:	4b17      	ldr	r3, [pc, #92]	; (400234 <afec0ch0_init+0x60>)
  4001d8:	221d      	movs	r2, #29
  4001da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4001de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4001e2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4001e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the AFEC module */
	AFEC0->AFEC_CR = AFEC_CR_SWRST;
  4001ea:	4b13      	ldr	r3, [pc, #76]	; (400238 <afec0ch0_init+0x64>)
  4001ec:	2201      	movs	r2, #1
  4001ee:	601a      	str	r2, [r3, #0]
	
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f0:	0200      	lsls	r0, r0, #8
  4001f2:	b280      	uxth	r0, r0
	| AFEC_MR_ONE 
	| AFEC_MR_TRANSFER(0x02) 											// Set to 2 to optimize transfer time.
	| AFEC_MR_STARTUP_SUT64												// Start Up Time is 64 periods AFEC clock.
	| AFEC_MR_TRACKTIM(0xF);											// Inherent tracking time is always 15 AFE clock cycles. Do not modify this field.
  4001f4:	4911      	ldr	r1, [pc, #68]	; (40023c <afec0ch0_init+0x68>)
  4001f6:	4301      	orrs	r1, r0
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f8:	6059      	str	r1, [r3, #4]
	
	AFEC0->AFEC_EMR = AFEC_EMR_RES_NO_AVERAGE									// 12-bit resolution, AFE sample rate is maximum (no averaging).	
  4001fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4001fe:	6099      	str	r1, [r3, #8]
	| AFEC_EMR_STM														// Only a single trigger is required to get an averaged value.
	| AFEC_EMR_SIGNMODE_SE_UNSG_DF_SIGN;								// Single-Ended channels: unsigned conversions. Differential channels: signed conversions.
	
	AFEC0->AFEC_ACR = AFEC_ACR_IBCTL(0x03) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400200:	f44f 7143 	mov.w	r1, #780	; 0x30c
  400204:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	
	AFEC0->AFEC_MR |= AFEC_MR_FREERUN_ON;								// Trigger TIOA Output of the Timer Counter Channel 0 for AFEC0
  400208:	6859      	ldr	r1, [r3, #4]
  40020a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40020e:	6059      	str	r1, [r3, #4]
	//AFEC0->AFEC_MR |= AFEC_MR_TRGEN;											// Enable Hardware Trigger
	/*
	 * The field AOFF must be configured to 512 (mid scale of the DAC) when there is no offset error to
	 * compensate.
	 */
	AFEC0->AFEC_CSELR = AFEC_CSELR_CSEL(AFEC0_CH0);
  400210:	2100      	movs	r1, #0
  400212:	6659      	str	r1, [r3, #100]	; 0x64
	AFEC0->AFEC_COCR = AFEC_COCR_AOFF(0x200);
  400214:	f44f 7100 	mov.w	r1, #512	; 0x200
  400218:	66d9      	str	r1, [r3, #108]	; 0x6c
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40021a:	4909      	ldr	r1, [pc, #36]	; (400240 <afec0ch0_init+0x6c>)
  40021c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  400220:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400224:	2420      	movs	r4, #32
  400226:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40022a:	6008      	str	r0, [r1, #0]
	/* Enable end of conversion interrupt for channel 0 */
	
	NVIC_ClearPendingIRQ(AFEC0_IRQn);
	NVIC_SetPriority(AFEC0_IRQn, 1);
	NVIC_EnableIRQ(AFEC0_IRQn);
	AFEC0->AFEC_IER = AFEC_IER_EOC0;
  40022c:	625a      	str	r2, [r3, #36]	; 0x24
	
	
	/* Enable Channel 0 for AFEC0 */
	AFEC0->AFEC_CHER = AFEC_CHER_CH0;
  40022e:	615a      	str	r2, [r3, #20]
  400230:	bc10      	pop	{r4}
  400232:	4770      	bx	lr
  400234:	400e0600 	.word	0x400e0600
  400238:	4003c000 	.word	0x4003c000
  40023c:	2f840000 	.word	0x2f840000
  400240:	e000e100 	.word	0xe000e100

00400244 <ioport_init>:


void ioport_init()
{
	/* Initialize IOPORTs */
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOA);
  400244:	4b3e      	ldr	r3, [pc, #248]	; (400340 <ioport_init+0xfc>)
  400246:	220a      	movs	r2, #10
  400248:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40024c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400250:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400254:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOB);
  400258:	220b      	movs	r2, #11
  40025a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40025e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400262:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400266:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOC);
  40026a:	220c      	movs	r2, #12
  40026c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400270:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400274:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400278:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOD);
  40027c:	2210      	movs	r2, #16
  40027e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400282:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400286:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40028a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOE);
  40028e:	2211      	movs	r2, #17
  400290:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400294:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400298:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40029c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	PIOC->PIO_OER |= PIO_PC8;
  4002a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  4002a4:	691a      	ldr	r2, [r3, #16]
  4002a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002aa:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC8;
  4002ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC8;
  4002b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002be:	635a      	str	r2, [r3, #52]	; 0x34

	

	
	/* Configure Push Button pins */
	PIOA->PIO_ODR |= PIO_PA11;
  4002c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4002c4:	695a      	ldr	r2, [r3, #20]
  4002c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002ca:	615a      	str	r2, [r3, #20]
	PIOA->PIO_OWER |= PIO_PA11;
  4002cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOA->PIO_PUER |= PIO_PA11;
  4002d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  4002da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002de:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PPDDR |= PIO_PA11;
  4002e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  4002e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	PIOA->PIO_MDDR |= PIO_PA11;
  4002ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  4002ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002f2:	655a      	str	r2, [r3, #84]	; 0x54
	PIOA->PIO_IFER |= PIO_PA11;
  4002f4:	6a1a      	ldr	r2, [r3, #32]
  4002f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002fa:	621a      	str	r2, [r3, #32]
	PIOA->PIO_IFSCER |= PIO_PA11;
  4002fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  400300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	PIOA->PIO_ABCDSR[0] &= ~(PIO_PA11);
  400308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40030a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40030e:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABCDSR[1] &= ~(PIO_PA11);
  400310:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400316:	675a      	str	r2, [r3, #116]	; 0x74
	PIOA->PIO_ESR |= PIO_PA11;
  400318:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  40031c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400320:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_REHLSR |= PIO_PA11;
  400324:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  400328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40032c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	PIOA->PIO_AIMER |= PIO_PA11;
  400330:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  400334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400338:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  40033c:	4770      	bx	lr
  40033e:	bf00      	nop
  400340:	400e0600 	.word	0x400e0600

00400344 <board_init>:
}

void board_init()
{
  400344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Disable Watchdog */
	WDT->WDT_MR |= WDT_MR_WDDIS;
  400346:	4a32      	ldr	r2, [pc, #200]	; (400410 <board_init+0xcc>)
  400348:	6853      	ldr	r3, [r2, #4]
  40034a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40034e:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400354:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400358:	4b2e      	ldr	r3, [pc, #184]	; (400414 <board_init+0xd0>)
  40035a:	2100      	movs	r1, #0
  40035c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  400360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400364:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  400368:	695a      	ldr	r2, [r3, #20]
  40036a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40036e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400370:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400374:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400378:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  40037c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400380:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400384:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400388:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  40038c:	016e      	lsls	r6, r5, #5
  40038e:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400392:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400396:	461c      	mov	r4, r3
  400398:	ea06 000e 	and.w	r0, r6, lr
  40039c:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  40039e:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4003a0:	ea42 0100 	orr.w	r1, r2, r0
  4003a4:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4003a8:	3b01      	subs	r3, #1
  4003aa:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4003ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4003b2:	d1f5      	bne.n	4003a0 <board_init+0x5c>
    } while(sets-- != 0U);
  4003b4:	3d01      	subs	r5, #1
  4003b6:	3e20      	subs	r6, #32
  4003b8:	f1b5 3fff 	cmp.w	r5, #4294967295
  4003bc:	d1ec      	bne.n	400398 <board_init+0x54>
  4003be:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4003c2:	4b14      	ldr	r3, [pc, #80]	; (400414 <board_init+0xd0>)
  4003c4:	695a      	ldr	r2, [r3, #20]
  4003c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4003ca:	615a      	str	r2, [r3, #20]
  4003cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003d0:	f3bf 8f6f 	isb	sy
	/* Enabling the Cache */
	SCB_EnableICache();
	SCB_EnableDCache();
	
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003d4:	4a10      	ldr	r2, [pc, #64]	; (400418 <board_init+0xd4>)
  4003d6:	4911      	ldr	r1, [pc, #68]	; (40041c <board_init+0xd8>)
  4003d8:	6051      	str	r1, [r2, #4]
	| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003da:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4003de:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  4003e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003e4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4003e8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4003ec:	f022 0201 	bic.w	r2, r2, #1
  4003f0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4003f4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4003f8:	f022 0201 	bic.w	r2, r2, #1
  4003fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400400:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400404:	f3bf 8f6f 	isb	sy
	| EEFC_FCR_FARG(7));
	
	tcm_disable();
	
	ioport_init();
  400408:	4b05      	ldr	r3, [pc, #20]	; (400420 <board_init+0xdc>)
  40040a:	4798      	blx	r3
  40040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40040e:	bf00      	nop
  400410:	400e1850 	.word	0x400e1850
  400414:	e000ed00 	.word	0xe000ed00
  400418:	400e0c00 	.word	0x400e0c00
  40041c:	5a00080c 	.word	0x5a00080c
  400420:	00400245 	.word	0x00400245

00400424 <dac0ch0init>:
	
	DACC -> DACC_CDR[0] = 0x0000;
}
*/
void dac0ch0init(void) 
{
  400424:	b410      	push	{r4}
	/* Enable DACC peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_DACC);
  400426:	4b20      	ldr	r3, [pc, #128]	; (4004a8 <dac0ch0init+0x84>)
  400428:	221e      	movs	r2, #30
  40042a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40042e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400432:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400436:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the DACC module */
	DACC->DACC_CR = DACC_CR_SWRST;
  40043a:	4b1c      	ldr	r3, [pc, #112]	; (4004ac <dac0ch0init+0x88>)
  40043c:	2101      	movs	r1, #1
  40043e:	6019      	str	r1, [r3, #0]
	
	DACC->DACC_WPMR |= DACC_WPMR_WPKEY_PASSWD;
  400440:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
  400444:	4a1a      	ldr	r2, [pc, #104]	; (4004b0 <dac0ch0init+0x8c>)
  400446:	4302      	orrs	r2, r0
  400448:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC->DACC_WPMR |= (0x00 << 0);
  40044c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  400450:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	DACC->DACC_MR |= DACC_MR_PRESCALER(0x4)
  400454:	685a      	ldr	r2, [r3, #4]
  400456:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  40045a:	605a      	str	r2, [r3, #4]
	//DACC->DACC_TRIGR |= DACC_TRIGR_OSR1(0x0);
	
	//DACC->DACC_TRIGR |= DACC_TRIGR_TRGSEL0_TRGSEL0;
	//DACC->DACC_TRIGR |= DACC_TRIGR_TRGSEL1_TRGSEL0;
	
	DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN0_DIS;
  40045c:	689a      	ldr	r2, [r3, #8]
  40045e:	609a      	str	r2, [r3, #8]
	DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN1_DIS;
  400460:	689a      	ldr	r2, [r3, #8]
  400462:	609a      	str	r2, [r3, #8]
	//DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN1_DIS;
	DACC->DACC_ACR |= DACC_ACR_IBCTLCH0(3);
  400464:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  400468:	f042 0203 	orr.w	r2, r2, #3
  40046c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400470:	4a10      	ldr	r2, [pc, #64]	; (4004b4 <dac0ch0init+0x90>)
  400472:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400476:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40047a:	2420      	movs	r4, #32
  40047c:	f882 431e 	strb.w	r4, [r2, #798]	; 0x31e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400480:	6010      	str	r0, [r2, #0]
	NVIC_SetPriority(DACC_IRQn, 1);
	NVIC_EnableIRQ(DACC_IRQn);
	
	
	
	uint32_t daccStatus = DACC->DACC_CHSR;
  400482:	699a      	ldr	r2, [r3, #24]
	
	DACC->DACC_CHER = DACC_CHER_CH0_Msk;
  400484:	6119      	str	r1, [r3, #16]
	DACC->DACC_CHER = DACC_CHER_CH1_Msk;
  400486:	2102      	movs	r1, #2
  400488:	6119      	str	r1, [r3, #16]
	
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  40048a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40048e:	d104      	bne.n	40049a <dac0ch0init+0x76>
		daccStatus = DACC->DACC_CHSR;
  400490:	461a      	mov	r2, r3
  400492:	6993      	ldr	r3, [r2, #24]
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  400494:	f413 7f80 	tst.w	r3, #256	; 0x100
  400498:	d0fb      	beq.n	400492 <dac0ch0init+0x6e>
	}
	
	//DACC->DACC_CDR[0] = (0x0011 << 0x00);        
	
	DACC->DACC_IER |= DACC_IER_TXRDY0_Msk | DACC_IER_EOC0_Msk; 	
  40049a:	4a04      	ldr	r2, [pc, #16]	; (4004ac <dac0ch0init+0x88>)
  40049c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40049e:	f043 0311 	orr.w	r3, r3, #17
  4004a2:	6253      	str	r3, [r2, #36]	; 0x24
	
	
  4004a4:	bc10      	pop	{r4}
  4004a6:	4770      	bx	lr
  4004a8:	400e0600 	.word	0x400e0600
  4004ac:	40040000 	.word	0x40040000
  4004b0:	44414300 	.word	0x44414300
  4004b4:	e000e100 	.word	0xe000e100

004004b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004b8:	e7fe      	b.n	4004b8 <Dummy_Handler>
	...

004004bc <Reset_Handler>:
{
  4004bc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4004be:	4b17      	ldr	r3, [pc, #92]	; (40051c <Reset_Handler+0x60>)
  4004c0:	4a17      	ldr	r2, [pc, #92]	; (400520 <Reset_Handler+0x64>)
  4004c2:	429a      	cmp	r2, r3
  4004c4:	d010      	beq.n	4004e8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4004c6:	4b17      	ldr	r3, [pc, #92]	; (400524 <Reset_Handler+0x68>)
  4004c8:	4a14      	ldr	r2, [pc, #80]	; (40051c <Reset_Handler+0x60>)
  4004ca:	429a      	cmp	r2, r3
  4004cc:	d20c      	bcs.n	4004e8 <Reset_Handler+0x2c>
  4004ce:	3b01      	subs	r3, #1
  4004d0:	1a9b      	subs	r3, r3, r2
  4004d2:	f023 0303 	bic.w	r3, r3, #3
  4004d6:	3304      	adds	r3, #4
  4004d8:	4413      	add	r3, r2
  4004da:	4911      	ldr	r1, [pc, #68]	; (400520 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4004dc:	f851 0b04 	ldr.w	r0, [r1], #4
  4004e0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4004e4:	429a      	cmp	r2, r3
  4004e6:	d1f9      	bne.n	4004dc <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4004e8:	4b0f      	ldr	r3, [pc, #60]	; (400528 <Reset_Handler+0x6c>)
  4004ea:	4a10      	ldr	r2, [pc, #64]	; (40052c <Reset_Handler+0x70>)
  4004ec:	429a      	cmp	r2, r3
  4004ee:	d20a      	bcs.n	400506 <Reset_Handler+0x4a>
  4004f0:	3b01      	subs	r3, #1
  4004f2:	1a9b      	subs	r3, r3, r2
  4004f4:	f023 0303 	bic.w	r3, r3, #3
  4004f8:	3304      	adds	r3, #4
  4004fa:	4413      	add	r3, r2
                *pDest++ = 0;
  4004fc:	2100      	movs	r1, #0
  4004fe:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400502:	4293      	cmp	r3, r2
  400504:	d1fb      	bne.n	4004fe <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400506:	4a0a      	ldr	r2, [pc, #40]	; (400530 <Reset_Handler+0x74>)
  400508:	4b0a      	ldr	r3, [pc, #40]	; (400534 <Reset_Handler+0x78>)
  40050a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40050e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400510:	4b09      	ldr	r3, [pc, #36]	; (400538 <Reset_Handler+0x7c>)
  400512:	4798      	blx	r3
        main();
  400514:	4b09      	ldr	r3, [pc, #36]	; (40053c <Reset_Handler+0x80>)
  400516:	4798      	blx	r3
  400518:	e7fe      	b.n	400518 <Reset_Handler+0x5c>
  40051a:	bf00      	nop
  40051c:	20400000 	.word	0x20400000
  400520:	00400868 	.word	0x00400868
  400524:	20400434 	.word	0x20400434
  400528:	20400480 	.word	0x20400480
  40052c:	20400434 	.word	0x20400434
  400530:	e000ed00 	.word	0xe000ed00
  400534:	00400000 	.word	0x00400000
  400538:	004006d1 	.word	0x004006d1
  40053c:	00400551 	.word	0x00400551

00400540 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
  400540:	4a01      	ldr	r2, [pc, #4]	; (400548 <SystemInit+0x8>)
  400542:	4b02      	ldr	r3, [pc, #8]	; (40054c <SystemInit+0xc>)
  400544:	601a      	str	r2, [r3, #0]
  400546:	4770      	bx	lr
  400548:	00b71b00 	.word	0x00b71b00
  40054c:	20400000 	.word	0x20400000

00400550 <main>:
static volatile uint32_t updated;

void fillFIFO(void);

int main(void)
{
  400550:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
  400552:	4b06      	ldr	r3, [pc, #24]	; (40056c <main+0x1c>)
  400554:	4798      	blx	r3
	sysclk_init();
  400556:	4b06      	ldr	r3, [pc, #24]	; (400570 <main+0x20>)
  400558:	4798      	blx	r3
	board_init();
  40055a:	4b06      	ldr	r3, [pc, #24]	; (400574 <main+0x24>)
  40055c:	4798      	blx	r3
	afec0ch0_init(0x3);
  40055e:	2003      	movs	r0, #3
  400560:	4b05      	ldr	r3, [pc, #20]	; (400578 <main+0x28>)
  400562:	4798      	blx	r3
	dac0ch0init();
  400564:	4b05      	ldr	r3, [pc, #20]	; (40057c <main+0x2c>)
  400566:	4798      	blx	r3
  400568:	e7fe      	b.n	400568 <main+0x18>
  40056a:	bf00      	nop
  40056c:	00400541 	.word	0x00400541
  400570:	00400661 	.word	0x00400661
  400574:	00400345 	.word	0x00400345
  400578:	004001d5 	.word	0x004001d5
  40057c:	00400425 	.word	0x00400425

00400580 <AFEC0_Handler>:
		
	}	
}
void AFEC0_Handler(void)
{
	PIOC->PIO_SODR |= PIO_PC8;
  400580:	4a12      	ldr	r2, [pc, #72]	; (4005cc <AFEC0_Handler+0x4c>)
  400582:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400588:	6313      	str	r3, [r2, #48]	; 0x30
	uint32_t status = AFEC0->AFEC_ISR;
  40058a:	4b11      	ldr	r3, [pc, #68]	; (4005d0 <AFEC0_Handler+0x50>)
  40058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	if((status & AFEC_IMR_EOC0) == 1) {
  40058e:	f013 0f01 	tst.w	r3, #1
  400592:	d017      	beq.n	4005c4 <AFEC0_Handler+0x44>
		PIOC->PIO_CODR |= PIO_PC8;
  400594:	6b53      	ldr	r3, [r2, #52]	; 0x34
  400596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40059a:	6353      	str	r3, [r2, #52]	; 0x34
		tmp = AFEC0->AFEC_CDR;
  40059c:	4b0c      	ldr	r3, [pc, #48]	; (4005d0 <AFEC0_Handler+0x50>)
  40059e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4005a0:	4a0c      	ldr	r2, [pc, #48]	; (4005d4 <AFEC0_Handler+0x54>)
  4005a2:	6013      	str	r3, [r2, #0]
		boolean = 1;
  4005a4:	2101      	movs	r1, #1
  4005a6:	4a0c      	ldr	r2, [pc, #48]	; (4005d8 <AFEC0_Handler+0x58>)
  4005a8:	6011      	str	r1, [r2, #0]
		
		if( ((((DACC->DACC_ISR) & DACC_ISR_TXRDY0_Msk)) == 1) && ((DACC -> DACC_CHSR) & (0x1u << 8)) == 256 ) {
  4005aa:	4a0c      	ldr	r2, [pc, #48]	; (4005dc <AFEC0_Handler+0x5c>)
  4005ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
  4005ae:	f012 0f01 	tst.w	r2, #1
  4005b2:	d007      	beq.n	4005c4 <AFEC0_Handler+0x44>
  4005b4:	4a09      	ldr	r2, [pc, #36]	; (4005dc <AFEC0_Handler+0x5c>)
  4005b6:	6992      	ldr	r2, [r2, #24]
  4005b8:	f412 7f80 	tst.w	r2, #256	; 0x100
  4005bc:	d002      	beq.n	4005c4 <AFEC0_Handler+0x44>
			DACC->DACC_CDR[0] = DACC_CDR_DATA0(tmp);
  4005be:	b29b      	uxth	r3, r3
  4005c0:	4a06      	ldr	r2, [pc, #24]	; (4005dc <AFEC0_Handler+0x5c>)
  4005c2:	61d3      	str	r3, [r2, #28]
		}
	}
	AFEC0->AFEC_CR = AFEC_CR_START;
  4005c4:	2202      	movs	r2, #2
  4005c6:	4b02      	ldr	r3, [pc, #8]	; (4005d0 <AFEC0_Handler+0x50>)
  4005c8:	601a      	str	r2, [r3, #0]
  4005ca:	4770      	bx	lr
  4005cc:	400e1200 	.word	0x400e1200
  4005d0:	4003c000 	.word	0x4003c000
  4005d4:	20400458 	.word	0x20400458
  4005d8:	20400450 	.word	0x20400450
  4005dc:	40040000 	.word	0x40040000

004005e0 <DACC_Handler>:
}

void DACC_Handler(void) {
  4005e0:	4770      	bx	lr
	...

004005e4 <mainclk_init>:
uint32_t mainclk_init()
{
	uint16_t tmp = 0;
	
	/* Enable Main XOSC */
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  4005e4:	4910      	ldr	r1, [pc, #64]	; (400628 <mainclk_init+0x44>)
  4005e6:	6a0b      	ldr	r3, [r1, #32]
	| CKGR_MOR_KEY_PASSWD
	| CKGR_MOR_MOSCXTEN
	| CKGR_MOR_MOSCXTST(XOSC12M_STARTUP_TIME);
  4005e8:	4a10      	ldr	r2, [pc, #64]	; (40062c <mainclk_init+0x48>)
  4005ea:	401a      	ands	r2, r3
  4005ec:	4b10      	ldr	r3, [pc, #64]	; (400630 <mainclk_init+0x4c>)
  4005ee:	4313      	orrs	r3, r2
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  4005f0:	620b      	str	r3, [r1, #32]
	
	/* wait for XOSC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005f2:	460a      	mov	r2, r1
  4005f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005f6:	f013 0f01 	tst.w	r3, #1
  4005fa:	d0fb      	beq.n	4005f4 <mainclk_init+0x10>
	
	/* Select XOSC as Main Clock */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD
  4005fc:	4a0a      	ldr	r2, [pc, #40]	; (400628 <mainclk_init+0x44>)
  4005fe:	6a11      	ldr	r1, [r2, #32]
  400600:	4b0c      	ldr	r3, [pc, #48]	; (400634 <mainclk_init+0x50>)
  400602:	430b      	orrs	r3, r1
  400604:	6213      	str	r3, [r2, #32]
	| CKGR_MOR_MOSCSEL;
	
	/* wait for Main Clock to be ready */
	while(!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400606:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400608:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40060c:	d0fb      	beq.n	400606 <mainclk_init+0x22>

	/* Check if Main Clock frequency is correct */
	while(!(PMC->CKGR_MCFR & CKGR_MCFR_MAINFRDY));
  40060e:	4a06      	ldr	r2, [pc, #24]	; (400628 <mainclk_init+0x44>)
  400610:	6a53      	ldr	r3, [r2, #36]	; 0x24
  400612:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400616:	d0fb      	beq.n	400610 <mainclk_init+0x2c>
	tmp = (PMC->CKGR_MCFR & CKGR_MCFR_MAINF_Msk);
  400618:	4b03      	ldr	r3, [pc, #12]	; (400628 <mainclk_init+0x44>)
  40061a:	6a58      	ldr	r0, [r3, #36]	; 0x24
	
	if(tmp == 0) return EXIT_FAILURE;
  40061c:	b280      	uxth	r0, r0
	
	return EXIT_SUCCESS;
	
}
  40061e:	fab0 f080 	clz	r0, r0
  400622:	0940      	lsrs	r0, r0, #5
  400624:	4770      	bx	lr
  400626:	bf00      	nop
  400628:	400e0600 	.word	0x400e0600
  40062c:	ffc8c1fc 	.word	0xffc8c1fc
  400630:	00373e01 	.word	0x00373e01
  400634:	01370000 	.word	0x01370000

00400638 <pll_init>:

/* Enable the PLL (300 MHz) */
uint32_t pll_init()
{
	/* Stop PLL first */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  400638:	4b08      	ldr	r3, [pc, #32]	; (40065c <pll_init+0x24>)
  40063a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40063e:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_MULA(0);
	
	/* Configure and enable PLL */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  400640:	f502 12c1 	add.w	r2, r2, #1581056	; 0x182000
  400644:	f502 52f8 	add.w	r2, r2, #7936	; 0x1f00
  400648:	3201      	adds	r2, #1
  40064a:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_DIVA_BYPASS
	| CKGR_PLLAR_MULA(((F_CPU / F_XOSC) - 1))
	| CKGR_PLLAR_PLLACOUNT(PLL_STARTUP_TIME);
	
	/* Wait for PLL lock */
	while(!(PMC->PMC_SR & PMC_SR_LOCKA));
  40064c:	461a      	mov	r2, r3
  40064e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400650:	f013 0f02 	tst.w	r3, #2
  400654:	d0fb      	beq.n	40064e <pll_init+0x16>
	
	return EXIT_SUCCESS;
}
  400656:	2000      	movs	r0, #0
  400658:	4770      	bx	lr
  40065a:	bf00      	nop
  40065c:	400e0600 	.word	0x400e0600

00400660 <sysclk_init>:

uint32_t sysclk_init()
{
  400660:	b508      	push	{r3, lr}
 * \brief Enable FPU
 */
static inline void fpu_enable(void)
{
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400662:	4a15      	ldr	r2, [pc, #84]	; (4006b8 <sysclk_init+0x58>)
  400664:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40066c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400670:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400674:	f3bf 8f6f 	isb	sy
	fpu_enable();
	
	/* Set flash wait state */
	EFC->EEFC_FMR = EEFC_FMR_FWS(EFC_WAIT_STATE) 
  400678:	4a10      	ldr	r2, [pc, #64]	; (4006bc <sysclk_init+0x5c>)
  40067a:	4b11      	ldr	r3, [pc, #68]	; (4006c0 <sysclk_init+0x60>)
  40067c:	601a      	str	r2, [r3, #0]
	| EEFC_FMR_CLOE;
			

	mainclk_init();
  40067e:	4b11      	ldr	r3, [pc, #68]	; (4006c4 <sysclk_init+0x64>)
  400680:	4798      	blx	r3
	pll_init();
  400682:	4b11      	ldr	r3, [pc, #68]	; (4006c8 <sysclk_init+0x68>)
  400684:	4798      	blx	r3

	
	/* Select Master Clock Div */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  400686:	4a11      	ldr	r2, [pc, #68]	; (4006cc <sysclk_init+0x6c>)
  400688:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40068a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	| PMC_MCKR_MDIV_PCK_DIV2;
  40068e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  400692:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400694:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400696:	f013 0f08 	tst.w	r3, #8
  40069a:	d0fb      	beq.n	400694 <sysclk_init+0x34>
	
	/* Select PLL as Master Clock Source */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  40069c:	4a0b      	ldr	r2, [pc, #44]	; (4006cc <sysclk_init+0x6c>)
  40069e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4006a0:	f023 0303 	bic.w	r3, r3, #3
	| PMC_MCKR_CSS_PLLA_CLK;
  4006a4:	f043 0302 	orr.w	r3, r3, #2
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  4006a8:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4006aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006ac:	f013 0f08 	tst.w	r3, #8
  4006b0:	d0fb      	beq.n	4006aa <sysclk_init+0x4a>
	
	return EXIT_SUCCESS;
  4006b2:	2000      	movs	r0, #0
  4006b4:	bd08      	pop	{r3, pc}
  4006b6:	bf00      	nop
  4006b8:	e000ed00 	.word	0xe000ed00
  4006bc:	04000600 	.word	0x04000600
  4006c0:	400e0c00 	.word	0x400e0c00
  4006c4:	004005e5 	.word	0x004005e5
  4006c8:	00400639 	.word	0x00400639
  4006cc:	400e0600 	.word	0x400e0600

004006d0 <__libc_init_array>:
  4006d0:	b570      	push	{r4, r5, r6, lr}
  4006d2:	4e0f      	ldr	r6, [pc, #60]	; (400710 <__libc_init_array+0x40>)
  4006d4:	4d0f      	ldr	r5, [pc, #60]	; (400714 <__libc_init_array+0x44>)
  4006d6:	1b76      	subs	r6, r6, r5
  4006d8:	10b6      	asrs	r6, r6, #2
  4006da:	bf18      	it	ne
  4006dc:	2400      	movne	r4, #0
  4006de:	d005      	beq.n	4006ec <__libc_init_array+0x1c>
  4006e0:	3401      	adds	r4, #1
  4006e2:	f855 3b04 	ldr.w	r3, [r5], #4
  4006e6:	4798      	blx	r3
  4006e8:	42a6      	cmp	r6, r4
  4006ea:	d1f9      	bne.n	4006e0 <__libc_init_array+0x10>
  4006ec:	4e0a      	ldr	r6, [pc, #40]	; (400718 <__libc_init_array+0x48>)
  4006ee:	4d0b      	ldr	r5, [pc, #44]	; (40071c <__libc_init_array+0x4c>)
  4006f0:	1b76      	subs	r6, r6, r5
  4006f2:	f000 f8a7 	bl	400844 <_init>
  4006f6:	10b6      	asrs	r6, r6, #2
  4006f8:	bf18      	it	ne
  4006fa:	2400      	movne	r4, #0
  4006fc:	d006      	beq.n	40070c <__libc_init_array+0x3c>
  4006fe:	3401      	adds	r4, #1
  400700:	f855 3b04 	ldr.w	r3, [r5], #4
  400704:	4798      	blx	r3
  400706:	42a6      	cmp	r6, r4
  400708:	d1f9      	bne.n	4006fe <__libc_init_array+0x2e>
  40070a:	bd70      	pop	{r4, r5, r6, pc}
  40070c:	bd70      	pop	{r4, r5, r6, pc}
  40070e:	bf00      	nop
  400710:	00400850 	.word	0x00400850
  400714:	00400850 	.word	0x00400850
  400718:	00400858 	.word	0x00400858
  40071c:	00400850 	.word	0x00400850

00400720 <register_fini>:
  400720:	4b02      	ldr	r3, [pc, #8]	; (40072c <register_fini+0xc>)
  400722:	b113      	cbz	r3, 40072a <register_fini+0xa>
  400724:	4802      	ldr	r0, [pc, #8]	; (400730 <register_fini+0x10>)
  400726:	f000 b805 	b.w	400734 <atexit>
  40072a:	4770      	bx	lr
  40072c:	00000000 	.word	0x00000000
  400730:	00400741 	.word	0x00400741

00400734 <atexit>:
  400734:	2300      	movs	r3, #0
  400736:	4601      	mov	r1, r0
  400738:	461a      	mov	r2, r3
  40073a:	4618      	mov	r0, r3
  40073c:	f000 b81e 	b.w	40077c <__register_exitproc>

00400740 <__libc_fini_array>:
  400740:	b538      	push	{r3, r4, r5, lr}
  400742:	4c0a      	ldr	r4, [pc, #40]	; (40076c <__libc_fini_array+0x2c>)
  400744:	4d0a      	ldr	r5, [pc, #40]	; (400770 <__libc_fini_array+0x30>)
  400746:	1b64      	subs	r4, r4, r5
  400748:	10a4      	asrs	r4, r4, #2
  40074a:	d00a      	beq.n	400762 <__libc_fini_array+0x22>
  40074c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400750:	3b01      	subs	r3, #1
  400752:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400756:	3c01      	subs	r4, #1
  400758:	f855 3904 	ldr.w	r3, [r5], #-4
  40075c:	4798      	blx	r3
  40075e:	2c00      	cmp	r4, #0
  400760:	d1f9      	bne.n	400756 <__libc_fini_array+0x16>
  400762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400766:	f000 b877 	b.w	400858 <_fini>
  40076a:	bf00      	nop
  40076c:	00400868 	.word	0x00400868
  400770:	00400864 	.word	0x00400864

00400774 <__retarget_lock_acquire_recursive>:
  400774:	4770      	bx	lr
  400776:	bf00      	nop

00400778 <__retarget_lock_release_recursive>:
  400778:	4770      	bx	lr
  40077a:	bf00      	nop

0040077c <__register_exitproc>:
  40077c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400780:	4d2c      	ldr	r5, [pc, #176]	; (400834 <__register_exitproc+0xb8>)
  400782:	4606      	mov	r6, r0
  400784:	6828      	ldr	r0, [r5, #0]
  400786:	4698      	mov	r8, r3
  400788:	460f      	mov	r7, r1
  40078a:	4691      	mov	r9, r2
  40078c:	f7ff fff2 	bl	400774 <__retarget_lock_acquire_recursive>
  400790:	4b29      	ldr	r3, [pc, #164]	; (400838 <__register_exitproc+0xbc>)
  400792:	681c      	ldr	r4, [r3, #0]
  400794:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400798:	2b00      	cmp	r3, #0
  40079a:	d03e      	beq.n	40081a <__register_exitproc+0x9e>
  40079c:	685a      	ldr	r2, [r3, #4]
  40079e:	2a1f      	cmp	r2, #31
  4007a0:	dc1c      	bgt.n	4007dc <__register_exitproc+0x60>
  4007a2:	f102 0e01 	add.w	lr, r2, #1
  4007a6:	b176      	cbz	r6, 4007c6 <__register_exitproc+0x4a>
  4007a8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4007ac:	2401      	movs	r4, #1
  4007ae:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4007b2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4007b6:	4094      	lsls	r4, r2
  4007b8:	4320      	orrs	r0, r4
  4007ba:	2e02      	cmp	r6, #2
  4007bc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4007c0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4007c4:	d023      	beq.n	40080e <__register_exitproc+0x92>
  4007c6:	3202      	adds	r2, #2
  4007c8:	f8c3 e004 	str.w	lr, [r3, #4]
  4007cc:	6828      	ldr	r0, [r5, #0]
  4007ce:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4007d2:	f7ff ffd1 	bl	400778 <__retarget_lock_release_recursive>
  4007d6:	2000      	movs	r0, #0
  4007d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007dc:	4b17      	ldr	r3, [pc, #92]	; (40083c <__register_exitproc+0xc0>)
  4007de:	b30b      	cbz	r3, 400824 <__register_exitproc+0xa8>
  4007e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4007e4:	f3af 8000 	nop.w
  4007e8:	4603      	mov	r3, r0
  4007ea:	b1d8      	cbz	r0, 400824 <__register_exitproc+0xa8>
  4007ec:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4007f0:	6002      	str	r2, [r0, #0]
  4007f2:	2100      	movs	r1, #0
  4007f4:	6041      	str	r1, [r0, #4]
  4007f6:	460a      	mov	r2, r1
  4007f8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4007fc:	f04f 0e01 	mov.w	lr, #1
  400800:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400804:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400808:	2e00      	cmp	r6, #0
  40080a:	d0dc      	beq.n	4007c6 <__register_exitproc+0x4a>
  40080c:	e7cc      	b.n	4007a8 <__register_exitproc+0x2c>
  40080e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400812:	430c      	orrs	r4, r1
  400814:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400818:	e7d5      	b.n	4007c6 <__register_exitproc+0x4a>
  40081a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40081e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400822:	e7bb      	b.n	40079c <__register_exitproc+0x20>
  400824:	6828      	ldr	r0, [r5, #0]
  400826:	f7ff ffa7 	bl	400778 <__retarget_lock_release_recursive>
  40082a:	f04f 30ff 	mov.w	r0, #4294967295
  40082e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400832:	bf00      	nop
  400834:	20400430 	.word	0x20400430
  400838:	00400840 	.word	0x00400840
  40083c:	00000000 	.word	0x00000000

00400840 <_global_impure_ptr>:
  400840:	20400008                                ..@ 

00400844 <_init>:
  400844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400846:	bf00      	nop
  400848:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40084a:	bc08      	pop	{r3}
  40084c:	469e      	mov	lr, r3
  40084e:	4770      	bx	lr

00400850 <__init_array_start>:
  400850:	00400721 	.word	0x00400721

00400854 <__frame_dummy_init_array_entry>:
  400854:	0040018d                                ..@.

00400858 <_fini>:
  400858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40085a:	bf00      	nop
  40085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40085e:	bc08      	pop	{r3}
  400860:	469e      	mov	lr, r3
  400862:	4770      	bx	lr

00400864 <__fini_array_start>:
  400864:	00400169 	.word	0x00400169
