
DigitalFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000082c  20400000  004009f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000044c  2040082c  0040121c  0002082c  2**2
                  ALLOC
  3 .heap         00000200  20400c78  00401668  0002082c  2**0
                  ALLOC
  4 .stack        00000400  20400e78  00401868  0002082c  2**0
                  ALLOC
  5 .ARM.attributes 00000030  00000000  00000000  0002082c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002085c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008c90  00000000  00000000  000208b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010b1  00000000  00000000  00029545  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004e2  00000000  00000000  0002a5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000160  00000000  00000000  0002aad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00037c04  00000000  00000000  0002ad08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005840  00000000  00000000  0006290c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0013242e  00000000  00000000  0006814c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000003b4  00000000  00000000  0019a57c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	78 12 40 20 ad 04 40 00 a9 04 40 00 a9 04 40 00     x.@ ..@...@...@.
  400010:	a9 04 40 00 a9 04 40 00 a9 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a9 04 40 00 a9 04 40 00 00 00 00 00 a9 04 40 00     ..@...@.......@.
  40003c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40004c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40005c:	a9 04 40 00 a9 04 40 00 00 00 00 00 a9 04 40 00     ..@...@.......@.
  40006c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40007c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40008c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40009c:	8d 06 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000ac:	a9 04 40 00 a9 04 40 00 61 06 40 00 e9 06 40 00     ..@...@.a.@...@.
  4000bc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000cc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000dc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000ec:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  4000fc:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40010c:	a9 04 40 00 a9 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ......@...@...@.
  40012c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40013c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40014c:	a9 04 40 00 a9 04 40 00 a9 04 40 00 a9 04 40 00     ..@...@...@...@.
  40015c:	a9 04 40 00 a9 04 40 00 a9 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	2040082c 	.word	0x2040082c
  400184:	00000000 	.word	0x00000000
  400188:	004009f0 	.word	0x004009f0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004009f0 	.word	0x004009f0
  4001c8:	20400830 	.word	0x20400830
  4001cc:	004009f0 	.word	0x004009f0
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec0ch0_init>:
#include "afec.h"
#include <stdlib.h>


void afec0ch0_init(uint32_t prescaler)
{
  4001d4:	b410      	push	{r4}
	/* Enable AFEC0 peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_AFEC0);
  4001d6:	4b17      	ldr	r3, [pc, #92]	; (400234 <afec0ch0_init+0x60>)
  4001d8:	221d      	movs	r2, #29
  4001da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4001de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4001e2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4001e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the AFEC module */
	AFEC0->AFEC_CR = AFEC_CR_SWRST;
  4001ea:	4b13      	ldr	r3, [pc, #76]	; (400238 <afec0ch0_init+0x64>)
  4001ec:	2201      	movs	r2, #1
  4001ee:	601a      	str	r2, [r3, #0]
	
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f0:	0200      	lsls	r0, r0, #8
  4001f2:	b280      	uxth	r0, r0
	| AFEC_MR_ONE 
	| AFEC_MR_TRANSFER(0x02) 											// Set to 2 to optimize transfer time.
	| AFEC_MR_STARTUP_SUT64												// Start Up Time is 64 periods AFEC clock.
	| AFEC_MR_TRACKTIM(0xF);											// Inherent tracking time is always 15 AFE clock cycles. Do not modify this field.
  4001f4:	4911      	ldr	r1, [pc, #68]	; (40023c <afec0ch0_init+0x68>)
  4001f6:	4301      	orrs	r1, r0
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f8:	6059      	str	r1, [r3, #4]
	
	AFEC0->AFEC_EMR = AFEC_EMR_RES_NO_AVERAGE									// 12-bit resolution, AFE sample rate is maximum (no averaging).	
  4001fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4001fe:	6099      	str	r1, [r3, #8]
	| AFEC_EMR_STM														// Only a single trigger is required to get an averaged value.
	| AFEC_EMR_SIGNMODE_SE_UNSG_DF_SIGN;								// Single-Ended channels: unsigned conversions. Differential channels: signed conversions.
	
	AFEC0->AFEC_ACR = AFEC_ACR_IBCTL(0x03) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400200:	f44f 7143 	mov.w	r1, #780	; 0x30c
  400204:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	//AFEC0->AFEC_MR |= AFEC_MR_TRGEN;									// Enable Hardware Trigger
	/*
	 * The field AOFF must be configured to 512 (mid scale of the DAC) when there is no offset error to
	 * compensate.
	 */
	AFEC0->AFEC_CSELR = AFEC_CSELR_CSEL(AFEC0_CH0);
  400208:	2100      	movs	r1, #0
  40020a:	6659      	str	r1, [r3, #100]	; 0x64
	AFEC0->AFEC_COCR = AFEC_COCR_AOFF(0x200);
  40020c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400210:	66d9      	str	r1, [r3, #108]	; 0x6c
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400212:	490b      	ldr	r1, [pc, #44]	; (400240 <afec0ch0_init+0x6c>)
  400214:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  400218:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40021c:	2420      	movs	r4, #32
  40021e:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400222:	6008      	str	r0, [r1, #0]
	/* Enable end of conversion interrupt for channel 0 */
	
	NVIC_ClearPendingIRQ(AFEC0_IRQn);
	NVIC_SetPriority(AFEC0_IRQn, 1);
	NVIC_EnableIRQ(AFEC0_IRQn);
	AFEC0->AFEC_IER = AFEC_IER_EOC0;
  400224:	625a      	str	r2, [r3, #36]	; 0x24
	
	
	/* Enable Channel 0 for AFEC0 */
	AFEC0->AFEC_CHER = AFEC_CHER_CH0;
  400226:	615a      	str	r2, [r3, #20]
	
	AFEC0->AFEC_CR = AFEC_CR_START;
  400228:	2202      	movs	r2, #2
  40022a:	601a      	str	r2, [r3, #0]
}
  40022c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400230:	4770      	bx	lr
  400232:	bf00      	nop
  400234:	400e0600 	.word	0x400e0600
  400238:	4003c000 	.word	0x4003c000
  40023c:	2f840000 	.word	0x2f840000
  400240:	e000e100 	.word	0xe000e100

00400244 <ioport_init>:


void ioport_init()
{
	/* Initialize IOPORTs */
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOA);
  400244:	4b45      	ldr	r3, [pc, #276]	; (40035c <ioport_init+0x118>)
  400246:	220a      	movs	r2, #10
  400248:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40024c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400250:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400254:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOB);
  400258:	220b      	movs	r2, #11
  40025a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40025e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400262:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400266:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOC);
  40026a:	220c      	movs	r2, #12
  40026c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400270:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400274:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400278:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOD);
  40027c:	2210      	movs	r2, #16
  40027e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400282:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400286:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40028a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOE);
  40028e:	2211      	movs	r2, #17
  400290:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400294:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400298:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40029c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	PIOC->PIO_OER |= PIO_PC8;
  4002a0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  4002a4:	691a      	ldr	r2, [r3, #16]
  4002a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002aa:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC8;
  4002ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC8;
  4002b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002be:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_OER |= PIO_PC10;
  4002c0:	691a      	ldr	r2, [r3, #16]
  4002c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002c6:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC10;
  4002c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC10;
  4002d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002da:	635a      	str	r2, [r3, #52]	; 0x34

	

	
	/* Configure Push Button pins */
	PIOA->PIO_ODR |= PIO_PA11;
  4002dc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4002e0:	695a      	ldr	r2, [r3, #20]
  4002e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002e6:	615a      	str	r2, [r3, #20]
	PIOA->PIO_OWER |= PIO_PA11;
  4002e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOA->PIO_PUER |= PIO_PA11;
  4002f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  4002f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002fa:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PPDDR |= PIO_PA11;
  4002fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  400300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400304:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	PIOA->PIO_MDDR |= PIO_PA11;
  400308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  40030a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40030e:	655a      	str	r2, [r3, #84]	; 0x54
	PIOA->PIO_IFER |= PIO_PA11;
  400310:	6a1a      	ldr	r2, [r3, #32]
  400312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400316:	621a      	str	r2, [r3, #32]
	PIOA->PIO_IFSCER |= PIO_PA11;
  400318:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  40031c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	PIOA->PIO_ABCDSR[0] &= ~(PIO_PA11);
  400324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40032a:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABCDSR[1] &= ~(PIO_PA11);
  40032c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40032e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400332:	675a      	str	r2, [r3, #116]	; 0x74
	PIOA->PIO_ESR |= PIO_PA11;
  400334:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  400338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40033c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_REHLSR |= PIO_PA11;
  400340:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  400344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400348:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	PIOA->PIO_AIMER |= PIO_PA11;
  40034c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  400350:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400354:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400358:	4770      	bx	lr
  40035a:	bf00      	nop
  40035c:	400e0600 	.word	0x400e0600

00400360 <board_init>:
}

void board_init()
{
  400360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Disable Watchdog */
	WDT->WDT_MR |= WDT_MR_WDDIS;
  400362:	4a32      	ldr	r2, [pc, #200]	; (40042c <board_init+0xcc>)
  400364:	6853      	ldr	r3, [r2, #4]
  400366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40036a:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  40036c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400370:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400374:	4b2e      	ldr	r3, [pc, #184]	; (400430 <board_init+0xd0>)
  400376:	2100      	movs	r1, #0
  400378:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  40037c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400380:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  400384:	695a      	ldr	r2, [r3, #20]
  400386:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40038a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  40038c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400390:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400394:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400398:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40039c:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  4003a0:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4003a4:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  4003a8:	016e      	lsls	r6, r5, #5
  4003aa:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4003ae:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  4003b2:	461c      	mov	r4, r3
  4003b4:	ea06 000e 	and.w	r0, r6, lr
  4003b8:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4003ba:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4003bc:	ea42 0100 	orr.w	r1, r2, r0
  4003c0:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4003c4:	3b01      	subs	r3, #1
  4003c6:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4003ca:	f1b3 3fff 	cmp.w	r3, #4294967295
  4003ce:	d1f5      	bne.n	4003bc <board_init+0x5c>
    } while(sets-- != 0U);
  4003d0:	3d01      	subs	r5, #1
  4003d2:	3e20      	subs	r6, #32
  4003d4:	f1b5 3fff 	cmp.w	r5, #4294967295
  4003d8:	d1ec      	bne.n	4003b4 <board_init+0x54>
  4003da:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4003de:	4b14      	ldr	r3, [pc, #80]	; (400430 <board_init+0xd0>)
  4003e0:	695a      	ldr	r2, [r3, #20]
  4003e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4003e6:	615a      	str	r2, [r3, #20]
  4003e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003ec:	f3bf 8f6f 	isb	sy
	/* Enabling the Cache */
	SCB_EnableICache();
	SCB_EnableDCache();
	
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003f0:	4a10      	ldr	r2, [pc, #64]	; (400434 <board_init+0xd4>)
  4003f2:	4911      	ldr	r1, [pc, #68]	; (400438 <board_init+0xd8>)
  4003f4:	6051      	str	r1, [r2, #4]
	| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003f6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4003fa:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  4003fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400400:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400404:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400408:	f022 0201 	bic.w	r2, r2, #1
  40040c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400410:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400414:	f022 0201 	bic.w	r2, r2, #1
  400418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40041c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400420:	f3bf 8f6f 	isb	sy
	| EEFC_FCR_FARG(7));
	
	tcm_disable();
	
	ioport_init();
  400424:	4b05      	ldr	r3, [pc, #20]	; (40043c <board_init+0xdc>)
  400426:	4798      	blx	r3
  400428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40042a:	bf00      	nop
  40042c:	400e1850 	.word	0x400e1850
  400430:	e000ed00 	.word	0xe000ed00
  400434:	400e0c00 	.word	0x400e0c00
  400438:	5a00080c 	.word	0x5a00080c
  40043c:	00400245 	.word	0x00400245

00400440 <dac0ch0init>:
#include "sam.h"

void dac0ch0init(void) 
{
	/* Enable DACC peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_DACC);
  400440:	4b16      	ldr	r3, [pc, #88]	; (40049c <dac0ch0init+0x5c>)
  400442:	221e      	movs	r2, #30
  400444:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400448:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40044c:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400450:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the DACC module */
	DACC->DACC_CR = DACC_CR_SWRST;
  400454:	4b12      	ldr	r3, [pc, #72]	; (4004a0 <dac0ch0init+0x60>)
  400456:	2101      	movs	r1, #1
  400458:	6019      	str	r1, [r3, #0]
	
	DACC->DACC_WPMR |= DACC_WPMR_WPKEY_PASSWD;
  40045a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
  40045e:	4a11      	ldr	r2, [pc, #68]	; (4004a4 <dac0ch0init+0x64>)
  400460:	4302      	orrs	r2, r0
  400462:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC->DACC_WPMR |= (0x00 << 0);
  400466:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  40046a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	DACC->DACC_MR |= DACC_MR_PRESCALER(0xF)
  40046e:	685a      	ldr	r2, [r3, #4]
  400470:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
  400474:	605a      	str	r2, [r3, #4]
	| DACC_MR_WORD_DISABLED
	| DACC_MR_MAXS0_TRIG_EVENT 
	| DACC_MR_MAXS1_TRIG_EVENT;
	
	
	DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN0_DIS;
  400476:	689a      	ldr	r2, [r3, #8]
  400478:	609a      	str	r2, [r3, #8]
	
	DACC->DACC_ACR |= DACC_ACR_IBCTLCH0(3);
  40047a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  40047e:	f042 0203 	orr.w	r2, r2, #3
  400482:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	//NVIC_ClearPendingIRQ(DACC_IRQn);
	//NVIC_SetPriority(DACC_IRQn, 1);
	//NVIC_EnableIRQ(DACC_IRQn);
	
	uint32_t daccStatus = DACC->DACC_CHSR;
  400486:	699a      	ldr	r2, [r3, #24]
	
	DACC->DACC_CHER = DACC_CHER_CH0_Msk;
  400488:	6119      	str	r1, [r3, #16]
	
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  40048a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40048e:	d104      	bne.n	40049a <dac0ch0init+0x5a>
		daccStatus = DACC->DACC_CHSR;
  400490:	461a      	mov	r2, r3
  400492:	6993      	ldr	r3, [r2, #24]
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  400494:	f413 7f80 	tst.w	r3, #256	; 0x100
  400498:	d0fb      	beq.n	400492 <dac0ch0init+0x52>
  40049a:	4770      	bx	lr
  40049c:	400e0600 	.word	0x400e0600
  4004a0:	40040000 	.word	0x40040000
  4004a4:	44414300 	.word	0x44414300

004004a8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004a8:	e7fe      	b.n	4004a8 <Dummy_Handler>
	...

004004ac <Reset_Handler>:
{
  4004ac:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4004ae:	4b17      	ldr	r3, [pc, #92]	; (40050c <Reset_Handler+0x60>)
  4004b0:	4a17      	ldr	r2, [pc, #92]	; (400510 <Reset_Handler+0x64>)
  4004b2:	429a      	cmp	r2, r3
  4004b4:	d010      	beq.n	4004d8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4004b6:	4b17      	ldr	r3, [pc, #92]	; (400514 <Reset_Handler+0x68>)
  4004b8:	4a14      	ldr	r2, [pc, #80]	; (40050c <Reset_Handler+0x60>)
  4004ba:	429a      	cmp	r2, r3
  4004bc:	d20c      	bcs.n	4004d8 <Reset_Handler+0x2c>
  4004be:	3b01      	subs	r3, #1
  4004c0:	1a9b      	subs	r3, r3, r2
  4004c2:	f023 0303 	bic.w	r3, r3, #3
  4004c6:	3304      	adds	r3, #4
  4004c8:	4413      	add	r3, r2
  4004ca:	4911      	ldr	r1, [pc, #68]	; (400510 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4004cc:	f851 0b04 	ldr.w	r0, [r1], #4
  4004d0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4004d4:	429a      	cmp	r2, r3
  4004d6:	d1f9      	bne.n	4004cc <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4004d8:	4b0f      	ldr	r3, [pc, #60]	; (400518 <Reset_Handler+0x6c>)
  4004da:	4a10      	ldr	r2, [pc, #64]	; (40051c <Reset_Handler+0x70>)
  4004dc:	429a      	cmp	r2, r3
  4004de:	d20a      	bcs.n	4004f6 <Reset_Handler+0x4a>
  4004e0:	3b01      	subs	r3, #1
  4004e2:	1a9b      	subs	r3, r3, r2
  4004e4:	f023 0303 	bic.w	r3, r3, #3
  4004e8:	3304      	adds	r3, #4
  4004ea:	4413      	add	r3, r2
                *pDest++ = 0;
  4004ec:	2100      	movs	r1, #0
  4004ee:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4004f2:	4293      	cmp	r3, r2
  4004f4:	d1fb      	bne.n	4004ee <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004f6:	4a0a      	ldr	r2, [pc, #40]	; (400520 <Reset_Handler+0x74>)
  4004f8:	4b0a      	ldr	r3, [pc, #40]	; (400524 <Reset_Handler+0x78>)
  4004fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004fe:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400500:	4b09      	ldr	r3, [pc, #36]	; (400528 <Reset_Handler+0x7c>)
  400502:	4798      	blx	r3
        main();
  400504:	4b09      	ldr	r3, [pc, #36]	; (40052c <Reset_Handler+0x80>)
  400506:	4798      	blx	r3
  400508:	e7fe      	b.n	400508 <Reset_Handler+0x5c>
  40050a:	bf00      	nop
  40050c:	20400000 	.word	0x20400000
  400510:	004009f0 	.word	0x004009f0
  400514:	2040082c 	.word	0x2040082c
  400518:	20400c78 	.word	0x20400c78
  40051c:	2040082c 	.word	0x2040082c
  400520:	e000ed00 	.word	0xe000ed00
  400524:	00400000 	.word	0x00400000
  400528:	00400859 	.word	0x00400859
  40052c:	004005d5 	.word	0x004005d5

00400530 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
  400530:	4a01      	ldr	r2, [pc, #4]	; (400538 <SystemInit+0x8>)
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <SystemInit+0xc>)
  400534:	601a      	str	r2, [r3, #0]
  400536:	4770      	bx	lr
  400538:	00b71b00 	.word	0x00b71b00
  40053c:	20400000 	.word	0x20400000

00400540 <firFilter>:


static uint32_t offset;

float firFilter(float input) 
{
  400540:	b4f0      	push	{r4, r5, r6, r7}
	//PIOC->PIO_CODR |= PIO_PC8;
	
	float *coeff = coefficients;
	float *coeff_end = coefficients + N_coefficients;
  400542:	4d1f      	ldr	r5, [pc, #124]	; (4005c0 <firFilter+0x80>)
  400544:	f8d5 73f8 	ldr.w	r7, [r5, #1016]	; 0x3f8
  400548:	00b9      	lsls	r1, r7, #2
  40054a:	440d      	add	r5, r1
	
	float *buf_val = buffer + offset;
  40054c:	4b1d      	ldr	r3, [pc, #116]	; (4005c4 <firFilter+0x84>)
  40054e:	681e      	ldr	r6, [r3, #0]
  400550:	4b1d      	ldr	r3, [pc, #116]	; (4005c8 <firFilter+0x88>)
  400552:	eb03 0486 	add.w	r4, r3, r6, lsl #2
	
	*buf_val = input;
  400556:	ed84 0a00 	vstr	s0, [r4]
	
	float output = 0;
	
	while(buf_val >= buffer) 
  40055a:	429c      	cmp	r4, r3
  40055c:	d329      	bcc.n	4005b2 <firFilter+0x72>
  40055e:	1d22      	adds	r2, r4, #4
  400560:	1ae3      	subs	r3, r4, r3
  400562:	f023 0303 	bic.w	r3, r3, #3
  400566:	1ae4      	subs	r4, r4, r3
  400568:	ed9f 0a18 	vldr	s0, [pc, #96]	; 4005cc <firFilter+0x8c>
  40056c:	4814      	ldr	r0, [pc, #80]	; (4005c0 <firFilter+0x80>)
	{
		output += *buf_val-- * *coeff++;
  40056e:	ed72 7a01 	vldmdb	r2!, {s15}
  400572:	ecb0 7a01 	vldmia	r0!, {s14}
  400576:	ee67 7a87 	vmul.f32	s15, s15, s14
  40057a:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(buf_val >= buffer) 
  40057e:	42a2      	cmp	r2, r4
  400580:	d1f5      	bne.n	40056e <firFilter+0x2e>
  400582:	4a13      	ldr	r2, [pc, #76]	; (4005d0 <firFilter+0x90>)
  400584:	4413      	add	r3, r2
	}
	
	buf_val = buffer + N_coefficients - 1;
	
	while(coeff < coeff_end)
  400586:	429d      	cmp	r5, r3
  400588:	d90b      	bls.n	4005a2 <firFilter+0x62>
  40058a:	4a0f      	ldr	r2, [pc, #60]	; (4005c8 <firFilter+0x88>)
  40058c:	440a      	add	r2, r1
	{
		output += (*buf_val-- * *coeff++);
  40058e:	ed72 7a01 	vldmdb	r2!, {s15}
  400592:	ecb3 7a01 	vldmia	r3!, {s14}
  400596:	ee67 7a87 	vmul.f32	s15, s15, s14
  40059a:	ee30 0a27 	vadd.f32	s0, s0, s15
	while(coeff < coeff_end)
  40059e:	429d      	cmp	r5, r3
  4005a0:	d8f5      	bhi.n	40058e <firFilter+0x4e>
	}
	
	if(++offset >= N_coefficients)
  4005a2:	3601      	adds	r6, #1
  4005a4:	42b7      	cmp	r7, r6
  4005a6:	d808      	bhi.n	4005ba <firFilter+0x7a>
	{
		offset = 0;
  4005a8:	2200      	movs	r2, #0
  4005aa:	4b06      	ldr	r3, [pc, #24]	; (4005c4 <firFilter+0x84>)
  4005ac:	601a      	str	r2, [r3, #0]
	
	//PIOC->PIO_SODR |= PIO_PC8;
	
	return output;
	
}
  4005ae:	bcf0      	pop	{r4, r5, r6, r7}
  4005b0:	4770      	bx	lr
	float output = 0;
  4005b2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 4005cc <firFilter+0x8c>
	float *coeff = coefficients;
  4005b6:	4b02      	ldr	r3, [pc, #8]	; (4005c0 <firFilter+0x80>)
  4005b8:	e7e5      	b.n	400586 <firFilter+0x46>
	if(++offset >= N_coefficients)
  4005ba:	4b02      	ldr	r3, [pc, #8]	; (4005c4 <firFilter+0x84>)
  4005bc:	601e      	str	r6, [r3, #0]
  4005be:	e7f6      	b.n	4005ae <firFilter+0x6e>
  4005c0:	20400004 	.word	0x20400004
  4005c4:	20400848 	.word	0x20400848
  4005c8:	2040085c 	.word	0x2040085c
  4005cc:	00000000 	.word	0x00000000
  4005d0:	20400008 	.word	0x20400008

004005d4 <main>:

static volatile uint32_t updated;
static volatile uint32_t triggered;

int main(void)
{
  4005d4:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
  4005d6:	4b18      	ldr	r3, [pc, #96]	; (400638 <main+0x64>)
  4005d8:	4798      	blx	r3
	sysclk_init();
  4005da:	4b18      	ldr	r3, [pc, #96]	; (40063c <main+0x68>)
  4005dc:	4798      	blx	r3
	board_init();
  4005de:	4b18      	ldr	r3, [pc, #96]	; (400640 <main+0x6c>)
  4005e0:	4798      	blx	r3
	initTimer();
  4005e2:	4b18      	ldr	r3, [pc, #96]	; (400644 <main+0x70>)
  4005e4:	4798      	blx	r3
	
	
	afec0ch0_init(0x3);
  4005e6:	2003      	movs	r0, #3
  4005e8:	4b17      	ldr	r3, [pc, #92]	; (400648 <main+0x74>)
  4005ea:	4798      	blx	r3
	dac0ch0init();
  4005ec:	4b17      	ldr	r3, [pc, #92]	; (40064c <main+0x78>)
  4005ee:	4798      	blx	r3
 * \brief Enable FPU
 */
static inline void fpu_enable(void)
{
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4005f0:	4a17      	ldr	r2, [pc, #92]	; (400650 <main+0x7c>)
  4005f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4005f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4005fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  4005fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400602:	f3bf 8f6f 	isb	sy

	
    /* Replace with your application code */
    while (1) 
    {
		if(updated && !triggered) {
  400606:	4c13      	ldr	r4, [pc, #76]	; (400654 <main+0x80>)
			
			
			tmp2 = firFilter(tmp);
			triggered = 1;
			
			PIOC->PIO_CODR |= PIO_PC8;
  400608:	4d13      	ldr	r5, [pc, #76]	; (400658 <main+0x84>)
		if(updated && !triggered) {
  40060a:	6823      	ldr	r3, [r4, #0]
  40060c:	2b00      	cmp	r3, #0
  40060e:	d0fc      	beq.n	40060a <main+0x36>
  400610:	6863      	ldr	r3, [r4, #4]
  400612:	2b00      	cmp	r3, #0
  400614:	d1f9      	bne.n	40060a <main+0x36>
			tmp2 = firFilter(tmp);
  400616:	ed94 0a02 	vldr	s0, [r4, #8]
  40061a:	4b10      	ldr	r3, [pc, #64]	; (40065c <main+0x88>)
  40061c:	4798      	blx	r3
  40061e:	ed84 0a03 	vstr	s0, [r4, #12]
			triggered = 1;
  400622:	2301      	movs	r3, #1
  400624:	6063      	str	r3, [r4, #4]
			PIOC->PIO_CODR |= PIO_PC8;
  400626:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  400628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40062c:	636b      	str	r3, [r5, #52]	; 0x34
			
			PIOC->PIO_SODR |= PIO_PC8;
  40062e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  400630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400634:	632b      	str	r3, [r5, #48]	; 0x30
  400636:	e7e8      	b.n	40060a <main+0x36>
  400638:	00400531 	.word	0x00400531
  40063c:	00400769 	.word	0x00400769
  400640:	00400361 	.word	0x00400361
  400644:	004007d9 	.word	0x004007d9
  400648:	004001d5 	.word	0x004001d5
  40064c:	00400441 	.word	0x00400441
  400650:	e000ed00 	.word	0xe000ed00
  400654:	2040084c 	.word	0x2040084c
  400658:	400e1200 	.word	0x400e1200
  40065c:	00400541 	.word	0x00400541

00400660 <AFEC0_Handler>:
		}
	}	
}
void AFEC0_Handler(void)
{
	uint32_t status = AFEC0->AFEC_ISR;
  400660:	4b08      	ldr	r3, [pc, #32]	; (400684 <AFEC0_Handler+0x24>)
  400662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	
	if((status & AFEC_IMR_EOC0) == 1) {
  400664:	f013 0f01 	tst.w	r3, #1
  400668:	d00b      	beq.n	400682 <AFEC0_Handler+0x22>
		
		tmp = AFEC0->AFEC_CDR;
  40066a:	4b06      	ldr	r3, [pc, #24]	; (400684 <AFEC0_Handler+0x24>)
  40066c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
  400670:	eef8 7a67 	vcvt.f32.u32	s15, s15
  400674:	4b04      	ldr	r3, [pc, #16]	; (400688 <AFEC0_Handler+0x28>)
  400676:	edc3 7a02 	vstr	s15, [r3, #8]
	
		updated = 1;
  40067a:	2201      	movs	r2, #1
  40067c:	601a      	str	r2, [r3, #0]
		triggered = 0;
  40067e:	2200      	movs	r2, #0
  400680:	605a      	str	r2, [r3, #4]
  400682:	4770      	bx	lr
  400684:	4003c000 	.word	0x4003c000
  400688:	2040084c 	.word	0x2040084c

0040068c <TC0_Handler>:
	}		
}

void TC0_Handler(void) {
	
	uint32_t statusT = REG_TC0_SR0;
  40068c:	4b12      	ldr	r3, [pc, #72]	; (4006d8 <TC0_Handler+0x4c>)
  40068e:	681b      	ldr	r3, [r3, #0]
		
	if((statusT & TC_SR_CPCS) >= 1) {
  400690:	f013 0f10 	tst.w	r3, #16
  400694:	d01f      	beq.n	4006d6 <TC0_Handler+0x4a>
		
		if(updated) {
  400696:	4b11      	ldr	r3, [pc, #68]	; (4006dc <TC0_Handler+0x50>)
  400698:	681b      	ldr	r3, [r3, #0]
  40069a:	b12b      	cbz	r3, 4006a8 <TC0_Handler+0x1c>
			
			//tmp2 = firFilter(tmp);
			
			AFEC0->AFEC_CR = AFEC_CR_START;			
  40069c:	2202      	movs	r2, #2
  40069e:	4b10      	ldr	r3, [pc, #64]	; (4006e0 <TC0_Handler+0x54>)
  4006a0:	601a      	str	r2, [r3, #0]
			updated = 0;
  4006a2:	2200      	movs	r2, #0
  4006a4:	4b0d      	ldr	r3, [pc, #52]	; (4006dc <TC0_Handler+0x50>)
  4006a6:	601a      	str	r2, [r3, #0]
		}
		if( ((((DACC->DACC_ISR) & DACC_ISR_TXRDY0_Msk)) == 1) && ((DACC -> DACC_CHSR) & (0x1u << 8)) == 256 )
  4006a8:	4b0e      	ldr	r3, [pc, #56]	; (4006e4 <TC0_Handler+0x58>)
  4006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006ac:	f013 0f01 	tst.w	r3, #1
  4006b0:	d011      	beq.n	4006d6 <TC0_Handler+0x4a>
  4006b2:	4b0c      	ldr	r3, [pc, #48]	; (4006e4 <TC0_Handler+0x58>)
  4006b4:	699b      	ldr	r3, [r3, #24]
  4006b6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4006ba:	d00c      	beq.n	4006d6 <TC0_Handler+0x4a>
void TC0_Handler(void) {
  4006bc:	b082      	sub	sp, #8
		{
			DACC->DACC_CDR[0] = DACC_CDR_DATA0((uint32_t)tmp2);
  4006be:	4b07      	ldr	r3, [pc, #28]	; (4006dc <TC0_Handler+0x50>)
  4006c0:	edd3 7a03 	vldr	s15, [r3, #12]
  4006c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  4006c8:	edcd 7a01 	vstr	s15, [sp, #4]
  4006cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4006d0:	4a04      	ldr	r2, [pc, #16]	; (4006e4 <TC0_Handler+0x58>)
  4006d2:	61d3      	str	r3, [r2, #28]
				
		}
	}
	
	//PIOC->PIO_SODR |= PIO_PC8;
}
  4006d4:	b002      	add	sp, #8
  4006d6:	4770      	bx	lr
  4006d8:	4000c020 	.word	0x4000c020
  4006dc:	2040084c 	.word	0x2040084c
  4006e0:	4003c000 	.word	0x4003c000
  4006e4:	40040000 	.word	0x40040000

004006e8 <DACC_Handler>:



void DACC_Handler(void) {
  4006e8:	4770      	bx	lr
	...

004006ec <mainclk_init>:
uint32_t mainclk_init()
{
	uint16_t tmp = 0;
	
	/* Enable Main XOSC */
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  4006ec:	4910      	ldr	r1, [pc, #64]	; (400730 <mainclk_init+0x44>)
  4006ee:	6a0b      	ldr	r3, [r1, #32]
	| CKGR_MOR_KEY_PASSWD
	| CKGR_MOR_MOSCXTEN
	| CKGR_MOR_MOSCXTST(XOSC12M_STARTUP_TIME);
  4006f0:	4a10      	ldr	r2, [pc, #64]	; (400734 <mainclk_init+0x48>)
  4006f2:	401a      	ands	r2, r3
  4006f4:	4b10      	ldr	r3, [pc, #64]	; (400738 <mainclk_init+0x4c>)
  4006f6:	4313      	orrs	r3, r2
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  4006f8:	620b      	str	r3, [r1, #32]
	
	/* wait for XOSC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4006fa:	460a      	mov	r2, r1
  4006fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006fe:	f013 0f01 	tst.w	r3, #1
  400702:	d0fb      	beq.n	4006fc <mainclk_init+0x10>
	
	/* Select XOSC as Main Clock */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD
  400704:	4a0a      	ldr	r2, [pc, #40]	; (400730 <mainclk_init+0x44>)
  400706:	6a11      	ldr	r1, [r2, #32]
  400708:	4b0c      	ldr	r3, [pc, #48]	; (40073c <mainclk_init+0x50>)
  40070a:	430b      	orrs	r3, r1
  40070c:	6213      	str	r3, [r2, #32]
	| CKGR_MOR_MOSCSEL;
	
	/* wait for Main Clock to be ready */
	while(!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40070e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400710:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400714:	d0fb      	beq.n	40070e <mainclk_init+0x22>

	/* Check if Main Clock frequency is correct */
	while(!(PMC->CKGR_MCFR & CKGR_MCFR_MAINFRDY));
  400716:	4a06      	ldr	r2, [pc, #24]	; (400730 <mainclk_init+0x44>)
  400718:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40071a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40071e:	d0fb      	beq.n	400718 <mainclk_init+0x2c>
	tmp = (PMC->CKGR_MCFR & CKGR_MCFR_MAINF_Msk);
  400720:	4b03      	ldr	r3, [pc, #12]	; (400730 <mainclk_init+0x44>)
  400722:	6a58      	ldr	r0, [r3, #36]	; 0x24
	
	if(tmp == 0) return EXIT_FAILURE;
  400724:	b280      	uxth	r0, r0
	
	return EXIT_SUCCESS;
	
}
  400726:	fab0 f080 	clz	r0, r0
  40072a:	0940      	lsrs	r0, r0, #5
  40072c:	4770      	bx	lr
  40072e:	bf00      	nop
  400730:	400e0600 	.word	0x400e0600
  400734:	ffc8c1fc 	.word	0xffc8c1fc
  400738:	00373e01 	.word	0x00373e01
  40073c:	01370000 	.word	0x01370000

00400740 <pll_init>:

/* Enable the PLL (300 MHz) */
uint32_t pll_init()
{
	/* Stop PLL first */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  400740:	4b08      	ldr	r3, [pc, #32]	; (400764 <pll_init+0x24>)
  400742:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400746:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_MULA(0);
	
	/* Configure and enable PLL */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  400748:	f502 12c1 	add.w	r2, r2, #1581056	; 0x182000
  40074c:	f502 52f8 	add.w	r2, r2, #7936	; 0x1f00
  400750:	3201      	adds	r2, #1
  400752:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_DIVA_BYPASS
	| CKGR_PLLAR_MULA(((F_CPU / F_XOSC) - 1))
	| CKGR_PLLAR_PLLACOUNT(PLL_STARTUP_TIME);
	
	/* Wait for PLL lock */
	while(!(PMC->PMC_SR & PMC_SR_LOCKA));
  400754:	461a      	mov	r2, r3
  400756:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400758:	f013 0f02 	tst.w	r3, #2
  40075c:	d0fb      	beq.n	400756 <pll_init+0x16>
	
	return EXIT_SUCCESS;
}
  40075e:	2000      	movs	r0, #0
  400760:	4770      	bx	lr
  400762:	bf00      	nop
  400764:	400e0600 	.word	0x400e0600

00400768 <sysclk_init>:

uint32_t sysclk_init()
{
  400768:	b508      	push	{r3, lr}
  40076a:	4a15      	ldr	r2, [pc, #84]	; (4007c0 <sysclk_init+0x58>)
  40076c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40077c:	f3bf 8f6f 	isb	sy
	fpu_enable();
	
	/* Set flash wait state */
	EFC->EEFC_FMR = EEFC_FMR_FWS(EFC_WAIT_STATE) 
  400780:	4a10      	ldr	r2, [pc, #64]	; (4007c4 <sysclk_init+0x5c>)
  400782:	4b11      	ldr	r3, [pc, #68]	; (4007c8 <sysclk_init+0x60>)
  400784:	601a      	str	r2, [r3, #0]
	| EEFC_FMR_CLOE;
			

	mainclk_init();
  400786:	4b11      	ldr	r3, [pc, #68]	; (4007cc <sysclk_init+0x64>)
  400788:	4798      	blx	r3
	pll_init();
  40078a:	4b11      	ldr	r3, [pc, #68]	; (4007d0 <sysclk_init+0x68>)
  40078c:	4798      	blx	r3

	
	/* Select Master Clock Div */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  40078e:	4a11      	ldr	r2, [pc, #68]	; (4007d4 <sysclk_init+0x6c>)
  400790:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	| PMC_MCKR_MDIV_PCK_DIV2;
  400796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  40079a:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40079c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40079e:	f013 0f08 	tst.w	r3, #8
  4007a2:	d0fb      	beq.n	40079c <sysclk_init+0x34>
	
	/* Select PLL as Master Clock Source */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  4007a4:	4a0b      	ldr	r2, [pc, #44]	; (4007d4 <sysclk_init+0x6c>)
  4007a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007a8:	f023 0303 	bic.w	r3, r3, #3
	| PMC_MCKR_CSS_PLLA_CLK;
  4007ac:	f043 0302 	orr.w	r3, r3, #2
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  4007b0:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4007b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007b4:	f013 0f08 	tst.w	r3, #8
  4007b8:	d0fb      	beq.n	4007b2 <sysclk_init+0x4a>
	
	return EXIT_SUCCESS;
  4007ba:	2000      	movs	r0, #0
  4007bc:	bd08      	pop	{r3, pc}
  4007be:	bf00      	nop
  4007c0:	e000ed00 	.word	0xe000ed00
  4007c4:	04000600 	.word	0x04000600
  4007c8:	400e0c00 	.word	0x400e0c00
  4007cc:	004006ed 	.word	0x004006ed
  4007d0:	00400741 	.word	0x00400741
  4007d4:	400e0600 	.word	0x400e0600

004007d8 <initTimer>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007d8:	4b1b      	ldr	r3, [pc, #108]	; (400848 <initTimer+0x70>)
  4007da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  4007de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4007e2:	2120      	movs	r1, #32
  4007e4:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007e8:	601a      	str	r2, [r3, #0]
{
	NVIC_ClearPendingIRQ(TC0_IRQn);
	NVIC_SetPriority(TC0_IRQn, 1);
	NVIC_EnableIRQ(TC0_IRQn);
	
	PMC->PMC_PCR |= PMC_PCR_PID(ID_TC0);
  4007ea:	4b18      	ldr	r3, [pc, #96]	; (40084c <initTimer+0x74>)
  4007ec:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4007f0:	f042 0217 	orr.w	r2, r2, #23
  4007f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4007f8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4007fc:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400800:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//REG_PMC_PCER0 |= PMC_PCER0_PID23;
	
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2;
  400804:	f5a3 2354 	sub.w	r3, r3, #868352	; 0xd4000
  400808:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
  40080c:	681a      	ldr	r2, [r3, #0]
  40080e:	f042 0201 	orr.w	r2, r2, #1
  400812:	601a      	str	r2, [r3, #0]
	REG_TC0_IER0 |= TC_IER_CPCS_Msk;
  400814:	490e      	ldr	r1, [pc, #56]	; (400850 <initTimer+0x78>)
  400816:	680a      	ldr	r2, [r1, #0]
  400818:	f042 0210 	orr.w	r2, r2, #16
  40081c:	600a      	str	r2, [r1, #0]
	REG_TC0_CMR0 |= TC_CMR_CPCTRG_Msk;
  40081e:	681a      	ldr	r2, [r3, #0]
  400820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400824:	601a      	str	r2, [r3, #0]
	
	REG_TC0_CCR0 |= TC_CCR_CLKEN;
  400826:	3b04      	subs	r3, #4
  400828:	681a      	ldr	r2, [r3, #0]
  40082a:	f042 0201 	orr.w	r2, r2, #1
  40082e:	601a      	str	r2, [r3, #0]
	
	REG_TC0_RC0 = 187;
  400830:	21bb      	movs	r1, #187	; 0xbb
  400832:	4a08      	ldr	r2, [pc, #32]	; (400854 <initTimer+0x7c>)
  400834:	6011      	str	r1, [r2, #0]
	REG_TC0_CCR0 |= TC_CCR_CLKEN;
  400836:	681a      	ldr	r2, [r3, #0]
  400838:	f042 0201 	orr.w	r2, r2, #1
  40083c:	601a      	str	r2, [r3, #0]
	REG_TC0_CCR0 |= TC_CCR_SWTRG;
  40083e:	681a      	ldr	r2, [r3, #0]
  400840:	f042 0204 	orr.w	r2, r2, #4
  400844:	601a      	str	r2, [r3, #0]
  400846:	4770      	bx	lr
  400848:	e000e100 	.word	0xe000e100
  40084c:	400e0600 	.word	0x400e0600
  400850:	4000c024 	.word	0x4000c024
  400854:	4000c01c 	.word	0x4000c01c

00400858 <__libc_init_array>:
  400858:	b570      	push	{r4, r5, r6, lr}
  40085a:	4e0f      	ldr	r6, [pc, #60]	; (400898 <__libc_init_array+0x40>)
  40085c:	4d0f      	ldr	r5, [pc, #60]	; (40089c <__libc_init_array+0x44>)
  40085e:	1b76      	subs	r6, r6, r5
  400860:	10b6      	asrs	r6, r6, #2
  400862:	bf18      	it	ne
  400864:	2400      	movne	r4, #0
  400866:	d005      	beq.n	400874 <__libc_init_array+0x1c>
  400868:	3401      	adds	r4, #1
  40086a:	f855 3b04 	ldr.w	r3, [r5], #4
  40086e:	4798      	blx	r3
  400870:	42a6      	cmp	r6, r4
  400872:	d1f9      	bne.n	400868 <__libc_init_array+0x10>
  400874:	4e0a      	ldr	r6, [pc, #40]	; (4008a0 <__libc_init_array+0x48>)
  400876:	4d0b      	ldr	r5, [pc, #44]	; (4008a4 <__libc_init_array+0x4c>)
  400878:	1b76      	subs	r6, r6, r5
  40087a:	f000 f8a7 	bl	4009cc <_init>
  40087e:	10b6      	asrs	r6, r6, #2
  400880:	bf18      	it	ne
  400882:	2400      	movne	r4, #0
  400884:	d006      	beq.n	400894 <__libc_init_array+0x3c>
  400886:	3401      	adds	r4, #1
  400888:	f855 3b04 	ldr.w	r3, [r5], #4
  40088c:	4798      	blx	r3
  40088e:	42a6      	cmp	r6, r4
  400890:	d1f9      	bne.n	400886 <__libc_init_array+0x2e>
  400892:	bd70      	pop	{r4, r5, r6, pc}
  400894:	bd70      	pop	{r4, r5, r6, pc}
  400896:	bf00      	nop
  400898:	004009d8 	.word	0x004009d8
  40089c:	004009d8 	.word	0x004009d8
  4008a0:	004009e0 	.word	0x004009e0
  4008a4:	004009d8 	.word	0x004009d8

004008a8 <register_fini>:
  4008a8:	4b02      	ldr	r3, [pc, #8]	; (4008b4 <register_fini+0xc>)
  4008aa:	b113      	cbz	r3, 4008b2 <register_fini+0xa>
  4008ac:	4802      	ldr	r0, [pc, #8]	; (4008b8 <register_fini+0x10>)
  4008ae:	f000 b805 	b.w	4008bc <atexit>
  4008b2:	4770      	bx	lr
  4008b4:	00000000 	.word	0x00000000
  4008b8:	004008c9 	.word	0x004008c9

004008bc <atexit>:
  4008bc:	2300      	movs	r3, #0
  4008be:	4601      	mov	r1, r0
  4008c0:	461a      	mov	r2, r3
  4008c2:	4618      	mov	r0, r3
  4008c4:	f000 b81e 	b.w	400904 <__register_exitproc>

004008c8 <__libc_fini_array>:
  4008c8:	b538      	push	{r3, r4, r5, lr}
  4008ca:	4c0a      	ldr	r4, [pc, #40]	; (4008f4 <__libc_fini_array+0x2c>)
  4008cc:	4d0a      	ldr	r5, [pc, #40]	; (4008f8 <__libc_fini_array+0x30>)
  4008ce:	1b64      	subs	r4, r4, r5
  4008d0:	10a4      	asrs	r4, r4, #2
  4008d2:	d00a      	beq.n	4008ea <__libc_fini_array+0x22>
  4008d4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4008d8:	3b01      	subs	r3, #1
  4008da:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4008de:	3c01      	subs	r4, #1
  4008e0:	f855 3904 	ldr.w	r3, [r5], #-4
  4008e4:	4798      	blx	r3
  4008e6:	2c00      	cmp	r4, #0
  4008e8:	d1f9      	bne.n	4008de <__libc_fini_array+0x16>
  4008ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4008ee:	f000 b877 	b.w	4009e0 <_fini>
  4008f2:	bf00      	nop
  4008f4:	004009f0 	.word	0x004009f0
  4008f8:	004009ec 	.word	0x004009ec

004008fc <__retarget_lock_acquire_recursive>:
  4008fc:	4770      	bx	lr
  4008fe:	bf00      	nop

00400900 <__retarget_lock_release_recursive>:
  400900:	4770      	bx	lr
  400902:	bf00      	nop

00400904 <__register_exitproc>:
  400904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400908:	4d2c      	ldr	r5, [pc, #176]	; (4009bc <__register_exitproc+0xb8>)
  40090a:	4606      	mov	r6, r0
  40090c:	6828      	ldr	r0, [r5, #0]
  40090e:	4698      	mov	r8, r3
  400910:	460f      	mov	r7, r1
  400912:	4691      	mov	r9, r2
  400914:	f7ff fff2 	bl	4008fc <__retarget_lock_acquire_recursive>
  400918:	4b29      	ldr	r3, [pc, #164]	; (4009c0 <__register_exitproc+0xbc>)
  40091a:	681c      	ldr	r4, [r3, #0]
  40091c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400920:	2b00      	cmp	r3, #0
  400922:	d03e      	beq.n	4009a2 <__register_exitproc+0x9e>
  400924:	685a      	ldr	r2, [r3, #4]
  400926:	2a1f      	cmp	r2, #31
  400928:	dc1c      	bgt.n	400964 <__register_exitproc+0x60>
  40092a:	f102 0e01 	add.w	lr, r2, #1
  40092e:	b176      	cbz	r6, 40094e <__register_exitproc+0x4a>
  400930:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400934:	2401      	movs	r4, #1
  400936:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40093a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40093e:	4094      	lsls	r4, r2
  400940:	4320      	orrs	r0, r4
  400942:	2e02      	cmp	r6, #2
  400944:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400948:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40094c:	d023      	beq.n	400996 <__register_exitproc+0x92>
  40094e:	3202      	adds	r2, #2
  400950:	f8c3 e004 	str.w	lr, [r3, #4]
  400954:	6828      	ldr	r0, [r5, #0]
  400956:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40095a:	f7ff ffd1 	bl	400900 <__retarget_lock_release_recursive>
  40095e:	2000      	movs	r0, #0
  400960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400964:	4b17      	ldr	r3, [pc, #92]	; (4009c4 <__register_exitproc+0xc0>)
  400966:	b30b      	cbz	r3, 4009ac <__register_exitproc+0xa8>
  400968:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40096c:	f3af 8000 	nop.w
  400970:	4603      	mov	r3, r0
  400972:	b1d8      	cbz	r0, 4009ac <__register_exitproc+0xa8>
  400974:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400978:	6002      	str	r2, [r0, #0]
  40097a:	2100      	movs	r1, #0
  40097c:	6041      	str	r1, [r0, #4]
  40097e:	460a      	mov	r2, r1
  400980:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400984:	f04f 0e01 	mov.w	lr, #1
  400988:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40098c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400990:	2e00      	cmp	r6, #0
  400992:	d0dc      	beq.n	40094e <__register_exitproc+0x4a>
  400994:	e7cc      	b.n	400930 <__register_exitproc+0x2c>
  400996:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40099a:	430c      	orrs	r4, r1
  40099c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4009a0:	e7d5      	b.n	40094e <__register_exitproc+0x4a>
  4009a2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4009a6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4009aa:	e7bb      	b.n	400924 <__register_exitproc+0x20>
  4009ac:	6828      	ldr	r0, [r5, #0]
  4009ae:	f7ff ffa7 	bl	400900 <__retarget_lock_release_recursive>
  4009b2:	f04f 30ff 	mov.w	r0, #4294967295
  4009b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009ba:	bf00      	nop
  4009bc:	20400828 	.word	0x20400828
  4009c0:	004009c8 	.word	0x004009c8
  4009c4:	00000000 	.word	0x00000000

004009c8 <_global_impure_ptr>:
  4009c8:	20400400                                ..@ 

004009cc <_init>:
  4009cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009ce:	bf00      	nop
  4009d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4009d2:	bc08      	pop	{r3}
  4009d4:	469e      	mov	lr, r3
  4009d6:	4770      	bx	lr

004009d8 <__init_array_start>:
  4009d8:	004008a9 	.word	0x004008a9

004009dc <__frame_dummy_init_array_entry>:
  4009dc:	0040018d                                ..@.

004009e0 <_fini>:
  4009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009e2:	bf00      	nop
  4009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4009e6:	bc08      	pop	{r3}
  4009e8:	469e      	mov	lr, r3
  4009ea:	4770      	bx	lr

004009ec <__fini_array_start>:
  4009ec:	00400169 	.word	0x00400169
