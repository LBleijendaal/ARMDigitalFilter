
DigitalFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f48  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20400000  00400f48  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000120  20400434  0040137c  00020434  2**2
                  ALLOC
  3 .heap         00000204  20400554  0040149c  00020434  2**0
                  ALLOC
  4 .stack        00000400  20400758  004016a0  00020434  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000887f  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001096  00000000  00000000  00028d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fe  00000000  00000000  00029dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000160  00000000  00000000  0002a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0002a22a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000377a5  00000000  00000000  0002a2fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000517e  00000000  00000000  00061a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001323dd  00000000  00000000  00066c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000458  00000000  00000000  00198ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	58 0b 40 20 a9 04 40 00 a5 04 40 00 a5 04 40 00     X.@ ..@...@...@.
  400010:	a5 04 40 00 a5 04 40 00 a5 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a5 04 40 00 a5 04 40 00 00 00 00 00 a5 04 40 00     ..@...@.......@.
  40003c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40004c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40005c:	a5 04 40 00 a5 04 40 00 00 00 00 00 a5 04 40 00     ..@...@.......@.
  40006c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40007c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40008c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40009c:	49 06 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     I.@...@...@...@.
  4000ac:	a5 04 40 00 a5 04 40 00 c5 05 40 00 75 06 40 00     ..@...@...@.u.@.
  4000bc:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  4000cc:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  4000dc:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  4000ec:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  4000fc:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40010c:	a5 04 40 00 a5 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ......@...@...@.
  40012c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40013c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40014c:	a5 04 40 00 a5 04 40 00 a5 04 40 00 a5 04 40 00     ..@...@...@...@.
  40015c:	a5 04 40 00 a5 04 40 00 a5 04 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400434 	.word	0x20400434
  400184:	00000000 	.word	0x00000000
  400188:	00400f48 	.word	0x00400f48

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00400f48 	.word	0x00400f48
  4001c8:	20400438 	.word	0x20400438
  4001cc:	00400f48 	.word	0x00400f48
  4001d0:	00000000 	.word	0x00000000

004001d4 <afec0ch0_init>:
#include "afec.h"
#include <stdlib.h>


void afec0ch0_init(uint32_t prescaler)
{
  4001d4:	b410      	push	{r4}
	/* Enable AFEC0 peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_AFEC0);
  4001d6:	4b16      	ldr	r3, [pc, #88]	; (400230 <afec0ch0_init+0x5c>)
  4001d8:	221d      	movs	r2, #29
  4001da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  4001de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4001e2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  4001e6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the AFEC module */
	AFEC0->AFEC_CR = AFEC_CR_SWRST;
  4001ea:	4b12      	ldr	r3, [pc, #72]	; (400234 <afec0ch0_init+0x60>)
  4001ec:	2201      	movs	r2, #1
  4001ee:	601a      	str	r2, [r3, #0]
	
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f0:	0200      	lsls	r0, r0, #8
  4001f2:	b280      	uxth	r0, r0
	| AFEC_MR_ONE 
	| AFEC_MR_TRANSFER(0x02) 											// Set to 2 to optimize transfer time.
	| AFEC_MR_STARTUP_SUT64												// Start Up Time is 64 periods AFEC clock.
	| AFEC_MR_TRACKTIM(0xF);											// Inherent tracking time is always 15 AFE clock cycles. Do not modify this field.
  4001f4:	4910      	ldr	r1, [pc, #64]	; (400238 <afec0ch0_init+0x64>)
  4001f6:	4301      	orrs	r1, r0
	AFEC0->AFEC_MR = AFEC_MR_PRESCAL(prescaler) 
  4001f8:	6059      	str	r1, [r3, #4]
	
	AFEC0->AFEC_EMR = AFEC_EMR_RES_NO_AVERAGE									// 12-bit resolution, AFE sample rate is maximum (no averaging).	
  4001fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4001fe:	6099      	str	r1, [r3, #8]
	| AFEC_EMR_STM														// Only a single trigger is required to get an averaged value.
	| AFEC_EMR_SIGNMODE_SE_UNSG_DF_SIGN;								// Single-Ended channels: unsigned conversions. Differential channels: signed conversions.
	
	AFEC0->AFEC_ACR = AFEC_ACR_IBCTL(0x03) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  400200:	f44f 7143 	mov.w	r1, #780	; 0x30c
  400204:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	//AFEC0->AFEC_MR |= AFEC_MR_TRGEN;									// Enable Hardware Trigger
	/*
	 * The field AOFF must be configured to 512 (mid scale of the DAC) when there is no offset error to
	 * compensate.
	 */
	AFEC0->AFEC_CSELR = AFEC_CSELR_CSEL(AFEC0_CH0);
  400208:	2100      	movs	r1, #0
  40020a:	6659      	str	r1, [r3, #100]	; 0x64
	AFEC0->AFEC_COCR = AFEC_COCR_AOFF(0x200);
  40020c:	f44f 7100 	mov.w	r1, #512	; 0x200
  400210:	66d9      	str	r1, [r3, #108]	; 0x6c
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400212:	490a      	ldr	r1, [pc, #40]	; (40023c <afec0ch0_init+0x68>)
  400214:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
  400218:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40021c:	2420      	movs	r4, #32
  40021e:	f881 431d 	strb.w	r4, [r1, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400222:	6008      	str	r0, [r1, #0]
	/* Enable end of conversion interrupt for channel 0 */
	
	NVIC_ClearPendingIRQ(AFEC0_IRQn);
	NVIC_SetPriority(AFEC0_IRQn, 1);
	NVIC_EnableIRQ(AFEC0_IRQn);
	AFEC0->AFEC_IER = AFEC_IER_EOC0;
  400224:	625a      	str	r2, [r3, #36]	; 0x24
	
	
	/* Enable Channel 0 for AFEC0 */
	AFEC0->AFEC_CHER = AFEC_CHER_CH0;
  400226:	615a      	str	r2, [r3, #20]
	
	AFEC0->AFEC_CR = AFEC_CR_START;
  400228:	2202      	movs	r2, #2
  40022a:	601a      	str	r2, [r3, #0]
}
  40022c:	bc10      	pop	{r4}
  40022e:	4770      	bx	lr
  400230:	400e0600 	.word	0x400e0600
  400234:	4003c000 	.word	0x4003c000
  400238:	2f840000 	.word	0x2f840000
  40023c:	e000e100 	.word	0xe000e100

00400240 <ioport_init>:


void ioport_init()
{
	/* Initialize IOPORTs */
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOA);
  400240:	4b45      	ldr	r3, [pc, #276]	; (400358 <ioport_init+0x118>)
  400242:	220a      	movs	r2, #10
  400244:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400248:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40024c:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400250:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOB);
  400254:	220b      	movs	r2, #11
  400256:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40025a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40025e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400262:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOC);
  400266:	220c      	movs	r2, #12
  400268:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40026c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400270:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400274:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOD);
  400278:	2210      	movs	r2, #16
  40027a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  40027e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400282:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400286:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	PMC->PMC_PCR = PMC_PCR_PID(ID_PIOE);
  40028a:	2211      	movs	r2, #17
  40028c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400290:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400294:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  400298:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	PIOC->PIO_OER |= PIO_PC8;
  40029c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  4002a0:	691a      	ldr	r2, [r3, #16]
  4002a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002a6:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC8;
  4002a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC8;
  4002b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  4002ba:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_OER |= PIO_PC10;
  4002bc:	691a      	ldr	r2, [r3, #16]
  4002be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002c2:	611a      	str	r2, [r3, #16]
	PIOC->PIO_OWER |= PIO_PC10;
  4002c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_CODR |= PIO_PC10;
  4002d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  4002d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  4002d6:	635a      	str	r2, [r3, #52]	; 0x34

	

	
	/* Configure Push Button pins */
	PIOA->PIO_ODR |= PIO_PA11;
  4002d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4002dc:	695a      	ldr	r2, [r3, #20]
  4002de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002e2:	615a      	str	r2, [r3, #20]
	PIOA->PIO_OWER |= PIO_PA11;
  4002e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  4002e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOA->PIO_PUER |= PIO_PA11;
  4002f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  4002f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4002f6:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PPDDR |= PIO_PA11;
  4002f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
  4002fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	PIOA->PIO_MDDR |= PIO_PA11;
  400304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  400306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40030a:	655a      	str	r2, [r3, #84]	; 0x54
	PIOA->PIO_IFER |= PIO_PA11;
  40030c:	6a1a      	ldr	r2, [r3, #32]
  40030e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400312:	621a      	str	r2, [r3, #32]
	PIOA->PIO_IFSCER |= PIO_PA11;
  400314:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
  400318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40031c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	PIOA->PIO_ABCDSR[0] &= ~(PIO_PA11);
  400320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  400326:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABCDSR[1] &= ~(PIO_PA11);
  400328:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40032a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
  40032e:	675a      	str	r2, [r3, #116]	; 0x74
	PIOA->PIO_ESR |= PIO_PA11;
  400330:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
  400334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400338:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	PIOA->PIO_REHLSR |= PIO_PA11;
  40033c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  400340:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400344:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	PIOA->PIO_AIMER |= PIO_PA11;
  400348:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
  40034c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400350:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400354:	4770      	bx	lr
  400356:	bf00      	nop
  400358:	400e0600 	.word	0x400e0600

0040035c <board_init>:
}

void board_init()
{
  40035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Disable Watchdog */
	WDT->WDT_MR |= WDT_MR_WDDIS;
  40035e:	4a32      	ldr	r2, [pc, #200]	; (400428 <board_init+0xcc>)
  400360:	6853      	ldr	r3, [r2, #4]
  400362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400366:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400368:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400370:	4b2e      	ldr	r3, [pc, #184]	; (40042c <board_init+0xd0>)
  400372:	2100      	movs	r1, #0
  400374:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  400378:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40037c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  400380:	695a      	ldr	r2, [r3, #20]
  400382:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400386:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400390:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400394:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400398:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40039c:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4003a0:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  4003a4:	016e      	lsls	r6, r5, #5
  4003a6:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4003aa:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  4003ae:	461c      	mov	r4, r3
  4003b0:	ea06 000e 	and.w	r0, r6, lr
  4003b4:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  4003b6:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  4003b8:	ea42 0100 	orr.w	r1, r2, r0
  4003bc:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  4003c0:	3b01      	subs	r3, #1
  4003c2:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  4003c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4003ca:	d1f5      	bne.n	4003b8 <board_init+0x5c>
    } while(sets-- != 0U);
  4003cc:	3d01      	subs	r5, #1
  4003ce:	3e20      	subs	r6, #32
  4003d0:	f1b5 3fff 	cmp.w	r5, #4294967295
  4003d4:	d1ec      	bne.n	4003b0 <board_init+0x54>
  4003d6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  4003da:	4b14      	ldr	r3, [pc, #80]	; (40042c <board_init+0xd0>)
  4003dc:	695a      	ldr	r2, [r3, #20]
  4003de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4003e2:	615a      	str	r2, [r3, #20]
  4003e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003e8:	f3bf 8f6f 	isb	sy
	/* Enabling the Cache */
	SCB_EnableICache();
	SCB_EnableDCache();
	
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003ec:	4a10      	ldr	r2, [pc, #64]	; (400430 <board_init+0xd4>)
  4003ee:	4911      	ldr	r1, [pc, #68]	; (400434 <board_init+0xd8>)
  4003f0:	6051      	str	r1, [r2, #4]
	| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB
  4003f2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4003f6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  4003f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4003fc:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400400:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400404:	f022 0201 	bic.w	r2, r2, #1
  400408:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40040c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400410:	f022 0201 	bic.w	r2, r2, #1
  400414:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400418:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40041c:	f3bf 8f6f 	isb	sy
	| EEFC_FCR_FARG(7));
	
	tcm_disable();
	
	ioport_init();
  400420:	4b05      	ldr	r3, [pc, #20]	; (400438 <board_init+0xdc>)
  400422:	4798      	blx	r3
  400424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400426:	bf00      	nop
  400428:	400e1850 	.word	0x400e1850
  40042c:	e000ed00 	.word	0xe000ed00
  400430:	400e0c00 	.word	0x400e0c00
  400434:	5a00080c 	.word	0x5a00080c
  400438:	00400241 	.word	0x00400241

0040043c <dac0ch0init>:
#include "sam.h"

void dac0ch0init(void) 
{
	/* Enable DACC peripheral's clock. */
	PMC->PMC_PCR = PMC_PCR_PID(ID_DACC);
  40043c:	4b16      	ldr	r3, [pc, #88]	; (400498 <dac0ch0init+0x5c>)
  40043e:	221e      	movs	r2, #30
  400440:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400444:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400448:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40044c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	
	/* Reset and configure the DACC module */
	DACC->DACC_CR = DACC_CR_SWRST;
  400450:	4b12      	ldr	r3, [pc, #72]	; (40049c <dac0ch0init+0x60>)
  400452:	2101      	movs	r1, #1
  400454:	6019      	str	r1, [r3, #0]
	
	DACC->DACC_WPMR |= DACC_WPMR_WPKEY_PASSWD;
  400456:	f8d3 00e4 	ldr.w	r0, [r3, #228]	; 0xe4
  40045a:	4a11      	ldr	r2, [pc, #68]	; (4004a0 <dac0ch0init+0x64>)
  40045c:	4302      	orrs	r2, r0
  40045e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC->DACC_WPMR |= (0x00 << 0);
  400462:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
  400466:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	DACC->DACC_MR |= DACC_MR_PRESCALER(0xF)
  40046a:	685a      	ldr	r2, [r3, #4]
  40046c:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
  400470:	605a      	str	r2, [r3, #4]
	| DACC_MR_WORD_DISABLED
	| DACC_MR_MAXS0_TRIG_EVENT 
	| DACC_MR_MAXS1_TRIG_EVENT;
	
	
	DACC->DACC_TRIGR |= DACC_TRIGR_TRGEN0_DIS;
  400472:	689a      	ldr	r2, [r3, #8]
  400474:	609a      	str	r2, [r3, #8]
	
	DACC->DACC_ACR |= DACC_ACR_IBCTLCH0(3);
  400476:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
  40047a:	f042 0203 	orr.w	r2, r2, #3
  40047e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	//NVIC_ClearPendingIRQ(DACC_IRQn);
	//NVIC_SetPriority(DACC_IRQn, 1);
	//NVIC_EnableIRQ(DACC_IRQn);
	
	uint32_t daccStatus = DACC->DACC_CHSR;
  400482:	699a      	ldr	r2, [r3, #24]
	
	DACC->DACC_CHER = DACC_CHER_CH0_Msk;
  400484:	6119      	str	r1, [r3, #16]
	
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  400486:	f412 7f80 	tst.w	r2, #256	; 0x100
  40048a:	d104      	bne.n	400496 <dac0ch0init+0x5a>
		daccStatus = DACC->DACC_CHSR;
  40048c:	461a      	mov	r2, r3
  40048e:	6993      	ldr	r3, [r2, #24]
	while((daccStatus & DACC_CHSR_DACRDY0_Msk) == 0) {
  400490:	f413 7f80 	tst.w	r3, #256	; 0x100
  400494:	d0fb      	beq.n	40048e <dac0ch0init+0x52>
  400496:	4770      	bx	lr
  400498:	400e0600 	.word	0x400e0600
  40049c:	40040000 	.word	0x40040000
  4004a0:	44414300 	.word	0x44414300

004004a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004a4:	e7fe      	b.n	4004a4 <Dummy_Handler>
	...

004004a8 <Reset_Handler>:
{
  4004a8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4004aa:	4b17      	ldr	r3, [pc, #92]	; (400508 <Reset_Handler+0x60>)
  4004ac:	4a17      	ldr	r2, [pc, #92]	; (40050c <Reset_Handler+0x64>)
  4004ae:	429a      	cmp	r2, r3
  4004b0:	d010      	beq.n	4004d4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4004b2:	4b17      	ldr	r3, [pc, #92]	; (400510 <Reset_Handler+0x68>)
  4004b4:	4a14      	ldr	r2, [pc, #80]	; (400508 <Reset_Handler+0x60>)
  4004b6:	429a      	cmp	r2, r3
  4004b8:	d20c      	bcs.n	4004d4 <Reset_Handler+0x2c>
  4004ba:	3b01      	subs	r3, #1
  4004bc:	1a9b      	subs	r3, r3, r2
  4004be:	f023 0303 	bic.w	r3, r3, #3
  4004c2:	3304      	adds	r3, #4
  4004c4:	4413      	add	r3, r2
  4004c6:	4911      	ldr	r1, [pc, #68]	; (40050c <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4004c8:	f851 0b04 	ldr.w	r0, [r1], #4
  4004cc:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4004d0:	429a      	cmp	r2, r3
  4004d2:	d1f9      	bne.n	4004c8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4004d4:	4b0f      	ldr	r3, [pc, #60]	; (400514 <Reset_Handler+0x6c>)
  4004d6:	4a10      	ldr	r2, [pc, #64]	; (400518 <Reset_Handler+0x70>)
  4004d8:	429a      	cmp	r2, r3
  4004da:	d20a      	bcs.n	4004f2 <Reset_Handler+0x4a>
  4004dc:	3b01      	subs	r3, #1
  4004de:	1a9b      	subs	r3, r3, r2
  4004e0:	f023 0303 	bic.w	r3, r3, #3
  4004e4:	3304      	adds	r3, #4
  4004e6:	4413      	add	r3, r2
                *pDest++ = 0;
  4004e8:	2100      	movs	r1, #0
  4004ea:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4004ee:	4293      	cmp	r3, r2
  4004f0:	d1fb      	bne.n	4004ea <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004f2:	4a0a      	ldr	r2, [pc, #40]	; (40051c <Reset_Handler+0x74>)
  4004f4:	4b0a      	ldr	r3, [pc, #40]	; (400520 <Reset_Handler+0x78>)
  4004f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004fa:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  4004fc:	4b09      	ldr	r3, [pc, #36]	; (400524 <Reset_Handler+0x7c>)
  4004fe:	4798      	blx	r3
        main();
  400500:	4b09      	ldr	r3, [pc, #36]	; (400528 <Reset_Handler+0x80>)
  400502:	4798      	blx	r3
  400504:	e7fe      	b.n	400504 <Reset_Handler+0x5c>
  400506:	bf00      	nop
  400508:	20400000 	.word	0x20400000
  40050c:	00400f48 	.word	0x00400f48
  400510:	20400434 	.word	0x20400434
  400514:	20400554 	.word	0x20400554
  400518:	20400434 	.word	0x20400434
  40051c:	e000ed00 	.word	0xe000ed00
  400520:	00400000 	.word	0x00400000
  400524:	00400ce1 	.word	0x00400ce1
  400528:	0040058d 	.word	0x0040058d

0040052c <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
    // Keep the default device state after reset
    SystemCoreClock = __SYSTEM_CLOCK;
  40052c:	4a01      	ldr	r2, [pc, #4]	; (400534 <SystemInit+0x8>)
  40052e:	4b02      	ldr	r3, [pc, #8]	; (400538 <SystemInit+0xc>)
  400530:	601a      	str	r2, [r3, #0]
  400532:	4770      	bx	lr
  400534:	00b71b00 	.word	0x00b71b00
  400538:	20400000 	.word	0x20400000

0040053c <firFilter>:
static float buffer[51];
static uint32_t offset;


float firFilter(float input)
{
  40053c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400540:	490e      	ldr	r1, [pc, #56]	; (40057c <firFilter+0x40>)
  400542:	f101 07c8 	add.w	r7, r1, #200	; 0xc8
  400546:	463b      	mov	r3, r7
	float output;
	
	for(int i = (N_coefficients - 1); i > 0; i--) {
		buffer[i] = buffer[i-1];
  400548:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40054c:	605a      	str	r2, [r3, #4]
	for(int i = (N_coefficients - 1); i > 0; i--) {
  40054e:	428b      	cmp	r3, r1
  400550:	d1fa      	bne.n	400548 <firFilter+0xc>
	}
	
	buffer[0] = input;
  400552:	4c0a      	ldr	r4, [pc, #40]	; (40057c <firFilter+0x40>)
  400554:	f844 0904 	str.w	r0, [r4], #-4
  400558:	4e09      	ldr	r6, [pc, #36]	; (400580 <firFilter+0x44>)
	
	for(int i = 0; i < N_coefficients; i++) {
		output += buffer[i] * coefficients[i];
  40055a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 400588 <firFilter+0x4c>
  40055e:	4d09      	ldr	r5, [pc, #36]	; (400584 <firFilter+0x48>)
  400560:	f856 1f04 	ldr.w	r1, [r6, #4]!
  400564:	f854 0f04 	ldr.w	r0, [r4, #4]!
  400568:	47c8      	blx	r9
  40056a:	4601      	mov	r1, r0
  40056c:	4640      	mov	r0, r8
  40056e:	47a8      	blx	r5
  400570:	4680      	mov	r8, r0
	for(int i = 0; i < N_coefficients; i++) {
  400572:	42bc      	cmp	r4, r7
  400574:	d1f4      	bne.n	400560 <firFilter+0x24>
	}
	
	return output;
}
  400576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40057a:	bf00      	nop
  40057c:	20400450 	.word	0x20400450
  400580:	00400e4c 	.word	0x00400e4c
  400584:	004007f1 	.word	0x004007f1
  400588:	00400a01 	.word	0x00400a01

0040058c <main>:
static volatile uint32_t triggered;

void fillFIFO(void);

int main(void)
{
  40058c:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
  40058e:	4b07      	ldr	r3, [pc, #28]	; (4005ac <main+0x20>)
  400590:	4798      	blx	r3
	sysclk_init();
  400592:	4b07      	ldr	r3, [pc, #28]	; (4005b0 <main+0x24>)
  400594:	4798      	blx	r3
	board_init();
  400596:	4b07      	ldr	r3, [pc, #28]	; (4005b4 <main+0x28>)
  400598:	4798      	blx	r3
	initTimer();
  40059a:	4b07      	ldr	r3, [pc, #28]	; (4005b8 <main+0x2c>)
  40059c:	4798      	blx	r3
	
	
	afec0ch0_init(0x3);
  40059e:	2003      	movs	r0, #3
  4005a0:	4b06      	ldr	r3, [pc, #24]	; (4005bc <main+0x30>)
  4005a2:	4798      	blx	r3
	dac0ch0init();
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <main+0x34>)
  4005a6:	4798      	blx	r3

	
    /* Replace with your application code */
    while (1) 
    {
		asm volatile ("nop");
  4005a8:	bf00      	nop
  4005aa:	e7fd      	b.n	4005a8 <main+0x1c>
  4005ac:	0040052d 	.word	0x0040052d
  4005b0:	004006f5 	.word	0x004006f5
  4005b4:	0040035d 	.word	0x0040035d
  4005b8:	00400765 	.word	0x00400765
  4005bc:	004001d5 	.word	0x004001d5
  4005c0:	0040043d 	.word	0x0040043d

004005c4 <AFEC0_Handler>:
	}	
}
void AFEC0_Handler(void)
{
  4005c4:	b508      	push	{r3, lr}
	uint32_t status = AFEC0->AFEC_ISR;
  4005c6:	4b17      	ldr	r3, [pc, #92]	; (400624 <AFEC0_Handler+0x60>)
  4005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	
	if((status & AFEC_IMR_EOC0) == 1) {
  4005ca:	f013 0f01 	tst.w	r3, #1
  4005ce:	d105      	bne.n	4005dc <AFEC0_Handler+0x18>
		{
			DACC->DACC_CDR[0] = DACC_CDR_DATA0((uint32_t)tmp);
			
		}
	}
	PIOC->PIO_SODR |= PIO_PC8;
  4005d0:	4a15      	ldr	r2, [pc, #84]	; (400628 <AFEC0_Handler+0x64>)
  4005d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4005d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4005d8:	6313      	str	r3, [r2, #48]	; 0x30
  4005da:	bd08      	pop	{r3, pc}
		tmp = AFEC0->AFEC_CDR;
  4005dc:	4b11      	ldr	r3, [pc, #68]	; (400624 <AFEC0_Handler+0x60>)
  4005de:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4005e0:	4b12      	ldr	r3, [pc, #72]	; (40062c <AFEC0_Handler+0x68>)
  4005e2:	4798      	blx	r3
  4005e4:	4b12      	ldr	r3, [pc, #72]	; (400630 <AFEC0_Handler+0x6c>)
  4005e6:	6018      	str	r0, [r3, #0]
		tmp2 = firFilter(tmp);
  4005e8:	4b12      	ldr	r3, [pc, #72]	; (400634 <AFEC0_Handler+0x70>)
  4005ea:	4798      	blx	r3
  4005ec:	4b12      	ldr	r3, [pc, #72]	; (400638 <AFEC0_Handler+0x74>)
  4005ee:	6018      	str	r0, [r3, #0]
		updated = 1;
  4005f0:	2201      	movs	r2, #1
  4005f2:	4b12      	ldr	r3, [pc, #72]	; (40063c <AFEC0_Handler+0x78>)
  4005f4:	601a      	str	r2, [r3, #0]
		PIOC->PIO_CODR |= PIO_PC8;
  4005f6:	4a0c      	ldr	r2, [pc, #48]	; (400628 <AFEC0_Handler+0x64>)
  4005f8:	6b53      	ldr	r3, [r2, #52]	; 0x34
  4005fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4005fe:	6353      	str	r3, [r2, #52]	; 0x34
		if( ((((DACC->DACC_ISR) & DACC_ISR_TXRDY0_Msk)) == 1) && ((DACC -> DACC_CHSR) & (0x1u << 8)) == 256 ) 
  400600:	4b0f      	ldr	r3, [pc, #60]	; (400640 <AFEC0_Handler+0x7c>)
  400602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400604:	f013 0f01 	tst.w	r3, #1
  400608:	d0e2      	beq.n	4005d0 <AFEC0_Handler+0xc>
  40060a:	4b0d      	ldr	r3, [pc, #52]	; (400640 <AFEC0_Handler+0x7c>)
  40060c:	699b      	ldr	r3, [r3, #24]
  40060e:	f413 7f80 	tst.w	r3, #256	; 0x100
  400612:	d0dd      	beq.n	4005d0 <AFEC0_Handler+0xc>
			DACC->DACC_CDR[0] = DACC_CDR_DATA0((uint32_t)tmp);
  400614:	4b06      	ldr	r3, [pc, #24]	; (400630 <AFEC0_Handler+0x6c>)
  400616:	6818      	ldr	r0, [r3, #0]
  400618:	4b0a      	ldr	r3, [pc, #40]	; (400644 <AFEC0_Handler+0x80>)
  40061a:	4798      	blx	r3
  40061c:	b280      	uxth	r0, r0
  40061e:	4b08      	ldr	r3, [pc, #32]	; (400640 <AFEC0_Handler+0x7c>)
  400620:	61d8      	str	r0, [r3, #28]
  400622:	e7d5      	b.n	4005d0 <AFEC0_Handler+0xc>
  400624:	4003c000 	.word	0x4003c000
  400628:	400e1200 	.word	0x400e1200
  40062c:	00400951 	.word	0x00400951
  400630:	20400528 	.word	0x20400528
  400634:	0040053d 	.word	0x0040053d
  400638:	2040052c 	.word	0x2040052c
  40063c:	2040051c 	.word	0x2040051c
  400640:	40040000 	.word	0x40040000
  400644:	00400ca1 	.word	0x00400ca1

00400648 <TC0_Handler>:
}

void TC0_Handler(void) {
	
	uint32_t statusT = REG_TC0_SR0;
  400648:	4b07      	ldr	r3, [pc, #28]	; (400668 <TC0_Handler+0x20>)
  40064a:	681b      	ldr	r3, [r3, #0]
		
	if((statusT & TC_SR_CPCS) >= 1) {
  40064c:	f013 0f10 	tst.w	r3, #16
  400650:	d008      	beq.n	400664 <TC0_Handler+0x1c>
		
		if(updated) {
  400652:	4b06      	ldr	r3, [pc, #24]	; (40066c <TC0_Handler+0x24>)
  400654:	681b      	ldr	r3, [r3, #0]
  400656:	b12b      	cbz	r3, 400664 <TC0_Handler+0x1c>
			AFEC0->AFEC_CR = AFEC_CR_START;
  400658:	2202      	movs	r2, #2
  40065a:	4b05      	ldr	r3, [pc, #20]	; (400670 <TC0_Handler+0x28>)
  40065c:	601a      	str	r2, [r3, #0]
			updated = 0;
  40065e:	2200      	movs	r2, #0
  400660:	4b02      	ldr	r3, [pc, #8]	; (40066c <TC0_Handler+0x24>)
  400662:	601a      	str	r2, [r3, #0]
  400664:	4770      	bx	lr
  400666:	bf00      	nop
  400668:	4000c020 	.word	0x4000c020
  40066c:	2040051c 	.word	0x2040051c
  400670:	4003c000 	.word	0x4003c000

00400674 <DACC_Handler>:
	//PIOC->PIO_SODR |= PIO_PC8;
}



void DACC_Handler(void) {
  400674:	4770      	bx	lr
	...

00400678 <mainclk_init>:
uint32_t mainclk_init()
{
	uint16_t tmp = 0;
	
	/* Enable Main XOSC */
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  400678:	4910      	ldr	r1, [pc, #64]	; (4006bc <mainclk_init+0x44>)
  40067a:	6a0b      	ldr	r3, [r1, #32]
	| CKGR_MOR_KEY_PASSWD
	| CKGR_MOR_MOSCXTEN
	| CKGR_MOR_MOSCXTST(XOSC12M_STARTUP_TIME);
  40067c:	4a10      	ldr	r2, [pc, #64]	; (4006c0 <mainclk_init+0x48>)
  40067e:	401a      	ands	r2, r3
  400680:	4b10      	ldr	r3, [pc, #64]	; (4006c4 <mainclk_init+0x4c>)
  400682:	4313      	orrs	r3, r2
	PMC->CKGR_MOR =	(PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY)
  400684:	620b      	str	r3, [r1, #32]
	
	/* wait for XOSC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400686:	460a      	mov	r2, r1
  400688:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40068a:	f013 0f01 	tst.w	r3, #1
  40068e:	d0fb      	beq.n	400688 <mainclk_init+0x10>
	
	/* Select XOSC as Main Clock */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD
  400690:	4a0a      	ldr	r2, [pc, #40]	; (4006bc <mainclk_init+0x44>)
  400692:	6a11      	ldr	r1, [r2, #32]
  400694:	4b0c      	ldr	r3, [pc, #48]	; (4006c8 <mainclk_init+0x50>)
  400696:	430b      	orrs	r3, r1
  400698:	6213      	str	r3, [r2, #32]
	| CKGR_MOR_MOSCSEL;
	
	/* wait for Main Clock to be ready */
	while(!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40069a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40069c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4006a0:	d0fb      	beq.n	40069a <mainclk_init+0x22>

	/* Check if Main Clock frequency is correct */
	while(!(PMC->CKGR_MCFR & CKGR_MCFR_MAINFRDY));
  4006a2:	4a06      	ldr	r2, [pc, #24]	; (4006bc <mainclk_init+0x44>)
  4006a4:	6a53      	ldr	r3, [r2, #36]	; 0x24
  4006a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4006aa:	d0fb      	beq.n	4006a4 <mainclk_init+0x2c>
	tmp = (PMC->CKGR_MCFR & CKGR_MCFR_MAINF_Msk);
  4006ac:	4b03      	ldr	r3, [pc, #12]	; (4006bc <mainclk_init+0x44>)
  4006ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
	
	if(tmp == 0) return EXIT_FAILURE;
  4006b0:	b280      	uxth	r0, r0
	
	return EXIT_SUCCESS;
	
}
  4006b2:	fab0 f080 	clz	r0, r0
  4006b6:	0940      	lsrs	r0, r0, #5
  4006b8:	4770      	bx	lr
  4006ba:	bf00      	nop
  4006bc:	400e0600 	.word	0x400e0600
  4006c0:	ffc8c1fc 	.word	0xffc8c1fc
  4006c4:	00373e01 	.word	0x00373e01
  4006c8:	01370000 	.word	0x01370000

004006cc <pll_init>:

/* Enable the PLL (300 MHz) */
uint32_t pll_init()
{
	/* Stop PLL first */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  4006cc:	4b08      	ldr	r3, [pc, #32]	; (4006f0 <pll_init+0x24>)
  4006ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4006d2:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_MULA(0);
	
	/* Configure and enable PLL */
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE
  4006d4:	f502 12c1 	add.w	r2, r2, #1581056	; 0x182000
  4006d8:	f502 52f8 	add.w	r2, r2, #7936	; 0x1f00
  4006dc:	3201      	adds	r2, #1
  4006de:	629a      	str	r2, [r3, #40]	; 0x28
	| CKGR_PLLAR_DIVA_BYPASS
	| CKGR_PLLAR_MULA(((F_CPU / F_XOSC) - 1))
	| CKGR_PLLAR_PLLACOUNT(PLL_STARTUP_TIME);
	
	/* Wait for PLL lock */
	while(!(PMC->PMC_SR & PMC_SR_LOCKA));
  4006e0:	461a      	mov	r2, r3
  4006e2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006e4:	f013 0f02 	tst.w	r3, #2
  4006e8:	d0fb      	beq.n	4006e2 <pll_init+0x16>
	
	return EXIT_SUCCESS;
}
  4006ea:	2000      	movs	r0, #0
  4006ec:	4770      	bx	lr
  4006ee:	bf00      	nop
  4006f0:	400e0600 	.word	0x400e0600

004006f4 <sysclk_init>:

uint32_t sysclk_init()
{
  4006f4:	b508      	push	{r3, lr}
 * \brief Enable FPU
 */
static inline void fpu_enable(void)
{
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  4006f6:	4a15      	ldr	r2, [pc, #84]	; (40074c <sysclk_init+0x58>)
  4006f8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  4006fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400704:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400708:	f3bf 8f6f 	isb	sy
	fpu_enable();
	
	/* Set flash wait state */
	EFC->EEFC_FMR = EEFC_FMR_FWS(EFC_WAIT_STATE) 
  40070c:	4a10      	ldr	r2, [pc, #64]	; (400750 <sysclk_init+0x5c>)
  40070e:	4b11      	ldr	r3, [pc, #68]	; (400754 <sysclk_init+0x60>)
  400710:	601a      	str	r2, [r3, #0]
	| EEFC_FMR_CLOE;
			

	mainclk_init();
  400712:	4b11      	ldr	r3, [pc, #68]	; (400758 <sysclk_init+0x64>)
  400714:	4798      	blx	r3
	pll_init();
  400716:	4b11      	ldr	r3, [pc, #68]	; (40075c <sysclk_init+0x68>)
  400718:	4798      	blx	r3

	
	/* Select Master Clock Div */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  40071a:	4a11      	ldr	r2, [pc, #68]	; (400760 <sysclk_init+0x6c>)
  40071c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40071e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	| PMC_MCKR_MDIV_PCK_DIV2;
  400722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) 
  400726:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400728:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40072a:	f013 0f08 	tst.w	r3, #8
  40072e:	d0fb      	beq.n	400728 <sysclk_init+0x34>
	
	/* Select PLL as Master Clock Source */
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  400730:	4a0b      	ldr	r2, [pc, #44]	; (400760 <sysclk_init+0x6c>)
  400732:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400734:	f023 0303 	bic.w	r3, r3, #3
	| PMC_MCKR_CSS_PLLA_CLK;
  400738:	f043 0302 	orr.w	r3, r3, #2
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk))
  40073c:	6313      	str	r3, [r2, #48]	; 0x30
	/* Wait until master clock is ready */
	while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40073e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400740:	f013 0f08 	tst.w	r3, #8
  400744:	d0fb      	beq.n	40073e <sysclk_init+0x4a>
	
	return EXIT_SUCCESS;
  400746:	2000      	movs	r0, #0
  400748:	bd08      	pop	{r3, pc}
  40074a:	bf00      	nop
  40074c:	e000ed00 	.word	0xe000ed00
  400750:	04000600 	.word	0x04000600
  400754:	400e0c00 	.word	0x400e0c00
  400758:	00400679 	.word	0x00400679
  40075c:	004006cd 	.word	0x004006cd
  400760:	400e0600 	.word	0x400e0600

00400764 <initTimer>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400764:	4b1b      	ldr	r3, [pc, #108]	; (4007d4 <initTimer+0x70>)
  400766:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40076a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40076e:	2120      	movs	r1, #32
  400770:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400774:	601a      	str	r2, [r3, #0]
{
	NVIC_ClearPendingIRQ(TC0_IRQn);
	NVIC_SetPriority(TC0_IRQn, 1);
	NVIC_EnableIRQ(TC0_IRQn);
	
	PMC->PMC_PCR |= PMC_PCR_PID(ID_TC0);
  400776:	4b18      	ldr	r3, [pc, #96]	; (4007d8 <initTimer+0x74>)
  400778:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40077c:	f042 0217 	orr.w	r2, r2, #23
  400780:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC->PMC_PCR |= PMC_PCR_EN | PMC_PCR_CMD;
  400784:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400788:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  40078c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//REG_PMC_PCER0 |= PMC_PCER0_PID23;
	
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2;
  400790:	f5a3 2354 	sub.w	r3, r3, #868352	; 0xd4000
  400794:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
  400798:	681a      	ldr	r2, [r3, #0]
  40079a:	f042 0201 	orr.w	r2, r2, #1
  40079e:	601a      	str	r2, [r3, #0]
	REG_TC0_IER0 |= TC_IER_CPCS_Msk;
  4007a0:	490e      	ldr	r1, [pc, #56]	; (4007dc <initTimer+0x78>)
  4007a2:	680a      	ldr	r2, [r1, #0]
  4007a4:	f042 0210 	orr.w	r2, r2, #16
  4007a8:	600a      	str	r2, [r1, #0]
	REG_TC0_CMR0 |= TC_CMR_CPCTRG_Msk;
  4007aa:	681a      	ldr	r2, [r3, #0]
  4007ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4007b0:	601a      	str	r2, [r3, #0]
	
	REG_TC0_CCR0 |= TC_CCR_CLKEN;
  4007b2:	3b04      	subs	r3, #4
  4007b4:	681a      	ldr	r2, [r3, #0]
  4007b6:	f042 0201 	orr.w	r2, r2, #1
  4007ba:	601a      	str	r2, [r3, #0]
	
	REG_TC0_RC0 = 187;
  4007bc:	21bb      	movs	r1, #187	; 0xbb
  4007be:	4a08      	ldr	r2, [pc, #32]	; (4007e0 <initTimer+0x7c>)
  4007c0:	6011      	str	r1, [r2, #0]
	REG_TC0_CCR0 |= TC_CCR_CLKEN;
  4007c2:	681a      	ldr	r2, [r3, #0]
  4007c4:	f042 0201 	orr.w	r2, r2, #1
  4007c8:	601a      	str	r2, [r3, #0]
	REG_TC0_CCR0 |= TC_CCR_SWTRG;
  4007ca:	681a      	ldr	r2, [r3, #0]
  4007cc:	f042 0204 	orr.w	r2, r2, #4
  4007d0:	601a      	str	r2, [r3, #0]
  4007d2:	4770      	bx	lr
  4007d4:	e000e100 	.word	0xe000e100
  4007d8:	400e0600 	.word	0x400e0600
  4007dc:	4000c024 	.word	0x4000c024
  4007e0:	4000c01c 	.word	0x4000c01c

004007e4 <__aeabi_frsub>:
  4007e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  4007e8:	e002      	b.n	4007f0 <__addsf3>
  4007ea:	bf00      	nop

004007ec <__aeabi_fsub>:
  4007ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004007f0 <__addsf3>:
  4007f0:	0042      	lsls	r2, r0, #1
  4007f2:	bf1f      	itttt	ne
  4007f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4007f8:	ea92 0f03 	teqne	r2, r3
  4007fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  400800:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  400804:	d06a      	beq.n	4008dc <__addsf3+0xec>
  400806:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40080a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40080e:	bfc1      	itttt	gt
  400810:	18d2      	addgt	r2, r2, r3
  400812:	4041      	eorgt	r1, r0
  400814:	4048      	eorgt	r0, r1
  400816:	4041      	eorgt	r1, r0
  400818:	bfb8      	it	lt
  40081a:	425b      	neglt	r3, r3
  40081c:	2b19      	cmp	r3, #25
  40081e:	bf88      	it	hi
  400820:	4770      	bxhi	lr
  400822:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  400826:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40082a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40082e:	bf18      	it	ne
  400830:	4240      	negne	r0, r0
  400832:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  400836:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40083a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40083e:	bf18      	it	ne
  400840:	4249      	negne	r1, r1
  400842:	ea92 0f03 	teq	r2, r3
  400846:	d03f      	beq.n	4008c8 <__addsf3+0xd8>
  400848:	f1a2 0201 	sub.w	r2, r2, #1
  40084c:	fa41 fc03 	asr.w	ip, r1, r3
  400850:	eb10 000c 	adds.w	r0, r0, ip
  400854:	f1c3 0320 	rsb	r3, r3, #32
  400858:	fa01 f103 	lsl.w	r1, r1, r3
  40085c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  400860:	d502      	bpl.n	400868 <__addsf3+0x78>
  400862:	4249      	negs	r1, r1
  400864:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  400868:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40086c:	d313      	bcc.n	400896 <__addsf3+0xa6>
  40086e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  400872:	d306      	bcc.n	400882 <__addsf3+0x92>
  400874:	0840      	lsrs	r0, r0, #1
  400876:	ea4f 0131 	mov.w	r1, r1, rrx
  40087a:	f102 0201 	add.w	r2, r2, #1
  40087e:	2afe      	cmp	r2, #254	; 0xfe
  400880:	d251      	bcs.n	400926 <__addsf3+0x136>
  400882:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  400886:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40088a:	bf08      	it	eq
  40088c:	f020 0001 	biceq.w	r0, r0, #1
  400890:	ea40 0003 	orr.w	r0, r0, r3
  400894:	4770      	bx	lr
  400896:	0049      	lsls	r1, r1, #1
  400898:	eb40 0000 	adc.w	r0, r0, r0
  40089c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  4008a0:	f1a2 0201 	sub.w	r2, r2, #1
  4008a4:	d1ed      	bne.n	400882 <__addsf3+0x92>
  4008a6:	fab0 fc80 	clz	ip, r0
  4008aa:	f1ac 0c08 	sub.w	ip, ip, #8
  4008ae:	ebb2 020c 	subs.w	r2, r2, ip
  4008b2:	fa00 f00c 	lsl.w	r0, r0, ip
  4008b6:	bfaa      	itet	ge
  4008b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  4008bc:	4252      	neglt	r2, r2
  4008be:	4318      	orrge	r0, r3
  4008c0:	bfbc      	itt	lt
  4008c2:	40d0      	lsrlt	r0, r2
  4008c4:	4318      	orrlt	r0, r3
  4008c6:	4770      	bx	lr
  4008c8:	f092 0f00 	teq	r2, #0
  4008cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  4008d0:	bf06      	itte	eq
  4008d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  4008d6:	3201      	addeq	r2, #1
  4008d8:	3b01      	subne	r3, #1
  4008da:	e7b5      	b.n	400848 <__addsf3+0x58>
  4008dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
  4008e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  4008e4:	bf18      	it	ne
  4008e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4008ea:	d021      	beq.n	400930 <__addsf3+0x140>
  4008ec:	ea92 0f03 	teq	r2, r3
  4008f0:	d004      	beq.n	4008fc <__addsf3+0x10c>
  4008f2:	f092 0f00 	teq	r2, #0
  4008f6:	bf08      	it	eq
  4008f8:	4608      	moveq	r0, r1
  4008fa:	4770      	bx	lr
  4008fc:	ea90 0f01 	teq	r0, r1
  400900:	bf1c      	itt	ne
  400902:	2000      	movne	r0, #0
  400904:	4770      	bxne	lr
  400906:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40090a:	d104      	bne.n	400916 <__addsf3+0x126>
  40090c:	0040      	lsls	r0, r0, #1
  40090e:	bf28      	it	cs
  400910:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  400914:	4770      	bx	lr
  400916:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40091a:	bf3c      	itt	cc
  40091c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  400920:	4770      	bxcc	lr
  400922:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  400926:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40092a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40092e:	4770      	bx	lr
  400930:	ea7f 6222 	mvns.w	r2, r2, asr #24
  400934:	bf16      	itet	ne
  400936:	4608      	movne	r0, r1
  400938:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40093c:	4601      	movne	r1, r0
  40093e:	0242      	lsls	r2, r0, #9
  400940:	bf06      	itte	eq
  400942:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  400946:	ea90 0f01 	teqeq	r0, r1
  40094a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  40094e:	4770      	bx	lr

00400950 <__aeabi_ui2f>:
  400950:	f04f 0300 	mov.w	r3, #0
  400954:	e004      	b.n	400960 <__aeabi_i2f+0x8>
  400956:	bf00      	nop

00400958 <__aeabi_i2f>:
  400958:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  40095c:	bf48      	it	mi
  40095e:	4240      	negmi	r0, r0
  400960:	ea5f 0c00 	movs.w	ip, r0
  400964:	bf08      	it	eq
  400966:	4770      	bxeq	lr
  400968:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40096c:	4601      	mov	r1, r0
  40096e:	f04f 0000 	mov.w	r0, #0
  400972:	e01c      	b.n	4009ae <__aeabi_l2f+0x2a>

00400974 <__aeabi_ul2f>:
  400974:	ea50 0201 	orrs.w	r2, r0, r1
  400978:	bf08      	it	eq
  40097a:	4770      	bxeq	lr
  40097c:	f04f 0300 	mov.w	r3, #0
  400980:	e00a      	b.n	400998 <__aeabi_l2f+0x14>
  400982:	bf00      	nop

00400984 <__aeabi_l2f>:
  400984:	ea50 0201 	orrs.w	r2, r0, r1
  400988:	bf08      	it	eq
  40098a:	4770      	bxeq	lr
  40098c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  400990:	d502      	bpl.n	400998 <__aeabi_l2f+0x14>
  400992:	4240      	negs	r0, r0
  400994:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  400998:	ea5f 0c01 	movs.w	ip, r1
  40099c:	bf02      	ittt	eq
  40099e:	4684      	moveq	ip, r0
  4009a0:	4601      	moveq	r1, r0
  4009a2:	2000      	moveq	r0, #0
  4009a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4009a8:	bf08      	it	eq
  4009aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4009ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4009b2:	fabc f28c 	clz	r2, ip
  4009b6:	3a08      	subs	r2, #8
  4009b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4009bc:	db10      	blt.n	4009e0 <__aeabi_l2f+0x5c>
  4009be:	fa01 fc02 	lsl.w	ip, r1, r2
  4009c2:	4463      	add	r3, ip
  4009c4:	fa00 fc02 	lsl.w	ip, r0, r2
  4009c8:	f1c2 0220 	rsb	r2, r2, #32
  4009cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4009d0:	fa20 f202 	lsr.w	r2, r0, r2
  4009d4:	eb43 0002 	adc.w	r0, r3, r2
  4009d8:	bf08      	it	eq
  4009da:	f020 0001 	biceq.w	r0, r0, #1
  4009de:	4770      	bx	lr
  4009e0:	f102 0220 	add.w	r2, r2, #32
  4009e4:	fa01 fc02 	lsl.w	ip, r1, r2
  4009e8:	f1c2 0220 	rsb	r2, r2, #32
  4009ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4009f0:	fa21 f202 	lsr.w	r2, r1, r2
  4009f4:	eb43 0002 	adc.w	r0, r3, r2
  4009f8:	bf08      	it	eq
  4009fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4009fe:	4770      	bx	lr

00400a00 <__aeabi_fmul>:
  400a00:	f04f 0cff 	mov.w	ip, #255	; 0xff
  400a04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  400a08:	bf1e      	ittt	ne
  400a0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  400a0e:	ea92 0f0c 	teqne	r2, ip
  400a12:	ea93 0f0c 	teqne	r3, ip
  400a16:	d06f      	beq.n	400af8 <__aeabi_fmul+0xf8>
  400a18:	441a      	add	r2, r3
  400a1a:	ea80 0c01 	eor.w	ip, r0, r1
  400a1e:	0240      	lsls	r0, r0, #9
  400a20:	bf18      	it	ne
  400a22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  400a26:	d01e      	beq.n	400a66 <__aeabi_fmul+0x66>
  400a28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  400a2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  400a30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  400a34:	fba0 3101 	umull	r3, r1, r0, r1
  400a38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  400a3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  400a40:	bf3e      	ittt	cc
  400a42:	0049      	lslcc	r1, r1, #1
  400a44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  400a48:	005b      	lslcc	r3, r3, #1
  400a4a:	ea40 0001 	orr.w	r0, r0, r1
  400a4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  400a52:	2afd      	cmp	r2, #253	; 0xfd
  400a54:	d81d      	bhi.n	400a92 <__aeabi_fmul+0x92>
  400a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  400a5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  400a5e:	bf08      	it	eq
  400a60:	f020 0001 	biceq.w	r0, r0, #1
  400a64:	4770      	bx	lr
  400a66:	f090 0f00 	teq	r0, #0
  400a6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  400a6e:	bf08      	it	eq
  400a70:	0249      	lsleq	r1, r1, #9
  400a72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  400a76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  400a7a:	3a7f      	subs	r2, #127	; 0x7f
  400a7c:	bfc2      	ittt	gt
  400a7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  400a82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  400a86:	4770      	bxgt	lr
  400a88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  400a8c:	f04f 0300 	mov.w	r3, #0
  400a90:	3a01      	subs	r2, #1
  400a92:	dc5d      	bgt.n	400b50 <__aeabi_fmul+0x150>
  400a94:	f112 0f19 	cmn.w	r2, #25
  400a98:	bfdc      	itt	le
  400a9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  400a9e:	4770      	bxle	lr
  400aa0:	f1c2 0200 	rsb	r2, r2, #0
  400aa4:	0041      	lsls	r1, r0, #1
  400aa6:	fa21 f102 	lsr.w	r1, r1, r2
  400aaa:	f1c2 0220 	rsb	r2, r2, #32
  400aae:	fa00 fc02 	lsl.w	ip, r0, r2
  400ab2:	ea5f 0031 	movs.w	r0, r1, rrx
  400ab6:	f140 0000 	adc.w	r0, r0, #0
  400aba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  400abe:	bf08      	it	eq
  400ac0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  400ac4:	4770      	bx	lr
  400ac6:	f092 0f00 	teq	r2, #0
  400aca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  400ace:	bf02      	ittt	eq
  400ad0:	0040      	lsleq	r0, r0, #1
  400ad2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  400ad6:	3a01      	subeq	r2, #1
  400ad8:	d0f9      	beq.n	400ace <__aeabi_fmul+0xce>
  400ada:	ea40 000c 	orr.w	r0, r0, ip
  400ade:	f093 0f00 	teq	r3, #0
  400ae2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  400ae6:	bf02      	ittt	eq
  400ae8:	0049      	lsleq	r1, r1, #1
  400aea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  400aee:	3b01      	subeq	r3, #1
  400af0:	d0f9      	beq.n	400ae6 <__aeabi_fmul+0xe6>
  400af2:	ea41 010c 	orr.w	r1, r1, ip
  400af6:	e78f      	b.n	400a18 <__aeabi_fmul+0x18>
  400af8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  400afc:	ea92 0f0c 	teq	r2, ip
  400b00:	bf18      	it	ne
  400b02:	ea93 0f0c 	teqne	r3, ip
  400b06:	d00a      	beq.n	400b1e <__aeabi_fmul+0x11e>
  400b08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  400b0c:	bf18      	it	ne
  400b0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  400b12:	d1d8      	bne.n	400ac6 <__aeabi_fmul+0xc6>
  400b14:	ea80 0001 	eor.w	r0, r0, r1
  400b18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  400b1c:	4770      	bx	lr
  400b1e:	f090 0f00 	teq	r0, #0
  400b22:	bf17      	itett	ne
  400b24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  400b28:	4608      	moveq	r0, r1
  400b2a:	f091 0f00 	teqne	r1, #0
  400b2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  400b32:	d014      	beq.n	400b5e <__aeabi_fmul+0x15e>
  400b34:	ea92 0f0c 	teq	r2, ip
  400b38:	d101      	bne.n	400b3e <__aeabi_fmul+0x13e>
  400b3a:	0242      	lsls	r2, r0, #9
  400b3c:	d10f      	bne.n	400b5e <__aeabi_fmul+0x15e>
  400b3e:	ea93 0f0c 	teq	r3, ip
  400b42:	d103      	bne.n	400b4c <__aeabi_fmul+0x14c>
  400b44:	024b      	lsls	r3, r1, #9
  400b46:	bf18      	it	ne
  400b48:	4608      	movne	r0, r1
  400b4a:	d108      	bne.n	400b5e <__aeabi_fmul+0x15e>
  400b4c:	ea80 0001 	eor.w	r0, r0, r1
  400b50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  400b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  400b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  400b5c:	4770      	bx	lr
  400b5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  400b62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  400b66:	4770      	bx	lr

00400b68 <__aeabi_fdiv>:
  400b68:	f04f 0cff 	mov.w	ip, #255	; 0xff
  400b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  400b70:	bf1e      	ittt	ne
  400b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  400b76:	ea92 0f0c 	teqne	r2, ip
  400b7a:	ea93 0f0c 	teqne	r3, ip
  400b7e:	d069      	beq.n	400c54 <__aeabi_fdiv+0xec>
  400b80:	eba2 0203 	sub.w	r2, r2, r3
  400b84:	ea80 0c01 	eor.w	ip, r0, r1
  400b88:	0249      	lsls	r1, r1, #9
  400b8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
  400b8e:	d037      	beq.n	400c00 <__aeabi_fdiv+0x98>
  400b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400b94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  400b98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  400b9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  400ba0:	428b      	cmp	r3, r1
  400ba2:	bf38      	it	cc
  400ba4:	005b      	lslcc	r3, r3, #1
  400ba6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  400baa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  400bae:	428b      	cmp	r3, r1
  400bb0:	bf24      	itt	cs
  400bb2:	1a5b      	subcs	r3, r3, r1
  400bb4:	ea40 000c 	orrcs.w	r0, r0, ip
  400bb8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  400bbc:	bf24      	itt	cs
  400bbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  400bc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  400bc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  400bca:	bf24      	itt	cs
  400bcc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  400bd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  400bd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  400bd8:	bf24      	itt	cs
  400bda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  400bde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  400be2:	011b      	lsls	r3, r3, #4
  400be4:	bf18      	it	ne
  400be6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  400bea:	d1e0      	bne.n	400bae <__aeabi_fdiv+0x46>
  400bec:	2afd      	cmp	r2, #253	; 0xfd
  400bee:	f63f af50 	bhi.w	400a92 <__aeabi_fmul+0x92>
  400bf2:	428b      	cmp	r3, r1
  400bf4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  400bf8:	bf08      	it	eq
  400bfa:	f020 0001 	biceq.w	r0, r0, #1
  400bfe:	4770      	bx	lr
  400c00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  400c04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  400c08:	327f      	adds	r2, #127	; 0x7f
  400c0a:	bfc2      	ittt	gt
  400c0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  400c10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  400c14:	4770      	bxgt	lr
  400c16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  400c1a:	f04f 0300 	mov.w	r3, #0
  400c1e:	3a01      	subs	r2, #1
  400c20:	e737      	b.n	400a92 <__aeabi_fmul+0x92>
  400c22:	f092 0f00 	teq	r2, #0
  400c26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  400c2a:	bf02      	ittt	eq
  400c2c:	0040      	lsleq	r0, r0, #1
  400c2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  400c32:	3a01      	subeq	r2, #1
  400c34:	d0f9      	beq.n	400c2a <__aeabi_fdiv+0xc2>
  400c36:	ea40 000c 	orr.w	r0, r0, ip
  400c3a:	f093 0f00 	teq	r3, #0
  400c3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  400c42:	bf02      	ittt	eq
  400c44:	0049      	lsleq	r1, r1, #1
  400c46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  400c4a:	3b01      	subeq	r3, #1
  400c4c:	d0f9      	beq.n	400c42 <__aeabi_fdiv+0xda>
  400c4e:	ea41 010c 	orr.w	r1, r1, ip
  400c52:	e795      	b.n	400b80 <__aeabi_fdiv+0x18>
  400c54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  400c58:	ea92 0f0c 	teq	r2, ip
  400c5c:	d108      	bne.n	400c70 <__aeabi_fdiv+0x108>
  400c5e:	0242      	lsls	r2, r0, #9
  400c60:	f47f af7d 	bne.w	400b5e <__aeabi_fmul+0x15e>
  400c64:	ea93 0f0c 	teq	r3, ip
  400c68:	f47f af70 	bne.w	400b4c <__aeabi_fmul+0x14c>
  400c6c:	4608      	mov	r0, r1
  400c6e:	e776      	b.n	400b5e <__aeabi_fmul+0x15e>
  400c70:	ea93 0f0c 	teq	r3, ip
  400c74:	d104      	bne.n	400c80 <__aeabi_fdiv+0x118>
  400c76:	024b      	lsls	r3, r1, #9
  400c78:	f43f af4c 	beq.w	400b14 <__aeabi_fmul+0x114>
  400c7c:	4608      	mov	r0, r1
  400c7e:	e76e      	b.n	400b5e <__aeabi_fmul+0x15e>
  400c80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  400c84:	bf18      	it	ne
  400c86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  400c8a:	d1ca      	bne.n	400c22 <__aeabi_fdiv+0xba>
  400c8c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  400c90:	f47f af5c 	bne.w	400b4c <__aeabi_fmul+0x14c>
  400c94:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  400c98:	f47f af3c 	bne.w	400b14 <__aeabi_fmul+0x114>
  400c9c:	e75f      	b.n	400b5e <__aeabi_fmul+0x15e>
  400c9e:	bf00      	nop

00400ca0 <__aeabi_f2uiz>:
  400ca0:	0042      	lsls	r2, r0, #1
  400ca2:	d20e      	bcs.n	400cc2 <__aeabi_f2uiz+0x22>
  400ca4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  400ca8:	d30b      	bcc.n	400cc2 <__aeabi_f2uiz+0x22>
  400caa:	f04f 039e 	mov.w	r3, #158	; 0x9e
  400cae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  400cb2:	d409      	bmi.n	400cc8 <__aeabi_f2uiz+0x28>
  400cb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  400cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400cbc:	fa23 f002 	lsr.w	r0, r3, r2
  400cc0:	4770      	bx	lr
  400cc2:	f04f 0000 	mov.w	r0, #0
  400cc6:	4770      	bx	lr
  400cc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  400ccc:	d101      	bne.n	400cd2 <__aeabi_f2uiz+0x32>
  400cce:	0242      	lsls	r2, r0, #9
  400cd0:	d102      	bne.n	400cd8 <__aeabi_f2uiz+0x38>
  400cd2:	f04f 30ff 	mov.w	r0, #4294967295
  400cd6:	4770      	bx	lr
  400cd8:	f04f 0000 	mov.w	r0, #0
  400cdc:	4770      	bx	lr
  400cde:	bf00      	nop

00400ce0 <__libc_init_array>:
  400ce0:	b570      	push	{r4, r5, r6, lr}
  400ce2:	4e0f      	ldr	r6, [pc, #60]	; (400d20 <__libc_init_array+0x40>)
  400ce4:	4d0f      	ldr	r5, [pc, #60]	; (400d24 <__libc_init_array+0x44>)
  400ce6:	1b76      	subs	r6, r6, r5
  400ce8:	10b6      	asrs	r6, r6, #2
  400cea:	bf18      	it	ne
  400cec:	2400      	movne	r4, #0
  400cee:	d005      	beq.n	400cfc <__libc_init_array+0x1c>
  400cf0:	3401      	adds	r4, #1
  400cf2:	f855 3b04 	ldr.w	r3, [r5], #4
  400cf6:	4798      	blx	r3
  400cf8:	42a6      	cmp	r6, r4
  400cfa:	d1f9      	bne.n	400cf0 <__libc_init_array+0x10>
  400cfc:	4e0a      	ldr	r6, [pc, #40]	; (400d28 <__libc_init_array+0x48>)
  400cfe:	4d0b      	ldr	r5, [pc, #44]	; (400d2c <__libc_init_array+0x4c>)
  400d00:	1b76      	subs	r6, r6, r5
  400d02:	f000 f90f 	bl	400f24 <_init>
  400d06:	10b6      	asrs	r6, r6, #2
  400d08:	bf18      	it	ne
  400d0a:	2400      	movne	r4, #0
  400d0c:	d006      	beq.n	400d1c <__libc_init_array+0x3c>
  400d0e:	3401      	adds	r4, #1
  400d10:	f855 3b04 	ldr.w	r3, [r5], #4
  400d14:	4798      	blx	r3
  400d16:	42a6      	cmp	r6, r4
  400d18:	d1f9      	bne.n	400d0e <__libc_init_array+0x2e>
  400d1a:	bd70      	pop	{r4, r5, r6, pc}
  400d1c:	bd70      	pop	{r4, r5, r6, pc}
  400d1e:	bf00      	nop
  400d20:	00400f30 	.word	0x00400f30
  400d24:	00400f30 	.word	0x00400f30
  400d28:	00400f38 	.word	0x00400f38
  400d2c:	00400f30 	.word	0x00400f30

00400d30 <register_fini>:
  400d30:	4b02      	ldr	r3, [pc, #8]	; (400d3c <register_fini+0xc>)
  400d32:	b113      	cbz	r3, 400d3a <register_fini+0xa>
  400d34:	4802      	ldr	r0, [pc, #8]	; (400d40 <register_fini+0x10>)
  400d36:	f000 b805 	b.w	400d44 <atexit>
  400d3a:	4770      	bx	lr
  400d3c:	00000000 	.word	0x00000000
  400d40:	00400d51 	.word	0x00400d51

00400d44 <atexit>:
  400d44:	2300      	movs	r3, #0
  400d46:	4601      	mov	r1, r0
  400d48:	461a      	mov	r2, r3
  400d4a:	4618      	mov	r0, r3
  400d4c:	f000 b81e 	b.w	400d8c <__register_exitproc>

00400d50 <__libc_fini_array>:
  400d50:	b538      	push	{r3, r4, r5, lr}
  400d52:	4c0a      	ldr	r4, [pc, #40]	; (400d7c <__libc_fini_array+0x2c>)
  400d54:	4d0a      	ldr	r5, [pc, #40]	; (400d80 <__libc_fini_array+0x30>)
  400d56:	1b64      	subs	r4, r4, r5
  400d58:	10a4      	asrs	r4, r4, #2
  400d5a:	d00a      	beq.n	400d72 <__libc_fini_array+0x22>
  400d5c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400d60:	3b01      	subs	r3, #1
  400d62:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400d66:	3c01      	subs	r4, #1
  400d68:	f855 3904 	ldr.w	r3, [r5], #-4
  400d6c:	4798      	blx	r3
  400d6e:	2c00      	cmp	r4, #0
  400d70:	d1f9      	bne.n	400d66 <__libc_fini_array+0x16>
  400d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400d76:	f000 b8df 	b.w	400f38 <_fini>
  400d7a:	bf00      	nop
  400d7c:	00400f48 	.word	0x00400f48
  400d80:	00400f44 	.word	0x00400f44

00400d84 <__retarget_lock_acquire_recursive>:
  400d84:	4770      	bx	lr
  400d86:	bf00      	nop

00400d88 <__retarget_lock_release_recursive>:
  400d88:	4770      	bx	lr
  400d8a:	bf00      	nop

00400d8c <__register_exitproc>:
  400d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400d90:	4d2c      	ldr	r5, [pc, #176]	; (400e44 <__register_exitproc+0xb8>)
  400d92:	4606      	mov	r6, r0
  400d94:	6828      	ldr	r0, [r5, #0]
  400d96:	4698      	mov	r8, r3
  400d98:	460f      	mov	r7, r1
  400d9a:	4691      	mov	r9, r2
  400d9c:	f7ff fff2 	bl	400d84 <__retarget_lock_acquire_recursive>
  400da0:	4b29      	ldr	r3, [pc, #164]	; (400e48 <__register_exitproc+0xbc>)
  400da2:	681c      	ldr	r4, [r3, #0]
  400da4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400da8:	2b00      	cmp	r3, #0
  400daa:	d03e      	beq.n	400e2a <__register_exitproc+0x9e>
  400dac:	685a      	ldr	r2, [r3, #4]
  400dae:	2a1f      	cmp	r2, #31
  400db0:	dc1c      	bgt.n	400dec <__register_exitproc+0x60>
  400db2:	f102 0e01 	add.w	lr, r2, #1
  400db6:	b176      	cbz	r6, 400dd6 <__register_exitproc+0x4a>
  400db8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400dbc:	2401      	movs	r4, #1
  400dbe:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400dc2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400dc6:	4094      	lsls	r4, r2
  400dc8:	4320      	orrs	r0, r4
  400dca:	2e02      	cmp	r6, #2
  400dcc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400dd0:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400dd4:	d023      	beq.n	400e1e <__register_exitproc+0x92>
  400dd6:	3202      	adds	r2, #2
  400dd8:	f8c3 e004 	str.w	lr, [r3, #4]
  400ddc:	6828      	ldr	r0, [r5, #0]
  400dde:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400de2:	f7ff ffd1 	bl	400d88 <__retarget_lock_release_recursive>
  400de6:	2000      	movs	r0, #0
  400de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400dec:	4b17      	ldr	r3, [pc, #92]	; (400e4c <__register_exitproc+0xc0>)
  400dee:	b30b      	cbz	r3, 400e34 <__register_exitproc+0xa8>
  400df0:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400df4:	f3af 8000 	nop.w
  400df8:	4603      	mov	r3, r0
  400dfa:	b1d8      	cbz	r0, 400e34 <__register_exitproc+0xa8>
  400dfc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400e00:	6002      	str	r2, [r0, #0]
  400e02:	2100      	movs	r1, #0
  400e04:	6041      	str	r1, [r0, #4]
  400e06:	460a      	mov	r2, r1
  400e08:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400e0c:	f04f 0e01 	mov.w	lr, #1
  400e10:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400e14:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400e18:	2e00      	cmp	r6, #0
  400e1a:	d0dc      	beq.n	400dd6 <__register_exitproc+0x4a>
  400e1c:	e7cc      	b.n	400db8 <__register_exitproc+0x2c>
  400e1e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400e22:	430c      	orrs	r4, r1
  400e24:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400e28:	e7d5      	b.n	400dd6 <__register_exitproc+0x4a>
  400e2a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400e2e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400e32:	e7bb      	b.n	400dac <__register_exitproc+0x20>
  400e34:	6828      	ldr	r0, [r5, #0]
  400e36:	f7ff ffa7 	bl	400d88 <__retarget_lock_release_recursive>
  400e3a:	f04f 30ff 	mov.w	r0, #4294967295
  400e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400e42:	bf00      	nop
  400e44:	20400430 	.word	0x20400430
  400e48:	00400f20 	.word	0x00400f20
  400e4c:	00000000 	.word	0x00000000

00400e50 <coefficients>:
  400e50:	392d852d 3b3d7688 3b14a785 3b5390e9     -.-9.v=;...;..S;
  400e60:	3b8bf6c4 3bb40002 3be1ce00 3c0a9fb0     ...;...;...;...<
  400e70:	3c270fec 3c45fe7b 3c6727d3 3c8514d2     ..'<{.E<.'g<...<
  400e80:	3c9748cd 3ca9f06b 3cbcc298 3ccf6f36     .H.<k..<...<6o.<
  400e90:	3ce1a280 3cf309f3 3d01ab22 3d091848     ...<...<"..=H..=
  400ea0:	3d0fa8f4 3d15396a 3d19af03 3d1cee2d     ...=j9.=...=-..=
  400eb0:	3d1ee770 3d1f9372 3d1ee770 3d1cee2d     p..=r..=p..=-..=
  400ec0:	3d19af03 3d15396a 3d0fa8f4 3d091848     ...=j9.=...=H..=
  400ed0:	3d01ab22 3cf309f3 3ce1a280 3ccf6f36     "..=...<...<6o.<
  400ee0:	3cbcc298 3ca9f06b 3c9748cd 3c8514d2     ...<k..<.H.<...<
  400ef0:	3c6727d3 3c45fe7b 3c270fec 3c0a9fb0     .'g<{.E<..'<...<
  400f00:	3be1ce00 3bb40002 3b8bf6c4 3b5390e9     ...;...;...;..S;
  400f10:	3b14a785 3b3d7688 392d852d              ...;.v=;-.-9

00400f1c <N_coefficients>:
  400f1c:	00000033                                3...

00400f20 <_global_impure_ptr>:
  400f20:	20400008                                ..@ 

00400f24 <_init>:
  400f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f26:	bf00      	nop
  400f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f2a:	bc08      	pop	{r3}
  400f2c:	469e      	mov	lr, r3
  400f2e:	4770      	bx	lr

00400f30 <__init_array_start>:
  400f30:	00400d31 	.word	0x00400d31

00400f34 <__frame_dummy_init_array_entry>:
  400f34:	0040018d                                ..@.

00400f38 <_fini>:
  400f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f3a:	bf00      	nop
  400f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f3e:	bc08      	pop	{r3}
  400f40:	469e      	mov	lr, r3
  400f42:	4770      	bx	lr

00400f44 <__fini_array_start>:
  400f44:	00400169 	.word	0x00400169
